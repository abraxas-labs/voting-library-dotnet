// (c) Copyright 2024 by Abraxas Informatik AG
// For license information see LICENSE file

using System;
using System.ComponentModel.DataAnnotations;

namespace Voting.Lib.Ech.Utils;

/// <summary>
/// Since we do not pass around the IDs of ballot questions as GUIDs like everywhere else, we need to generate an ID ourselves.
/// </summary>
public static class BallotQuestionIdConverter
{
    private const string NormalQuestionIdentifier = "n";
    private const string TieBreakQuestionIdentifier = "t";
    private const char PartSeparator = '_';

    /// <summary>
    /// Creates an eCH ballot question ID.
    /// </summary>
    /// <param name="ballotId">The ballot ID (ballot which contains the question).</param>
    /// <param name="isTieBreakQuestion">Whether the question is a tie break question.</param>
    /// <param name="questionNumber">The number of the question (number inside the ballot).</param>
    /// <returns>The unique eCH ballot question ID.</returns>
    public static string ToEchBallotQuestionId(Guid ballotId, bool isTieBreakQuestion, int questionNumber)
    {
        var questionTypeIdentifier = isTieBreakQuestion
            ? TieBreakQuestionIdentifier
            : NormalQuestionIdentifier;
        return $"{ballotId}{PartSeparator}{questionTypeIdentifier}{PartSeparator}{questionNumber}";
    }

    /// <summary>
    /// Parses an eCH ballot question ID back into its components.
    /// </summary>
    /// <param name="questionId">The eCH ballot question ID to parse.</param>
    /// <returns>The parsed parts of the ID.</returns>
    /// <exception cref="ValidationException">Thrown when the question ID is not valid (ex. not generated by this class).</exception>
    public static (Guid BallotId, bool IsTieBreakQuestion, int QuestioNumber) FromEchBallotQuestionId(string questionId)
    {
        var parts = questionId.Split(PartSeparator, StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length != 3
            || !Guid.TryParse(parts[0], out var ballotId)
            || parts[1] is not NormalQuestionIdentifier and not TieBreakQuestionIdentifier
            || !int.TryParse(parts[2], out var questionNumber))
        {
            throw new ValidationException($"Invalid question ID {questionId}");
        }

        return (ballotId, parts[1] == TieBreakQuestionIdentifier, questionNumber);
    }
}
