//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"

namespace Voting.Lib.Iam.Services.ApiClient.Permission
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial interface ISecureConnectPermissionServiceClient
    {
        /// <summary>
        /// Create an app-package
        /// </summary>
        /// <remarks>
        /// Method validates the input and creates an app-package.
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>***
        /// <br/>
        /// <br/>**tenant** and **app** (and optional **delegation**): The combination of IDs is unique across the entire system
        /// <br/>**lifecycle**: Input will be ignored, app-package is always created with 'ACTIVE' lifecycle
        /// <br/>***
        /// <br/>
        /// <br/>Note: Only the ids for app, tenant and delegation are required in the body, not the whole objects with all properties.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1AppPackage> PermissionService_CreateAppPackageAsync(V1AppPackage body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create an app-package
        /// </summary>
        /// <remarks>
        /// Method validates the input and creates an app-package.
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>***
        /// <br/>
        /// <br/>**tenant** and **app** (and optional **delegation**): The combination of IDs is unique across the entire system
        /// <br/>**lifecycle**: Input will be ignored, app-package is always created with 'ACTIVE' lifecycle
        /// <br/>***
        /// <br/>
        /// <br/>Note: Only the ids for app, tenant and delegation are required in the body, not the whole objects with all properties.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1AppPackage> PermissionService_CreateAppPackageAsync(V1AppPackage body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete an app-package
        /// </summary>
        /// <remarks>
        /// Method deletes an app-package **AND all authorizations** which belong to the apk (app/tenant combination).
        /// <br/>This method can only be used by users with high privileged roles.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiReturnMessage> PermissionService_DeleteAppPackageAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an app-package
        /// </summary>
        /// <remarks>
        /// Method deletes an app-package **AND all authorizations** which belong to the apk (app/tenant combination).
        /// <br/>This method can only be used by users with high privileged roles.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiReturnMessage> PermissionService_DeleteAppPackageAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update an app-package
        /// </summary>
        /// <remarks>
        /// The method validates the input and ensures uniqueness by app/tenant/delegation(once the ids for app, tenant and delegation are set on an app-package, they can't be changed).
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>***
        /// <br/>
        /// <br/>**lifecycle**: Input will be ignored, app-package is always in 'ACTIVE' lifecycle
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1AppPackage> PermissionService_UpdateAppPackageAsync(string id, V1AppPackage body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an app-package
        /// </summary>
        /// <remarks>
        /// The method validates the input and ensures uniqueness by app/tenant/delegation(once the ids for app, tenant and delegation are set on an app-package, they can't be changed).
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>***
        /// <br/>
        /// <br/>**lifecycle**: Input will be ignored, app-package is always in 'ACTIVE' lifecycle
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1AppPackage> PermissionService_UpdateAppPackageAsync(string id, V1AppPackage body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns authorizations by app (no full-load)
        /// </summary>
        /// <remarks>
        /// Method returns all authorizations for the specified app.
        /// <br/>
        /// <br/>**No full-load**
        /// <br/>The *application* and *tenant* objects are not getting full-loaded, just the ids will be returned.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetAppAuthorizationsAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns authorizations by app (no full-load)
        /// </summary>
        /// <remarks>
        /// Method returns all authorizations for the specified app.
        /// <br/>
        /// <br/>**No full-load**
        /// <br/>The *application* and *tenant* objects are not getting full-loaded, just the ids will be returned.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetAppAuthorizationsAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns all apps
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Applications> PermissionService_GetApplicationsAsync(bool? includeDeleted);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns all apps
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Applications> PermissionService_GetApplicationsAsync(bool? includeDeleted, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create an app
        /// </summary>
        /// <remarks>
        /// Method validates the input and creates an application.
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>***
        /// <br/>
        /// <br/>**shortcut**: Field has to be unique accross the system
        /// <br/>**lifecycle** (base app-object): Input will be ignored, app is always created with 'ACTIVE' lifecycle
        /// <br/>**appExt.openMode**: The open-mode must exists with the id (open-mode is not getting created in this call)
        /// <br/>**appExt.redirect_uris**: Can also be managed via separate endpoints
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Application> PermissionService_CreateApplicationAsync(V1Application body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create an app
        /// </summary>
        /// <remarks>
        /// Method validates the input and creates an application.
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>***
        /// <br/>
        /// <br/>**shortcut**: Field has to be unique accross the system
        /// <br/>**lifecycle** (base app-object): Input will be ignored, app is always created with 'ACTIVE' lifecycle
        /// <br/>**appExt.openMode**: The open-mode must exists with the id (open-mode is not getting created in this call)
        /// <br/>**appExt.redirect_uris**: Can also be managed via separate endpoints
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Application> PermissionService_CreateApplicationAsync(V1Application body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns single app by name
        /// </summary>
        /// <remarks>
        /// Method returns an app or a 404 if it doesn't exist.
        /// <br/>
        /// <br/>The app *name* is **NOT unique** across the entire system. Method returns an error *multipleAppsFound* if multiple apps with the same name exists.
        /// <br/>However, it is generally allowed to have several apps with the same name.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Application> PermissionService_GetApplicationByNameAsync(string filter, bool? includeDeleted);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns single app by name
        /// </summary>
        /// <remarks>
        /// Method returns an app or a 404 if it doesn't exist.
        /// <br/>
        /// <br/>The app *name* is **NOT unique** across the entire system. Method returns an error *multipleAppsFound* if multiple apps with the same name exists.
        /// <br/>However, it is generally allowed to have several apps with the same name.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Application> PermissionService_GetApplicationByNameAsync(string filter, bool? includeDeleted, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns single app by shortcut
        /// </summary>
        /// <remarks>
        /// Method returns an app or a 404 if it doesn't exist.
        /// <br/>The app *shortcut* is unique across the entire system.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Application> PermissionService_GetApplicationByShortcutAsync(string filter, bool? includeDeleted);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns single app by shortcut
        /// </summary>
        /// <remarks>
        /// Method returns an app or a 404 if it doesn't exist.
        /// <br/>The app *shortcut* is unique across the entire system.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Application> PermissionService_GetApplicationByShortcutAsync(string filter, bool? includeDeleted, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add a redirect-uri to an app
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiURLs> PermissionService_AddAppRedirectURIsAsync(string app_id, V1AppURI body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a redirect-uri to an app
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiURLs> PermissionService_AddAppRedirectURIsAsync(string app_id, V1AppURI body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a specific redirect-uri from an app
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> PermissionService_DeleteAppRedirectURIAsync(string app_id, string uri);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a specific redirect-uri from an app
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> PermissionService_DeleteAppRedirectURIAsync(string app_id, string uri, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns app-packages by tenant and app
        /// </summary>
        /// <remarks>
        /// Method returns all app-packages for speficied app and tenant.
        /// <br/>
        /// <br/>**idOne**: ID (PK) of the tenant
        /// <br/>**idTwo**: ID (PK) of the app
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1AppPackages> PermissionService_GetAppPackagesByTenantAndApp2Async(string idTwo, string idOne);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns app-packages by tenant and app
        /// </summary>
        /// <remarks>
        /// Method returns all app-packages for speficied app and tenant.
        /// <br/>
        /// <br/>**idOne**: ID (PK) of the tenant
        /// <br/>**idTwo**: ID (PK) of the app
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1AppPackages> PermissionService_GetAppPackagesByTenantAndApp2Async(string idTwo, string idOne, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns 'options' from app-packages by tenant and app
        /// </summary>
        /// <remarks>
        /// Method returns all options (as labels) from all app-packages for the given tenant and app. Options in AppPackages for which the given tenant is the delegation, are not returned.
        /// <br/>An option is a label on an app-package with the key 'option'.
        /// <br/>
        /// <br/>**idOne**: ID (PK) of the tenant
        /// <br/>**idTwo**: ID (PK) of the app
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiLabels> PermissionService_GetOptionsByTenantAndApp2Async(string idTwo, string idOne);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns 'options' from app-packages by tenant and app
        /// </summary>
        /// <remarks>
        /// Method returns all options (as labels) from all app-packages for the given tenant and app. Options in AppPackages for which the given tenant is the delegation, are not returned.
        /// <br/>An option is a label on an app-package with the key 'option'.
        /// <br/>
        /// <br/>**idOne**: ID (PK) of the tenant
        /// <br/>**idTwo**: ID (PK) of the app
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiLabels> PermissionService_GetOptionsByTenantAndApp2Async(string idTwo, string idOne, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns tenants by user and app
        /// </summary>
        /// <remarks>
        /// Method returns all tenants for which the specified user has an authorization for the specified app.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the app
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Tenants> PermissionService_GetTenantsByUserAndApplicationAsync(string idTwo, string idOne);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns tenants by user and app
        /// </summary>
        /// <remarks>
        /// Method returns all tenants for which the specified user has an authorization for the specified app.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the app
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Tenants> PermissionService_GetTenantsByUserAndApplicationAsync(string idTwo, string idOne, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns single app by ID (PK)
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Application> PermissionService_GetApplicationByIdAsync(string id, bool? includeDeleted);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns single app by ID (PK)
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Application> PermissionService_GetApplicationByIdAsync(string id, bool? includeDeleted, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete an app
        /// </summary>
        /// <remarks>
        /// Method deletes the app and app-extension. If **soft-delete** is activated, the app will first be marked as deleted for a few days (depending on the config).
        /// <br/>This method can only be used by users with high privileged roles.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiReturnMessage> PermissionService_DeleteApplicationAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an app
        /// </summary>
        /// <remarks>
        /// Method deletes the app and app-extension. If **soft-delete** is activated, the app will first be marked as deleted for a few days (depending on the config).
        /// <br/>This method can only be used by users with high privileged roles.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiReturnMessage> PermissionService_DeleteApplicationAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update an app
        /// </summary>
        /// <remarks>
        /// The method validates the input and ensures application/ext uniqueness by app-shortcut and existing IDs (once an app-extension-id is set on an app, it can't be changed).
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>***
        /// <br/>
        /// <br/>**lifecycle** (base app-object): Input will be ignored, app is always in 'ACTIVE' lifecycle (unless it is deleted via the explicit endpoint)
        /// <br/>**appExt.redirect_uris**: Can also be managed via separate endpoints
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Application> PermissionService_UpdateApplicationAsync(string id, V1Application body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an app
        /// </summary>
        /// <remarks>
        /// The method validates the input and ensures application/ext uniqueness by app-shortcut and existing IDs (once an app-extension-id is set on an app, it can't be changed).
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>***
        /// <br/>
        /// <br/>**lifecycle** (base app-object): Input will be ignored, app is always in 'ACTIVE' lifecycle (unless it is deleted via the explicit endpoint)
        /// <br/>**appExt.redirect_uris**: Can also be managed via separate endpoints
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Application> PermissionService_UpdateApplicationAsync(string id, V1Application body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns app-packages by app
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1AppPackages> PermissionService_GetAppPackagesByAppAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns app-packages by app
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1AppPackages> PermissionService_GetAppPackagesByAppAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns labels from an app by ID (PK)
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiLabels> PermissionService_GetApplicationLabelsAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns labels from an app by ID (PK)
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiLabels> PermissionService_GetApplicationLabelsAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns redirect-uris from an app
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiURLs> PermissionService_GetAppRedirectURIsAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns redirect-uris from an app
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiURLs> PermissionService_GetAppRedirectURIsAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns tenants by app
        /// </summary>
        /// <remarks>
        /// Method returns all tenants which have an app-package for the specified app.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Tenants> PermissionService_GetTenantsByApplicationAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns tenants by app
        /// </summary>
        /// <remarks>
        /// Method returns all tenants which have an app-package for the specified app.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Tenants> PermissionService_GetTenantsByApplicationAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns users by app and tenant
        /// </summary>
        /// <remarks>
        /// Method returns users for specified app and tenant.
        /// <br/>
        /// <br/>**idOne**: ID (PK) of the app
        /// <br/>**idTwo**: ID (PK) of the tenant
        /// <br/>
        /// <br/>**Define app with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-app' can be set with the app shortcut.
        /// <br/>
        /// <br/>**Define tenant with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Users> PermissionService_GetUsersByAppAndTenantAsync(string idOne, string idTwo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns users by app and tenant
        /// </summary>
        /// <remarks>
        /// Method returns users for specified app and tenant.
        /// <br/>
        /// <br/>**idOne**: ID (PK) of the app
        /// <br/>**idTwo**: ID (PK) of the tenant
        /// <br/>
        /// <br/>**Define app with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-app' can be set with the app shortcut.
        /// <br/>
        /// <br/>**Define tenant with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Users> PermissionService_GetUsersByAppAndTenantAsync(string idOne, string idTwo, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns users by tenant and app (including delegation, with optional filter, returns display-users only)
        /// </summary>
        /// <remarks>
        /// Method returns users by app and tenant, including implicit authorizations from delegation.
        /// <br/>
        /// <br/>**Display-user only**
        /// <br/>Method returns just a subset of the user (called display-user), instead of the full object.
        /// <br/>**Define app with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-app' can be set with the app shortcut.
        /// <br/>
        /// <br/>**Define tenant with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1DisplayUsers> PermissionService_GetUsersByTenantAndAppdelegation2Async(string idOne, string idTwo, string userFilter_loginid, string userFilter_firstname, string userFilter_lastname, string userFilter_servicename, string userFilter_type, string userFilter_username, bool? userFilter_includeDeleted, System.DateTimeOffset? userFilter_lastModified, System.Collections.Generic.IEnumerable<Anonymous> userFilter_lifecycles, string userFilter_origin, string userFilter_email, System.Collections.Generic.IEnumerable<string> userFilter_loginids, string userFilter_externalid);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns users by tenant and app (including delegation, with optional filter, returns display-users only)
        /// </summary>
        /// <remarks>
        /// Method returns users by app and tenant, including implicit authorizations from delegation.
        /// <br/>
        /// <br/>**Display-user only**
        /// <br/>Method returns just a subset of the user (called display-user), instead of the full object.
        /// <br/>**Define app with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-app' can be set with the app shortcut.
        /// <br/>
        /// <br/>**Define tenant with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1DisplayUsers> PermissionService_GetUsersByTenantAndAppdelegation2Async(string idOne, string idTwo, string userFilter_loginid, string userFilter_firstname, string userFilter_lastname, string userFilter_servicename, string userFilter_type, string userFilter_username, bool? userFilter_includeDeleted, System.DateTimeOffset? userFilter_lastModified, System.Collections.Generic.IEnumerable<Anonymous> userFilter_lifecycles, string userFilter_origin, string userFilter_email, System.Collections.Generic.IEnumerable<string> userFilter_loginids, string userFilter_externalid, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns authorizations by user and app
        /// </summary>
        /// <remarks>
        /// Method returns authorizations for specified user and app.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the app
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetAuthorizationsByUserAndApplicationAsync(string idTwo, string idOne);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns authorizations by user and app
        /// </summary>
        /// <remarks>
        /// Method returns authorizations for specified user and app.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the app
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetAuthorizationsByUserAndApplicationAsync(string idTwo, string idOne, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns users by app
        /// </summary>
        /// <remarks>
        /// Method returns users which have an authorization for the specified app.
        /// <br/>
        /// <br/>**Define app with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-app' can be set with the app shortcut.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Users> PermissionService_GetUsersByAppAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns users by app
        /// </summary>
        /// <remarks>
        /// Method returns users which have an authorization for the specified app.
        /// <br/>
        /// <br/>**Define app with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-app' can be set with the app shortcut.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Users> PermissionService_GetUsersByAppAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns authorized users based on filters
        /// </summary>
        /// <remarks>
        /// Method returns users which have an authorization with specified filter.
        /// <br/>
        /// <br/>**Define app with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-app' can be set with the app shortcut.
        /// <br/>
        /// <br/>**Define tenant with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Users> PermissionService_SearchAuthorizedUsersAsync(V1AuthorizedUserFilter body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns authorized users based on filters
        /// </summary>
        /// <remarks>
        /// Method returns users which have an authorization with specified filter.
        /// <br/>
        /// <br/>**Define app with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-app' can be set with the app shortcut.
        /// <br/>
        /// <br/>**Define tenant with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Users> PermissionService_SearchAuthorizedUsersAsync(V1AuthorizedUserFilter body, System.Threading.CancellationToken cancellationToken);

        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiReturnMessage> PermissionService_HealthzAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiReturnMessage> PermissionService_HealthzAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns all available open-modes
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1OpenModes> PermissionService_GetOpenModesAsync(bool? includeDeleted);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns all available open-modes
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1OpenModes> PermissionService_GetOpenModesAsync(bool? includeDeleted, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates an open-mode
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<V1OpenMode> PermissionService_CreateOpenModeAsync(V1OpenMode body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates an open-mode
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<V1OpenMode> PermissionService_CreateOpenModeAsync(V1OpenMode body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns open-mode by ID (PK)
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1OpenMode> PermissionService_GetOpenModeByIdAsync(string id, bool? includeDeleted);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns open-mode by ID (PK)
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1OpenMode> PermissionService_GetOpenModeByIdAsync(string id, bool? includeDeleted, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete an open-mode
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<ApiReturnMessage> PermissionService_DeleteOpenModeAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an open-mode
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<ApiReturnMessage> PermissionService_DeleteOpenModeAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update an open-mode
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<V1OpenMode> PermissionService_UpdateOpenModeAsync(string id, V1OpenMode body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an open-mode
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<V1OpenMode> PermissionService_UpdateOpenModeAsync(string id, V1OpenMode body, System.Threading.CancellationToken cancellationToken);

        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiReturnMessage> PermissionService_ReadyAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiReturnMessage> PermissionService_ReadyAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns apps by user and tenant
        /// </summary>
        /// <remarks>
        /// Method returns all applications for which the specified user has an authorization for the specified tenant.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the tenant
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Applications> PermissionService_GetApplicationsByUserAndTenantAsync(string idTwo, string idOne);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns apps by user and tenant
        /// </summary>
        /// <remarks>
        /// Method returns all applications for which the specified user has an authorization for the specified tenant.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the tenant
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Applications> PermissionService_GetApplicationsByUserAndTenantAsync(string idTwo, string idOne, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns authorizations by user and tenant
        /// </summary>
        /// <remarks>
        /// Method returns authorizations for specified user and tenant.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the tenant
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetAuthorizationsByUserAndTenantAsync(string idTwo, string idOne);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns authorizations by user and tenant
        /// </summary>
        /// <remarks>
        /// Method returns authorizations for specified user and tenant.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the tenant
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetAuthorizationsByUserAndTenantAsync(string idTwo, string idOne, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns authorizations for user and tenant (with delegation)
        /// </summary>
        /// <remarks>
        /// Method returns authorizations for specified user and tenant (including implicit ones from delegation).
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the tenant
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetAuthorizationsByUserAndTenantAndDelegationAsync(string idTwo, string idOne);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns authorizations for user and tenant (with delegation)
        /// </summary>
        /// <remarks>
        /// Method returns authorizations for specified user and tenant (including implicit ones from delegation).
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the tenant
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetAuthorizationsByUserAndTenantAndDelegationAsync(string idTwo, string idOne, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns tenants (with optional filters)
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Tenants> PermissionService_GetTenantsAsync(bool? includeDeleted, string origin, string mappingId_key, string mappingId_value, System.DateTimeOffset? lastModified, System.Collections.Generic.IEnumerable<Anonymous2> lifecycles, string tenantId, string name, string bfs, string name_contains);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns tenants (with optional filters)
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Tenants> PermissionService_GetTenantsAsync(bool? includeDeleted, string origin, string mappingId_key, string mappingId_value, System.DateTimeOffset? lastModified, System.Collections.Generic.IEnumerable<Anonymous2> lifecycles, string tenantId, string name, string bfs, string name_contains, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a tenant
        /// </summary>
        /// <remarks>
        /// Method validates the input and creates a tenant.
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>***
        /// <br/>
        /// <br/>**TenantId** (not PK) and **name**: Fields have to be unique accross the system
        /// <br/>**lifecycle** (base tenant-object): Input will be ignored, tenant is always created with 'ACTIVE' lifecycle
        /// <br/>**tenantExt.origin**: If no value is provided, method adds 'SecureConnect' as default
        /// <br/>***
        /// <br/>
        /// <br/>Method will add some default App-Packages to the tenant in a background-task (AdminPanel, myAccount, SECURE Access).
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Tenant> PermissionService_CreateTenantAsync(V1Tenant body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a tenant
        /// </summary>
        /// <remarks>
        /// Method validates the input and creates a tenant.
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>***
        /// <br/>
        /// <br/>**TenantId** (not PK) and **name**: Fields have to be unique accross the system
        /// <br/>**lifecycle** (base tenant-object): Input will be ignored, tenant is always created with 'ACTIVE' lifecycle
        /// <br/>**tenantExt.origin**: If no value is provided, method adds 'SecureConnect' as default
        /// <br/>***
        /// <br/>
        /// <br/>Method will add some default App-Packages to the tenant in a background-task (AdminPanel, myAccount, SECURE Access).
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Tenant> PermissionService_CreateTenantAsync(V1Tenant body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns tenants by label-filter
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Tenants> PermissionService_GetTenantsByLabelsAsync(V1LabelsFilter body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns tenants by label-filter
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Tenants> PermissionService_GetTenantsByLabelsAsync(V1LabelsFilter body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns single tenant by TenantId (not PK)
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Tenant> PermissionService_GetTenantByTenantIdAsync(string tenantId, bool? includeDeleted);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns single tenant by TenantId (not PK)
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Tenant> PermissionService_GetTenantByTenantIdAsync(string tenantId, bool? includeDeleted, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns single address assigned to a tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<ApiAddress> PermissionService_GetTenantAddressAsync(string idOne, string idTwo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns single address assigned to a tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<ApiAddress> PermissionService_GetTenantAddressAsync(string idOne, string idTwo, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete address from tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<object> PermissionService_DeleteTenantAddressAsync(string idOne, string idTwo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete address from tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<object> PermissionService_DeleteTenantAddressAsync(string idOne, string idTwo, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns app-packages by tenant and app
        /// </summary>
        /// <remarks>
        /// Method returns all app-packages for speficied app and tenant.
        /// <br/>
        /// <br/>**idOne**: ID (PK) of the tenant
        /// <br/>**idTwo**: ID (PK) of the app
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1AppPackages> PermissionService_GetAppPackagesByTenantAndAppAsync(string idOne, string idTwo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns app-packages by tenant and app
        /// </summary>
        /// <remarks>
        /// Method returns all app-packages for speficied app and tenant.
        /// <br/>
        /// <br/>**idOne**: ID (PK) of the tenant
        /// <br/>**idTwo**: ID (PK) of the app
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1AppPackages> PermissionService_GetAppPackagesByTenantAndAppAsync(string idOne, string idTwo, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns 'options' from app-packages by tenant and app
        /// </summary>
        /// <remarks>
        /// Method returns all options (as labels) from all app-packages for the given tenant and app. Options in AppPackages for which the given tenant is the delegation, are not returned.
        /// <br/>An option is a label on an app-package with the key 'option'.
        /// <br/>
        /// <br/>**idOne**: ID (PK) of the tenant
        /// <br/>**idTwo**: ID (PK) of the app
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiLabels> PermissionService_GetOptionsByTenantAndAppAsync(string idOne, string idTwo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns 'options' from app-packages by tenant and app
        /// </summary>
        /// <remarks>
        /// Method returns all options (as labels) from all app-packages for the given tenant and app. Options in AppPackages for which the given tenant is the delegation, are not returned.
        /// <br/>An option is a label on an app-package with the key 'option'.
        /// <br/>
        /// <br/>**idOne**: ID (PK) of the tenant
        /// <br/>**idTwo**: ID (PK) of the app
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiLabels> PermissionService_GetOptionsByTenantAndAppAsync(string idOne, string idTwo, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns possible apps for tenant and delegation
        /// </summary>
        /// <remarks>
        /// Method returns all apps for which the given tenant has no app-package yet , including app-packages with tenant-delegation set (idTwo).
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Applications> PermissionService_GetPossibleAppsByDelegationAsync(string idOne, string idTwo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns possible apps for tenant and delegation
        /// </summary>
        /// <remarks>
        /// Method returns all apps for which the given tenant has no app-package yet , including app-packages with tenant-delegation set (idTwo).
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Applications> PermissionService_GetPossibleAppsByDelegationAsync(string idOne, string idTwo, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns single e-mail assigned to a tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<CommonapiEmail> PermissionService_GetTenantEmailAsync(string idOne, string idTwo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns single e-mail assigned to a tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<CommonapiEmail> PermissionService_GetTenantEmailAsync(string idOne, string idTwo, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete e-mail from tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<object> PermissionService_DeleteTenantEmailAsync(string idOne, string idTwo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete e-mail from tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<object> PermissionService_DeleteTenantEmailAsync(string idOne, string idTwo, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns single phone assigned to a tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<CommonapiPhoneNumber> PermissionService_GetTenantPhoneAsync(string idOne, string idTwo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns single phone assigned to a tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<CommonapiPhoneNumber> PermissionService_GetTenantPhoneAsync(string idOne, string idTwo, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete phone from tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<object> PermissionService_DeleteTenantPhoneAsync(string idOne, string idTwo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete phone from tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<object> PermissionService_DeleteTenantPhoneAsync(string idOne, string idTwo, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns users by app and tenant
        /// </summary>
        /// <remarks>
        /// Method returns users for specified app and tenant.
        /// <br/>
        /// <br/>**idOne**: ID (PK) of the app
        /// <br/>**idTwo**: ID (PK) of the tenant
        /// <br/>
        /// <br/>**Define app with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-app' can be set with the app shortcut.
        /// <br/>
        /// <br/>**Define tenant with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Users> PermissionService_GetUsersByAppAndTenant2Async(string idTwo, string idOne);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns users by app and tenant
        /// </summary>
        /// <remarks>
        /// Method returns users for specified app and tenant.
        /// <br/>
        /// <br/>**idOne**: ID (PK) of the app
        /// <br/>**idTwo**: ID (PK) of the tenant
        /// <br/>
        /// <br/>**Define app with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-app' can be set with the app shortcut.
        /// <br/>
        /// <br/>**Define tenant with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Users> PermissionService_GetUsersByAppAndTenant2Async(string idTwo, string idOne, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns users by tenant and app (including delegation, with optional filter, returns display-users only)
        /// </summary>
        /// <remarks>
        /// Method returns users by app and tenant, including implicit authorizations from delegation.
        /// <br/>
        /// <br/>**Display-user only**
        /// <br/>Method returns just a subset of the user (called display-user), instead of the full object.
        /// <br/>**Define app with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-app' can be set with the app shortcut.
        /// <br/>
        /// <br/>**Define tenant with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1DisplayUsers> PermissionService_GetUsersByTenantAndAppdelegationAsync(string idTwo, string idOne, string userFilter_loginid, string userFilter_firstname, string userFilter_lastname, string userFilter_servicename, string userFilter_type, string userFilter_username, bool? userFilter_includeDeleted, System.DateTimeOffset? userFilter_lastModified, System.Collections.Generic.IEnumerable<Anonymous3> userFilter_lifecycles, string userFilter_origin, string userFilter_email, System.Collections.Generic.IEnumerable<string> userFilter_loginids, string userFilter_externalid);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns users by tenant and app (including delegation, with optional filter, returns display-users only)
        /// </summary>
        /// <remarks>
        /// Method returns users by app and tenant, including implicit authorizations from delegation.
        /// <br/>
        /// <br/>**Display-user only**
        /// <br/>Method returns just a subset of the user (called display-user), instead of the full object.
        /// <br/>**Define app with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-app' can be set with the app shortcut.
        /// <br/>
        /// <br/>**Define tenant with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1DisplayUsers> PermissionService_GetUsersByTenantAndAppdelegationAsync(string idTwo, string idOne, string userFilter_loginid, string userFilter_firstname, string userFilter_lastname, string userFilter_servicename, string userFilter_type, string userFilter_username, bool? userFilter_includeDeleted, System.DateTimeOffset? userFilter_lastModified, System.Collections.Generic.IEnumerable<Anonymous3> userFilter_lifecycles, string userFilter_origin, string userFilter_email, System.Collections.Generic.IEnumerable<string> userFilter_loginids, string userFilter_externalid, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns possible apps for user by tenant
        /// </summary>
        /// <remarks>
        /// Method returns all tenant-apps (defined by AppPackages) for which the user isn't authorized yet
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Applications> PermissionService_GetPossibleAppsByUserAndTenant2Async(string idTwo, string idOne);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns possible apps for user by tenant
        /// </summary>
        /// <remarks>
        /// Method returns all tenant-apps (defined by AppPackages) for which the user isn't authorized yet
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Applications> PermissionService_GetPossibleAppsByUserAndTenant2Async(string idTwo, string idOne, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns single tenant by ID (PK)
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Tenant> PermissionService_GetTenantByIdAsync(string id, bool? includeDeleted);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns single tenant by ID (PK)
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Tenant> PermissionService_GetTenantByIdAsync(string id, bool? includeDeleted, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a tenant
        /// </summary>
        /// <remarks>
        /// Method deletes the tenant and tenant-extension. If **soft-delete** is activated, the tenant will first be marked as deleted for a few days (depending on the config).
        /// <br/>This method can only be used by users with high privileged roles.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiReturnMessage> PermissionService_DeleteTenantAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a tenant
        /// </summary>
        /// <remarks>
        /// Method deletes the tenant and tenant-extension. If **soft-delete** is activated, the tenant will first be marked as deleted for a few days (depending on the config).
        /// <br/>This method can only be used by users with high privileged roles.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiReturnMessage> PermissionService_DeleteTenantAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a tenant
        /// </summary>
        /// <remarks>
        /// The method validates the input and ensures tenant/ext uniqueness by tenantid/name and existing IDs (once a tenant-extension-id is set on a tenant, it can't be changed).
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>***
        /// <br/>
        /// <br/>**lifecycle** (base tenant-object): Input will be ignored, tenant is always in 'ACTIVE' lifecycle (unless it is deleted via the explicit endpoint)
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Tenant> PermissionService_UpdateTenantAsync(string id, V1Tenant body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a tenant
        /// </summary>
        /// <remarks>
        /// The method validates the input and ensures tenant/ext uniqueness by tenantid/name and existing IDs (once a tenant-extension-id is set on a tenant, it can't be changed).
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>***
        /// <br/>
        /// <br/>**lifecycle** (base tenant-object): Input will be ignored, tenant is always in 'ACTIVE' lifecycle (unless it is deleted via the explicit endpoint)
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Tenant> PermissionService_UpdateTenantAsync(string id, V1Tenant body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns addresses assigned to a tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<ApiAddresses> PermissionService_GetTenantAddressesAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns addresses assigned to a tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<ApiAddresses> PermissionService_GetTenantAddressesAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns app-packages by tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1AppPackages> PermissionService_GetAppPackagesByTenantAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns app-packages by tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1AppPackages> PermissionService_GetAppPackagesByTenantAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns apps by tenant
        /// </summary>
        /// <remarks>
        /// Method returns all applications for which the specified tenant has an app-package.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Applications> PermissionService_GetApplicationsByTenantAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns apps by tenant
        /// </summary>
        /// <remarks>
        /// Method returns all applications for which the specified tenant has an app-package.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Applications> PermissionService_GetApplicationsByTenantAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns e-mails assigned to a tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<ApiEmails> PermissionService_GetTenantEmailsAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns e-mails assigned to a tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<ApiEmails> PermissionService_GetTenantEmailsAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns labels from a tenant by ID (PK)
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiLabels> PermissionService_GetTenantLabelsAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns labels from a tenant by ID (PK)
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiLabels> PermissionService_GetTenantLabelsAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns phones assigned to a tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<ApiPhoneNumbers> PermissionService_GetTenantPhonesAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns phones assigned to a tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<ApiPhoneNumbers> PermissionService_GetTenantPhonesAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns possible apps for tenant
        /// </summary>
        /// <remarks>
        /// Method returns all apps for which the given tenant has no app-package yet
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Applications> PermissionService_GetPossibleAppsByTenantAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns possible apps for tenant
        /// </summary>
        /// <remarks>
        /// Method returns all apps for which the given tenant has no app-package yet
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Applications> PermissionService_GetPossibleAppsByTenantAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add address to tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<ApiAddress> PermissionService_AddTenantAddressAsync(string tenantId, ApiAddress body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add address to tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<ApiAddress> PermissionService_AddTenantAddressAsync(string tenantId, ApiAddress body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add e-mail to tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<CommonapiEmail> PermissionService_AddTenantEmailAsync(string tenantId, CommonapiEmail body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add e-mail to tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<CommonapiEmail> PermissionService_AddTenantEmailAsync(string tenantId, CommonapiEmail body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add phone to tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<CommonapiPhoneNumber> PermissionService_AddTenantPhoneAsync(string tenantId, CommonapiPhoneNumber body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add phone to tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<CommonapiPhoneNumber> PermissionService_AddTenantPhoneAsync(string tenantId, CommonapiPhoneNumber body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns users by tenant (with optional filters)
        /// </summary>
        /// <remarks>
        /// Method returns users which have an authorization for the specified tenant.
        /// <br/>
        /// <br/>**Define tenant with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Users> PermissionService_GetUsersByTenantAsync(string tenantId, string userFilter_loginid, string userFilter_firstname, string userFilter_lastname, string userFilter_servicename, string userFilter_type, string userFilter_username, bool? userFilter_includeDeleted, System.DateTimeOffset? userFilter_lastModified, System.Collections.Generic.IEnumerable<Anonymous4> userFilter_lifecycles, string userFilter_origin, string userFilter_email, System.Collections.Generic.IEnumerable<string> userFilter_loginids, string userFilter_externalid);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns users by tenant (with optional filters)
        /// </summary>
        /// <remarks>
        /// Method returns users which have an authorization for the specified tenant.
        /// <br/>
        /// <br/>**Define tenant with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Users> PermissionService_GetUsersByTenantAsync(string tenantId, string userFilter_loginid, string userFilter_firstname, string userFilter_lastname, string userFilter_servicename, string userFilter_type, string userFilter_username, bool? userFilter_includeDeleted, System.DateTimeOffset? userFilter_lastModified, System.Collections.Generic.IEnumerable<Anonymous4> userFilter_lifecycles, string userFilter_origin, string userFilter_email, System.Collections.Generic.IEnumerable<string> userFilter_loginids, string userFilter_externalid, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns users by tenand (including delegation, with optional filter, returns display-users only)
        /// </summary>
        /// <remarks>
        /// Method returns users tenant, including implicit authorizations from delegation.
        /// <br/>
        /// <br/>**Display-user only**
        /// <br/>Method returns just a subset of the user (called display-user), instead of the full object.
        /// <br/>**Define tenant with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1DisplayUsers> PermissionService_GetUsersByTenantAndDelegationAsync(string tenantId, string userFilter_loginid, string userFilter_firstname, string userFilter_lastname, string userFilter_servicename, string userFilter_type, string userFilter_username, bool? userFilter_includeDeleted, System.DateTimeOffset? userFilter_lastModified, System.Collections.Generic.IEnumerable<Anonymous5> userFilter_lifecycles, string userFilter_origin, string userFilter_email, System.Collections.Generic.IEnumerable<string> userFilter_loginids, string userFilter_externalid);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns users by tenand (including delegation, with optional filter, returns display-users only)
        /// </summary>
        /// <remarks>
        /// Method returns users tenant, including implicit authorizations from delegation.
        /// <br/>
        /// <br/>**Display-user only**
        /// <br/>Method returns just a subset of the user (called display-user), instead of the full object.
        /// <br/>**Define tenant with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1DisplayUsers> PermissionService_GetUsersByTenantAndDelegationAsync(string tenantId, string userFilter_loginid, string userFilter_firstname, string userFilter_lastname, string userFilter_servicename, string userFilter_type, string userFilter_username, bool? userFilter_includeDeleted, System.DateTimeOffset? userFilter_lastModified, System.Collections.Generic.IEnumerable<Anonymous5> userFilter_lifecycles, string userFilter_origin, string userFilter_email, System.Collections.Generic.IEnumerable<string> userFilter_loginids, string userFilter_externalid, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns users which belongs to tenants (no user-values, ids only)
        /// </summary>
        /// <remarks>
        /// Method loads all authorizations for given 'tenantIds' and filters out all 'loginids' which do not have an authorization yet.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1LoginIds> PermissionService_GetUsersBelongsToTenantsAsync(System.Collections.Generic.IEnumerable<string> loginIds, System.Collections.Generic.IEnumerable<string> tenantIds);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns users which belongs to tenants (no user-values, ids only)
        /// </summary>
        /// <remarks>
        /// Method loads all authorizations for given 'tenantIds' and filters out all 'loginids' which do not have an authorization yet.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1LoginIds> PermissionService_GetUsersBelongsToTenantsAsync(System.Collections.Generic.IEnumerable<string> loginIds, System.Collections.Generic.IEnumerable<string> tenantIds, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns tenants by user and app
        /// </summary>
        /// <remarks>
        /// Method returns all tenants for which the specified user has an authorization for the specified app.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the app
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Tenants> PermissionService_GetTenantsByUserAndApplication2Async(string idOne, string idTwo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns tenants by user and app
        /// </summary>
        /// <remarks>
        /// Method returns all tenants for which the specified user has an authorization for the specified app.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the app
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Tenants> PermissionService_GetTenantsByUserAndApplication2Async(string idOne, string idTwo, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns authorizations by user and app
        /// </summary>
        /// <remarks>
        /// Method returns authorizations for specified user and app.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the app
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetAuthorizationsByUserAndApplication2Async(string idOne, string idTwo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns authorizations by user and app
        /// </summary>
        /// <remarks>
        /// Method returns authorizations for specified user and app.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the app
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetAuthorizationsByUserAndApplication2Async(string idOne, string idTwo, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete an authorization
        /// </summary>
        /// <remarks>
        /// Method deletes the authorization. If **soft-delete** is activated, the authorization will first be marked as deleted for a few days (depending on the config).
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user (will be ignored, just idTwo is relevant)
        /// <br/>**idTwo**: ID (PK) of the authorization
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiReturnMessage> PermissionService_DeleteAuthorizationAsync(string idOne, string idTwo, string x_vrsg_tenant);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an authorization
        /// </summary>
        /// <remarks>
        /// Method deletes the authorization. If **soft-delete** is activated, the authorization will first be marked as deleted for a few days (depending on the config).
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user (will be ignored, just idTwo is relevant)
        /// <br/>**idTwo**: ID (PK) of the authorization
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiReturnMessage> PermissionService_DeleteAuthorizationAsync(string idOne, string idTwo, string x_vrsg_tenant, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns apps by user and tenant
        /// </summary>
        /// <remarks>
        /// Method returns all applications for which the specified user has an authorization for the specified tenant.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the tenant
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Applications> PermissionService_GetApplicationsByUserAndTenant2Async(string idOne, string idTwo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns apps by user and tenant
        /// </summary>
        /// <remarks>
        /// Method returns all applications for which the specified user has an authorization for the specified tenant.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the tenant
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Applications> PermissionService_GetApplicationsByUserAndTenant2Async(string idOne, string idTwo, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns authorizations by user and tenant
        /// </summary>
        /// <remarks>
        /// Method returns authorizations for specified user and tenant.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the tenant
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetAuthorizationsByUserAndTenant2Async(string idOne, string idTwo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns authorizations by user and tenant
        /// </summary>
        /// <remarks>
        /// Method returns authorizations for specified user and tenant.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the tenant
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetAuthorizationsByUserAndTenant2Async(string idOne, string idTwo, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns authorizations for user and tenant (with delegation)
        /// </summary>
        /// <remarks>
        /// Method returns authorizations for specified user and tenant (including implicit ones from delegation).
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the tenant
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetAuthorizationsByUserAndTenantAndDelegation2Async(string idOne, string idTwo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns authorizations for user and tenant (with delegation)
        /// </summary>
        /// <remarks>
        /// Method returns authorizations for specified user and tenant (including implicit ones from delegation).
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the tenant
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetAuthorizationsByUserAndTenantAndDelegation2Async(string idOne, string idTwo, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns possible apps for user by tenant
        /// </summary>
        /// <remarks>
        /// Method returns all tenant-apps (defined by AppPackages) for which the user isn't authorized yet
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Applications> PermissionService_GetPossibleAppsByUserAndTenantAsync(string idOne, string idTwo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns possible apps for user by tenant
        /// </summary>
        /// <remarks>
        /// Method returns all tenant-apps (defined by AppPackages) for which the user isn't authorized yet
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Applications> PermissionService_GetPossibleAppsByUserAndTenantAsync(string idOne, string idTwo, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns apps by user
        /// </summary>
        /// <remarks>
        /// Method returns all applications for which the specified user has an authorization.
        /// <br/>
        /// <br/>**id**: LoginId of the user
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Applications> PermissionService_GetApplicationsByUserAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns apps by user
        /// </summary>
        /// <remarks>
        /// Method returns all applications for which the specified user has an authorization.
        /// <br/>
        /// <br/>**id**: LoginId of the user
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Applications> PermissionService_GetApplicationsByUserAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns authorizations by user
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetUserAuthorizationsAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns authorizations by user
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetUserAuthorizationsAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete authorizations by user
        /// </summary>
        /// <remarks>
        /// Method deletes all authorizations from the specified user. If **soft-delete** is activated, the authorizations will first be marked as deleted for a few days (depending on the config).
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>
        /// <br/>**id**: LoginId of the user
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiReturnMessage> PermissionService_DeleteAuthorizationsByLoginIDAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete authorizations by user
        /// </summary>
        /// <remarks>
        /// Method deletes all authorizations from the specified user. If **soft-delete** is activated, the authorizations will first be marked as deleted for a few days (depending on the config).
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>
        /// <br/>**id**: LoginId of the user
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiReturnMessage> PermissionService_DeleteAuthorizationsByLoginIDAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns authorizations by user (including delegations)
        /// </summary>
        /// <remarks>
        /// In addition of just returning the explicit authorizations of the user, this endpoint returns also the **implicit authorizations** which are generated by the delegations configured on app-packages. It is not possible to distinguish based on the return which authorization is explicit and which is implicit (from delegation).
        /// <br/>
        /// <br/>There is no query-parameter. The endpoint has to be called with '/true' ('/false' is not possible).
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetUserAuthorizationsWithDelegationsAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns authorizations by user (including delegations)
        /// </summary>
        /// <remarks>
        /// In addition of just returning the explicit authorizations of the user, this endpoint returns also the **implicit authorizations** which are generated by the delegations configured on app-packages. It is not possible to distinguish based on the return which authorization is explicit and which is implicit (from delegation).
        /// <br/>
        /// <br/>There is no query-parameter. The endpoint has to be called with '/true' ('/false' is not possible).
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetUserAuthorizationsWithDelegationsAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns full user history
        /// </summary>
        /// <remarks>
        /// Method loads changes from the user-object, login-object and authorization-object of the specified user.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V3ChangeObjects> PermissionService_GetUserHistoryAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns full user history
        /// </summary>
        /// <remarks>
        /// Method loads changes from the user-object, login-object and authorization-object of the specified user.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V3ChangeObjects> PermissionService_GetUserHistoryAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns possible apps for user
        /// </summary>
        /// <remarks>
        /// Method returns all apps for which the user isn't authorized yet.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Applications> PermissionService_GetPossibleAppsByUserAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns possible apps for user
        /// </summary>
        /// <remarks>
        /// Method returns all apps for which the user isn't authorized yet.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Applications> PermissionService_GetPossibleAppsByUserAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Return tenants by user
        /// </summary>
        /// <remarks>
        /// Method returns all tenants for which the specified user has an authorization.
        /// <br/>
        /// <br/>**id**: LoginId of the user
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Tenants> PermissionService_GetTenantsByUserAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return tenants by user
        /// </summary>
        /// <remarks>
        /// Method returns all tenants for which the specified user has an authorization.
        /// <br/>
        /// <br/>**id**: LoginId of the user
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Tenants> PermissionService_GetTenantsByUserAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create an authorization
        /// </summary>
        /// <remarks>
        /// Method validates the input and creates an authorization.
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>***
        /// <br/>
        /// <br/>**tenant** and **app**: The combination of app and tenant in authorization is unique across the entire system
        /// <br/>**lifecycle**: Input will be ignored, authorization is always created with 'ACTIVE' lifecycle
        /// <br/>***
        /// <br/>
        /// <br/>- An authorization can only be added, if the tenant has a corresponding app-package for the app
        /// <br/>- Only the ids for app and tenant are required in the body, not the whole objects with all properties.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Abraxaspermissionapiv1Authorization> PermissionService_CreateAuthorizationAsync(string loginId, Abraxaspermissionapiv1Authorization body, string x_vrsg_tenant);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create an authorization
        /// </summary>
        /// <remarks>
        /// Method validates the input and creates an authorization.
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>***
        /// <br/>
        /// <br/>**tenant** and **app**: The combination of app and tenant in authorization is unique across the entire system
        /// <br/>**lifecycle**: Input will be ignored, authorization is always created with 'ACTIVE' lifecycle
        /// <br/>***
        /// <br/>
        /// <br/>- An authorization can only be added, if the tenant has a corresponding app-package for the app
        /// <br/>- Only the ids for app and tenant are required in the body, not the whole objects with all properties.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Abraxaspermissionapiv1Authorization> PermissionService_CreateAuthorizationAsync(string loginId, Abraxaspermissionapiv1Authorization body, string x_vrsg_tenant, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update an authorization
        /// </summary>
        /// <remarks>
        /// Method validates the input and updates the authorization.
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>***
        /// <br/>
        /// <br/>**tenant** and **app**: The combination of app and tenant in authorization is unique across the entire system
        /// <br/>**lifecycle**: Input will be ignored, authorization is always in 'ACTIVE' lifecycle (unless it is deleted via the explicit endpoint)
        /// <br/>***
        /// <br/>
        /// <br/>- An authorization is only valid, if the tenant has a corresponding app-package for the app
        /// <br/>- Only the ids for app and tenant are required in the body, not the whole objects with all properties.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Abraxaspermissionapiv1Authorization> PermissionService_UpdateAuthorizationAsync(string loginId, string id, Abraxaspermissionapiv1Authorization body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an authorization
        /// </summary>
        /// <remarks>
        /// Method validates the input and updates the authorization.
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>***
        /// <br/>
        /// <br/>**tenant** and **app**: The combination of app and tenant in authorization is unique across the entire system
        /// <br/>**lifecycle**: Input will be ignored, authorization is always in 'ACTIVE' lifecycle (unless it is deleted via the explicit endpoint)
        /// <br/>***
        /// <br/>
        /// <br/>- An authorization is only valid, if the tenant has a corresponding app-package for the app
        /// <br/>- Only the ids for app and tenant are required in the body, not the whole objects with all properties.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Abraxaspermissionapiv1Authorization> PermissionService_UpdateAuthorizationAsync(string loginId, string id, Abraxaspermissionapiv1Authorization body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns authorizations by user (only allowed)
        /// </summary>
        /// <remarks>
        /// Special roles in the admin panel application can be used to restrict which permissions a user is allowed to see and manage.
        /// <br/>This method just returns these authorizations (where the caller is allowed to see with delegations).
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetAllowedUserAuthorizationsAsync(string loginid);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns authorizations by user (only allowed)
        /// </summary>
        /// <remarks>
        /// Special roles in the admin panel application can be used to restrict which permissions a user is allowed to see and manage.
        /// <br/>This method just returns these authorizations (where the caller is allowed to see with delegations).
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetAllowedUserAuthorizationsAsync(string loginid, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns possible apps for new authorizations
        /// </summary>
        /// <remarks>
        /// Method returns the possible apps for new authorization for the specified user.
        /// <br/>Alread set authorizations will be filtered out from the result.
        /// <br/>
        /// <br/>**Adminpanel only?**
        /// <br/>Endpoint has been implemented specifically for the 'Adminpanel' app to make it easier to manage permissions.
        /// <br/>
        /// <br/>**Super-Tenant relevant**
        /// <br/>The endpoint behaves differently when it is called in the context of a super-tenant (defined by config).
        /// <br/>
        /// <br/>**Tenantid is required for none-service-Users**
        /// <br/>If the caller is not a service-user, the tenant-id is required and has to be != 0.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Applications> PermissionService_GetPossibleApplicationsForAuthorizationAsync(string loginid, string tenantid);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns possible apps for new authorizations
        /// </summary>
        /// <remarks>
        /// Method returns the possible apps for new authorization for the specified user.
        /// <br/>Alread set authorizations will be filtered out from the result.
        /// <br/>
        /// <br/>**Adminpanel only?**
        /// <br/>Endpoint has been implemented specifically for the 'Adminpanel' app to make it easier to manage permissions.
        /// <br/>
        /// <br/>**Super-Tenant relevant**
        /// <br/>The endpoint behaves differently when it is called in the context of a super-tenant (defined by config).
        /// <br/>
        /// <br/>**Tenantid is required for none-service-Users**
        /// <br/>If the caller is not a service-user, the tenant-id is required and has to be != 0.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Applications> PermissionService_GetPossibleApplicationsForAuthorizationAsync(string loginid, string tenantid, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns possible roles for new authorizations for specified app
        /// </summary>
        /// <remarks>
        /// Method returns the possible roles for new authorization for the specified user and app.
        /// <br/>Alread set roles will be filtered out from the result.
        /// <br/>
        /// <br/>**Adminpanel only?**
        /// <br/>Endpoint has been implemented specifically for the 'Adminpanel' app to make it easier to manage permissions.
        /// <br/>
        /// <br/>**Tenantid is required for none-service-Users**
        /// <br/>If the caller is not a service-user, the tenant-id is required and has to be != 0.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiLabels> PermissionService_GetPossibleRolesForAuthorizationAsync(string loginid, string tenantid, string appid);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns possible roles for new authorizations for specified app
        /// </summary>
        /// <remarks>
        /// Method returns the possible roles for new authorization for the specified user and app.
        /// <br/>Alread set roles will be filtered out from the result.
        /// <br/>
        /// <br/>**Adminpanel only?**
        /// <br/>Endpoint has been implemented specifically for the 'Adminpanel' app to make it easier to manage permissions.
        /// <br/>
        /// <br/>**Tenantid is required for none-service-Users**
        /// <br/>If the caller is not a service-user, the tenant-id is required and has to be != 0.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiLabels> PermissionService_GetPossibleRolesForAuthorizationAsync(string loginid, string tenantid, string appid, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns possible tenants for new authorizations
        /// </summary>
        /// <remarks>
        /// Method returns the possible tenants for new authorization for the specified user.
        /// <br/>
        /// <br/>**Adminpanel only?**
        /// <br/>Endpoint has been implemented specifically for the 'Adminpanel' app to make it easier to manage permissions.
        /// <br/>
        /// <br/>**Super-Tenant relevant**
        /// <br/>The endpoint behaves differently when it is called in the context of a super-tenant (defined by config).
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Tenants> PermissionService_GetPossibleTenantsForAuthorizationAsync(string loginid, string name_contains);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns possible tenants for new authorizations
        /// </summary>
        /// <remarks>
        /// Method returns the possible tenants for new authorization for the specified user.
        /// <br/>
        /// <br/>**Adminpanel only?**
        /// <br/>Endpoint has been implemented specifically for the 'Adminpanel' app to make it easier to manage permissions.
        /// <br/>
        /// <br/>**Super-Tenant relevant**
        /// <br/>The endpoint behaves differently when it is called in the context of a super-tenant (defined by config).
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<V1Tenants> PermissionService_GetPossibleTenantsForAuthorizationAsync(string loginid, string name_contains, System.Threading.CancellationToken cancellationToken);

        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiLabels> PermissionService_ValidateAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiLabels> PermissionService_ValidateAsync(System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class SecureConnectPermissionServiceClient : ISecureConnectPermissionServiceClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public SecureConnectPermissionServiceClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Create an app-package
        /// </summary>
        /// <remarks>
        /// Method validates the input and creates an app-package.
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>***
        /// <br/>
        /// <br/>**tenant** and **app** (and optional **delegation**): The combination of IDs is unique across the entire system
        /// <br/>**lifecycle**: Input will be ignored, app-package is always created with 'ACTIVE' lifecycle
        /// <br/>***
        /// <br/>
        /// <br/>Note: Only the ids for app, tenant and delegation are required in the body, not the whole objects with all properties.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1AppPackage> PermissionService_CreateAppPackageAsync(V1AppPackage body)
        {
            return PermissionService_CreateAppPackageAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create an app-package
        /// </summary>
        /// <remarks>
        /// Method validates the input and creates an app-package.
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>***
        /// <br/>
        /// <br/>**tenant** and **app** (and optional **delegation**): The combination of IDs is unique across the entire system
        /// <br/>**lifecycle**: Input will be ignored, app-package is always created with 'ACTIVE' lifecycle
        /// <br/>***
        /// <br/>
        /// <br/>Note: Only the ids for app, tenant and delegation are required in the body, not the whole objects with all properties.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1AppPackage> PermissionService_CreateAppPackageAsync(V1AppPackage body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("app-packages");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1AppPackage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an app-package
        /// </summary>
        /// <remarks>
        /// Method deletes an app-package **AND all authorizations** which belong to the apk (app/tenant combination).
        /// <br/>This method can only be used by users with high privileged roles.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiReturnMessage> PermissionService_DeleteAppPackageAsync(string id)
        {
            return PermissionService_DeleteAppPackageAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an app-package
        /// </summary>
        /// <remarks>
        /// Method deletes an app-package **AND all authorizations** which belong to the apk (app/tenant combination).
        /// <br/>This method can only be used by users with high privileged roles.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiReturnMessage> PermissionService_DeleteAppPackageAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("app-packages/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiReturnMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update an app-package
        /// </summary>
        /// <remarks>
        /// The method validates the input and ensures uniqueness by app/tenant/delegation(once the ids for app, tenant and delegation are set on an app-package, they can't be changed).
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>***
        /// <br/>
        /// <br/>**lifecycle**: Input will be ignored, app-package is always in 'ACTIVE' lifecycle
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1AppPackage> PermissionService_UpdateAppPackageAsync(string id, V1AppPackage body)
        {
            return PermissionService_UpdateAppPackageAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an app-package
        /// </summary>
        /// <remarks>
        /// The method validates the input and ensures uniqueness by app/tenant/delegation(once the ids for app, tenant and delegation are set on an app-package, they can't be changed).
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>***
        /// <br/>
        /// <br/>**lifecycle**: Input will be ignored, app-package is always in 'ACTIVE' lifecycle
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1AppPackage> PermissionService_UpdateAppPackageAsync(string id, V1AppPackage body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("app-packages/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1AppPackage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns authorizations by app (no full-load)
        /// </summary>
        /// <remarks>
        /// Method returns all authorizations for the specified app.
        /// <br/>
        /// <br/>**No full-load**
        /// <br/>The *application* and *tenant* objects are not getting full-loaded, just the ids will be returned.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetAppAuthorizationsAsync(string id)
        {
            return PermissionService_GetAppAuthorizationsAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns authorizations by app (no full-load)
        /// </summary>
        /// <remarks>
        /// Method returns all authorizations for the specified app.
        /// <br/>
        /// <br/>**No full-load**
        /// <br/>The *application* and *tenant* objects are not getting full-loaded, just the ids will be returned.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetAppAuthorizationsAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("application/{id}/authorizations");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Authorizations>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns all apps
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Applications> PermissionService_GetApplicationsAsync(bool? includeDeleted)
        {
            return PermissionService_GetApplicationsAsync(includeDeleted, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns all apps
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Applications> PermissionService_GetApplicationsAsync(bool? includeDeleted, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("applications?");
            if (includeDeleted != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeDeleted") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeDeleted, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Applications>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create an app
        /// </summary>
        /// <remarks>
        /// Method validates the input and creates an application.
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>***
        /// <br/>
        /// <br/>**shortcut**: Field has to be unique accross the system
        /// <br/>**lifecycle** (base app-object): Input will be ignored, app is always created with 'ACTIVE' lifecycle
        /// <br/>**appExt.openMode**: The open-mode must exists with the id (open-mode is not getting created in this call)
        /// <br/>**appExt.redirect_uris**: Can also be managed via separate endpoints
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Application> PermissionService_CreateApplicationAsync(V1Application body)
        {
            return PermissionService_CreateApplicationAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create an app
        /// </summary>
        /// <remarks>
        /// Method validates the input and creates an application.
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>***
        /// <br/>
        /// <br/>**shortcut**: Field has to be unique accross the system
        /// <br/>**lifecycle** (base app-object): Input will be ignored, app is always created with 'ACTIVE' lifecycle
        /// <br/>**appExt.openMode**: The open-mode must exists with the id (open-mode is not getting created in this call)
        /// <br/>**appExt.redirect_uris**: Can also be managed via separate endpoints
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Application> PermissionService_CreateApplicationAsync(V1Application body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("applications");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Application>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns single app by name
        /// </summary>
        /// <remarks>
        /// Method returns an app or a 404 if it doesn't exist.
        /// <br/>
        /// <br/>The app *name* is **NOT unique** across the entire system. Method returns an error *multipleAppsFound* if multiple apps with the same name exists.
        /// <br/>However, it is generally allowed to have several apps with the same name.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Application> PermissionService_GetApplicationByNameAsync(string filter, bool? includeDeleted)
        {
            return PermissionService_GetApplicationByNameAsync(filter, includeDeleted, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns single app by name
        /// </summary>
        /// <remarks>
        /// Method returns an app or a 404 if it doesn't exist.
        /// <br/>
        /// <br/>The app *name* is **NOT unique** across the entire system. Method returns an error *multipleAppsFound* if multiple apps with the same name exists.
        /// <br/>However, it is generally allowed to have several apps with the same name.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Application> PermissionService_GetApplicationByNameAsync(string filter, bool? includeDeleted, System.Threading.CancellationToken cancellationToken)
        {
            if (filter == null)
                throw new System.ArgumentNullException("filter");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("applications/name/{filter}?");
            urlBuilder_.Replace("{filter}", System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeDeleted != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeDeleted") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeDeleted, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Application>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns single app by shortcut
        /// </summary>
        /// <remarks>
        /// Method returns an app or a 404 if it doesn't exist.
        /// <br/>The app *shortcut* is unique across the entire system.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Application> PermissionService_GetApplicationByShortcutAsync(string filter, bool? includeDeleted)
        {
            return PermissionService_GetApplicationByShortcutAsync(filter, includeDeleted, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns single app by shortcut
        /// </summary>
        /// <remarks>
        /// Method returns an app or a 404 if it doesn't exist.
        /// <br/>The app *shortcut* is unique across the entire system.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Application> PermissionService_GetApplicationByShortcutAsync(string filter, bool? includeDeleted, System.Threading.CancellationToken cancellationToken)
        {
            if (filter == null)
                throw new System.ArgumentNullException("filter");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("applications/shortcut/{filter}?");
            urlBuilder_.Replace("{filter}", System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeDeleted != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeDeleted") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeDeleted, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Application>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add a redirect-uri to an app
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiURLs> PermissionService_AddAppRedirectURIsAsync(string app_id, V1AppURI body)
        {
            return PermissionService_AddAppRedirectURIsAsync(app_id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a redirect-uri to an app
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiURLs> PermissionService_AddAppRedirectURIsAsync(string app_id, V1AppURI body, System.Threading.CancellationToken cancellationToken)
        {
            if (app_id == null)
                throw new System.ArgumentNullException("app_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("applications/{app_id}/redirectURIs");
            urlBuilder_.Replace("{app_id}", System.Uri.EscapeDataString(ConvertToString(app_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiURLs>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a specific redirect-uri from an app
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> PermissionService_DeleteAppRedirectURIAsync(string app_id, string uri)
        {
            return PermissionService_DeleteAppRedirectURIAsync(app_id, uri, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a specific redirect-uri from an app
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> PermissionService_DeleteAppRedirectURIAsync(string app_id, string uri, System.Threading.CancellationToken cancellationToken)
        {
            if (app_id == null)
                throw new System.ArgumentNullException("app_id");

            if (uri == null)
                throw new System.ArgumentNullException("uri");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("applications/{app_id}/redirectURIs/{uri}");
            urlBuilder_.Replace("{app_id}", System.Uri.EscapeDataString(ConvertToString(app_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{uri}", System.Uri.EscapeDataString(ConvertToString(uri, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns app-packages by tenant and app
        /// </summary>
        /// <remarks>
        /// Method returns all app-packages for speficied app and tenant.
        /// <br/>
        /// <br/>**idOne**: ID (PK) of the tenant
        /// <br/>**idTwo**: ID (PK) of the app
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1AppPackages> PermissionService_GetAppPackagesByTenantAndApp2Async(string idTwo, string idOne)
        {
            return PermissionService_GetAppPackagesByTenantAndApp2Async(idTwo, idOne, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns app-packages by tenant and app
        /// </summary>
        /// <remarks>
        /// Method returns all app-packages for speficied app and tenant.
        /// <br/>
        /// <br/>**idOne**: ID (PK) of the tenant
        /// <br/>**idTwo**: ID (PK) of the app
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1AppPackages> PermissionService_GetAppPackagesByTenantAndApp2Async(string idTwo, string idOne, System.Threading.CancellationToken cancellationToken)
        {
            if (idTwo == null)
                throw new System.ArgumentNullException("idTwo");

            if (idOne == null)
                throw new System.ArgumentNullException("idOne");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("applications/{idTwo}/tenants/{idOne}/app-packages");
            urlBuilder_.Replace("{idTwo}", System.Uri.EscapeDataString(ConvertToString(idTwo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idOne}", System.Uri.EscapeDataString(ConvertToString(idOne, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1AppPackages>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns 'options' from app-packages by tenant and app
        /// </summary>
        /// <remarks>
        /// Method returns all options (as labels) from all app-packages for the given tenant and app. Options in AppPackages for which the given tenant is the delegation, are not returned.
        /// <br/>An option is a label on an app-package with the key 'option'.
        /// <br/>
        /// <br/>**idOne**: ID (PK) of the tenant
        /// <br/>**idTwo**: ID (PK) of the app
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiLabels> PermissionService_GetOptionsByTenantAndApp2Async(string idTwo, string idOne)
        {
            return PermissionService_GetOptionsByTenantAndApp2Async(idTwo, idOne, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns 'options' from app-packages by tenant and app
        /// </summary>
        /// <remarks>
        /// Method returns all options (as labels) from all app-packages for the given tenant and app. Options in AppPackages for which the given tenant is the delegation, are not returned.
        /// <br/>An option is a label on an app-package with the key 'option'.
        /// <br/>
        /// <br/>**idOne**: ID (PK) of the tenant
        /// <br/>**idTwo**: ID (PK) of the app
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiLabels> PermissionService_GetOptionsByTenantAndApp2Async(string idTwo, string idOne, System.Threading.CancellationToken cancellationToken)
        {
            if (idTwo == null)
                throw new System.ArgumentNullException("idTwo");

            if (idOne == null)
                throw new System.ArgumentNullException("idOne");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("applications/{idTwo}/tenants/{idOne}/options");
            urlBuilder_.Replace("{idTwo}", System.Uri.EscapeDataString(ConvertToString(idTwo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idOne}", System.Uri.EscapeDataString(ConvertToString(idOne, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiLabels>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns tenants by user and app
        /// </summary>
        /// <remarks>
        /// Method returns all tenants for which the specified user has an authorization for the specified app.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the app
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Tenants> PermissionService_GetTenantsByUserAndApplicationAsync(string idTwo, string idOne)
        {
            return PermissionService_GetTenantsByUserAndApplicationAsync(idTwo, idOne, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns tenants by user and app
        /// </summary>
        /// <remarks>
        /// Method returns all tenants for which the specified user has an authorization for the specified app.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the app
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Tenants> PermissionService_GetTenantsByUserAndApplicationAsync(string idTwo, string idOne, System.Threading.CancellationToken cancellationToken)
        {
            if (idTwo == null)
                throw new System.ArgumentNullException("idTwo");

            if (idOne == null)
                throw new System.ArgumentNullException("idOne");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("applications/{idTwo}/users/{idOne}/tenants");
            urlBuilder_.Replace("{idTwo}", System.Uri.EscapeDataString(ConvertToString(idTwo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idOne}", System.Uri.EscapeDataString(ConvertToString(idOne, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Tenants>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns single app by ID (PK)
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Application> PermissionService_GetApplicationByIdAsync(string id, bool? includeDeleted)
        {
            return PermissionService_GetApplicationByIdAsync(id, includeDeleted, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns single app by ID (PK)
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Application> PermissionService_GetApplicationByIdAsync(string id, bool? includeDeleted, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("applications/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeDeleted != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeDeleted") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeDeleted, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Application>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an app
        /// </summary>
        /// <remarks>
        /// Method deletes the app and app-extension. If **soft-delete** is activated, the app will first be marked as deleted for a few days (depending on the config).
        /// <br/>This method can only be used by users with high privileged roles.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiReturnMessage> PermissionService_DeleteApplicationAsync(string id)
        {
            return PermissionService_DeleteApplicationAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an app
        /// </summary>
        /// <remarks>
        /// Method deletes the app and app-extension. If **soft-delete** is activated, the app will first be marked as deleted for a few days (depending on the config).
        /// <br/>This method can only be used by users with high privileged roles.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiReturnMessage> PermissionService_DeleteApplicationAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("applications/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiReturnMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update an app
        /// </summary>
        /// <remarks>
        /// The method validates the input and ensures application/ext uniqueness by app-shortcut and existing IDs (once an app-extension-id is set on an app, it can't be changed).
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>***
        /// <br/>
        /// <br/>**lifecycle** (base app-object): Input will be ignored, app is always in 'ACTIVE' lifecycle (unless it is deleted via the explicit endpoint)
        /// <br/>**appExt.redirect_uris**: Can also be managed via separate endpoints
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Application> PermissionService_UpdateApplicationAsync(string id, V1Application body)
        {
            return PermissionService_UpdateApplicationAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an app
        /// </summary>
        /// <remarks>
        /// The method validates the input and ensures application/ext uniqueness by app-shortcut and existing IDs (once an app-extension-id is set on an app, it can't be changed).
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>***
        /// <br/>
        /// <br/>**lifecycle** (base app-object): Input will be ignored, app is always in 'ACTIVE' lifecycle (unless it is deleted via the explicit endpoint)
        /// <br/>**appExt.redirect_uris**: Can also be managed via separate endpoints
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Application> PermissionService_UpdateApplicationAsync(string id, V1Application body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("applications/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Application>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns app-packages by app
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1AppPackages> PermissionService_GetAppPackagesByAppAsync(string id)
        {
            return PermissionService_GetAppPackagesByAppAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns app-packages by app
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1AppPackages> PermissionService_GetAppPackagesByAppAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("applications/{id}/app-packages");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1AppPackages>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns labels from an app by ID (PK)
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiLabels> PermissionService_GetApplicationLabelsAsync(string id)
        {
            return PermissionService_GetApplicationLabelsAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns labels from an app by ID (PK)
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiLabels> PermissionService_GetApplicationLabelsAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("applications/{id}/labels");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiLabels>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns redirect-uris from an app
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiURLs> PermissionService_GetAppRedirectURIsAsync(string id)
        {
            return PermissionService_GetAppRedirectURIsAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns redirect-uris from an app
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiURLs> PermissionService_GetAppRedirectURIsAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("applications/{id}/redirectURIs");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiURLs>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns tenants by app
        /// </summary>
        /// <remarks>
        /// Method returns all tenants which have an app-package for the specified app.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Tenants> PermissionService_GetTenantsByApplicationAsync(string id)
        {
            return PermissionService_GetTenantsByApplicationAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns tenants by app
        /// </summary>
        /// <remarks>
        /// Method returns all tenants which have an app-package for the specified app.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Tenants> PermissionService_GetTenantsByApplicationAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("applications/{id}/tenants");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Tenants>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns users by app and tenant
        /// </summary>
        /// <remarks>
        /// Method returns users for specified app and tenant.
        /// <br/>
        /// <br/>**idOne**: ID (PK) of the app
        /// <br/>**idTwo**: ID (PK) of the tenant
        /// <br/>
        /// <br/>**Define app with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-app' can be set with the app shortcut.
        /// <br/>
        /// <br/>**Define tenant with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Users> PermissionService_GetUsersByAppAndTenantAsync(string idOne, string idTwo)
        {
            return PermissionService_GetUsersByAppAndTenantAsync(idOne, idTwo, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns users by app and tenant
        /// </summary>
        /// <remarks>
        /// Method returns users for specified app and tenant.
        /// <br/>
        /// <br/>**idOne**: ID (PK) of the app
        /// <br/>**idTwo**: ID (PK) of the tenant
        /// <br/>
        /// <br/>**Define app with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-app' can be set with the app shortcut.
        /// <br/>
        /// <br/>**Define tenant with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Users> PermissionService_GetUsersByAppAndTenantAsync(string idOne, string idTwo, System.Threading.CancellationToken cancellationToken)
        {
            if (idOne == null)
                throw new System.ArgumentNullException("idOne");

            if (idTwo == null)
                throw new System.ArgumentNullException("idTwo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("apps/{idOne}/tenants/{idTwo}/users");
            urlBuilder_.Replace("{idOne}", System.Uri.EscapeDataString(ConvertToString(idOne, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idTwo}", System.Uri.EscapeDataString(ConvertToString(idTwo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Users>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns users by tenant and app (including delegation, with optional filter, returns display-users only)
        /// </summary>
        /// <remarks>
        /// Method returns users by app and tenant, including implicit authorizations from delegation.
        /// <br/>
        /// <br/>**Display-user only**
        /// <br/>Method returns just a subset of the user (called display-user), instead of the full object.
        /// <br/>**Define app with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-app' can be set with the app shortcut.
        /// <br/>
        /// <br/>**Define tenant with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1DisplayUsers> PermissionService_GetUsersByTenantAndAppdelegation2Async(string idOne, string idTwo, string userFilter_loginid, string userFilter_firstname, string userFilter_lastname, string userFilter_servicename, string userFilter_type, string userFilter_username, bool? userFilter_includeDeleted, System.DateTimeOffset? userFilter_lastModified, System.Collections.Generic.IEnumerable<Anonymous> userFilter_lifecycles, string userFilter_origin, string userFilter_email, System.Collections.Generic.IEnumerable<string> userFilter_loginids, string userFilter_externalid)
        {
            return PermissionService_GetUsersByTenantAndAppdelegation2Async(idOne, idTwo, userFilter_loginid, userFilter_firstname, userFilter_lastname, userFilter_servicename, userFilter_type, userFilter_username, userFilter_includeDeleted, userFilter_lastModified, userFilter_lifecycles, userFilter_origin, userFilter_email, userFilter_loginids, userFilter_externalid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns users by tenant and app (including delegation, with optional filter, returns display-users only)
        /// </summary>
        /// <remarks>
        /// Method returns users by app and tenant, including implicit authorizations from delegation.
        /// <br/>
        /// <br/>**Display-user only**
        /// <br/>Method returns just a subset of the user (called display-user), instead of the full object.
        /// <br/>**Define app with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-app' can be set with the app shortcut.
        /// <br/>
        /// <br/>**Define tenant with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1DisplayUsers> PermissionService_GetUsersByTenantAndAppdelegation2Async(string idOne, string idTwo, string userFilter_loginid, string userFilter_firstname, string userFilter_lastname, string userFilter_servicename, string userFilter_type, string userFilter_username, bool? userFilter_includeDeleted, System.DateTimeOffset? userFilter_lastModified, System.Collections.Generic.IEnumerable<Anonymous> userFilter_lifecycles, string userFilter_origin, string userFilter_email, System.Collections.Generic.IEnumerable<string> userFilter_loginids, string userFilter_externalid, System.Threading.CancellationToken cancellationToken)
        {
            if (idOne == null)
                throw new System.ArgumentNullException("idOne");

            if (idTwo == null)
                throw new System.ArgumentNullException("idTwo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("apps/{idOne}/tenants/{idTwo}/users/appdelegations?");
            urlBuilder_.Replace("{idOne}", System.Uri.EscapeDataString(ConvertToString(idOne, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idTwo}", System.Uri.EscapeDataString(ConvertToString(idTwo, System.Globalization.CultureInfo.InvariantCulture)));
            if (userFilter_loginid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.loginid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_loginid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_firstname != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.firstname") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_firstname, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_lastname != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.lastname") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_lastname, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_servicename != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.servicename") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_servicename, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_username != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.username") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_username, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_includeDeleted != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.includeDeleted") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_includeDeleted, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_lastModified != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.lastModified") + "=").Append(System.Uri.EscapeDataString(userFilter_lastModified.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_lifecycles != null)
            {
                foreach (var item_ in userFilter_lifecycles) { urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.lifecycles") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (userFilter_origin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.origin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_origin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_email != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_loginids != null)
            {
                foreach (var item_ in userFilter_loginids) { urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.loginids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (userFilter_externalid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.externalid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_externalid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1DisplayUsers>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns authorizations by user and app
        /// </summary>
        /// <remarks>
        /// Method returns authorizations for specified user and app.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the app
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetAuthorizationsByUserAndApplicationAsync(string idTwo, string idOne)
        {
            return PermissionService_GetAuthorizationsByUserAndApplicationAsync(idTwo, idOne, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns authorizations by user and app
        /// </summary>
        /// <remarks>
        /// Method returns authorizations for specified user and app.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the app
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetAuthorizationsByUserAndApplicationAsync(string idTwo, string idOne, System.Threading.CancellationToken cancellationToken)
        {
            if (idTwo == null)
                throw new System.ArgumentNullException("idTwo");

            if (idOne == null)
                throw new System.ArgumentNullException("idOne");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("apps/{idTwo}/users/{idOne}/authorizations");
            urlBuilder_.Replace("{idTwo}", System.Uri.EscapeDataString(ConvertToString(idTwo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idOne}", System.Uri.EscapeDataString(ConvertToString(idOne, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Authorizations>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns users by app
        /// </summary>
        /// <remarks>
        /// Method returns users which have an authorization for the specified app.
        /// <br/>
        /// <br/>**Define app with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-app' can be set with the app shortcut.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Users> PermissionService_GetUsersByAppAsync(string id)
        {
            return PermissionService_GetUsersByAppAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns users by app
        /// </summary>
        /// <remarks>
        /// Method returns users which have an authorization for the specified app.
        /// <br/>
        /// <br/>**Define app with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-app' can be set with the app shortcut.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Users> PermissionService_GetUsersByAppAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("apps/{id}/users");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Users>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns authorized users based on filters
        /// </summary>
        /// <remarks>
        /// Method returns users which have an authorization with specified filter.
        /// <br/>
        /// <br/>**Define app with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-app' can be set with the app shortcut.
        /// <br/>
        /// <br/>**Define tenant with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Users> PermissionService_SearchAuthorizedUsersAsync(V1AuthorizedUserFilter body)
        {
            return PermissionService_SearchAuthorizedUsersAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns authorized users based on filters
        /// </summary>
        /// <remarks>
        /// Method returns users which have an authorization with specified filter.
        /// <br/>
        /// <br/>**Define app with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-app' can be set with the app shortcut.
        /// <br/>
        /// <br/>**Define tenant with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Users> PermissionService_SearchAuthorizedUsersAsync(V1AuthorizedUserFilter body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("authorizedusers");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Users>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiReturnMessage> PermissionService_HealthzAsync()
        {
            return PermissionService_HealthzAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiReturnMessage> PermissionService_HealthzAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("healthz");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiReturnMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns all available open-modes
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1OpenModes> PermissionService_GetOpenModesAsync(bool? includeDeleted)
        {
            return PermissionService_GetOpenModesAsync(includeDeleted, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns all available open-modes
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1OpenModes> PermissionService_GetOpenModesAsync(bool? includeDeleted, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("openmodes?");
            if (includeDeleted != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeDeleted") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeDeleted, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1OpenModes>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Creates an open-mode
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual System.Threading.Tasks.Task<V1OpenMode> PermissionService_CreateOpenModeAsync(V1OpenMode body)
        {
            return PermissionService_CreateOpenModeAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates an open-mode
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task<V1OpenMode> PermissionService_CreateOpenModeAsync(V1OpenMode body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("openmodes");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1OpenMode>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns open-mode by ID (PK)
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1OpenMode> PermissionService_GetOpenModeByIdAsync(string id, bool? includeDeleted)
        {
            return PermissionService_GetOpenModeByIdAsync(id, includeDeleted, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns open-mode by ID (PK)
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1OpenMode> PermissionService_GetOpenModeByIdAsync(string id, bool? includeDeleted, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("openmodes/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeDeleted != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeDeleted") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeDeleted, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1OpenMode>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an open-mode
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual System.Threading.Tasks.Task<ApiReturnMessage> PermissionService_DeleteOpenModeAsync(string id)
        {
            return PermissionService_DeleteOpenModeAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an open-mode
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task<ApiReturnMessage> PermissionService_DeleteOpenModeAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("openmodes/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiReturnMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update an open-mode
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual System.Threading.Tasks.Task<V1OpenMode> PermissionService_UpdateOpenModeAsync(string id, V1OpenMode body)
        {
            return PermissionService_UpdateOpenModeAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an open-mode
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task<V1OpenMode> PermissionService_UpdateOpenModeAsync(string id, V1OpenMode body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("openmodes/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1OpenMode>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiReturnMessage> PermissionService_ReadyAsync()
        {
            return PermissionService_ReadyAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiReturnMessage> PermissionService_ReadyAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("ready");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiReturnMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns apps by user and tenant
        /// </summary>
        /// <remarks>
        /// Method returns all applications for which the specified user has an authorization for the specified tenant.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the tenant
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Applications> PermissionService_GetApplicationsByUserAndTenantAsync(string idTwo, string idOne)
        {
            return PermissionService_GetApplicationsByUserAndTenantAsync(idTwo, idOne, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns apps by user and tenant
        /// </summary>
        /// <remarks>
        /// Method returns all applications for which the specified user has an authorization for the specified tenant.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the tenant
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Applications> PermissionService_GetApplicationsByUserAndTenantAsync(string idTwo, string idOne, System.Threading.CancellationToken cancellationToken)
        {
            if (idTwo == null)
                throw new System.ArgumentNullException("idTwo");

            if (idOne == null)
                throw new System.ArgumentNullException("idOne");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenant/{idTwo}/users/{idOne}/applications");
            urlBuilder_.Replace("{idTwo}", System.Uri.EscapeDataString(ConvertToString(idTwo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idOne}", System.Uri.EscapeDataString(ConvertToString(idOne, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Applications>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns authorizations by user and tenant
        /// </summary>
        /// <remarks>
        /// Method returns authorizations for specified user and tenant.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the tenant
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetAuthorizationsByUserAndTenantAsync(string idTwo, string idOne)
        {
            return PermissionService_GetAuthorizationsByUserAndTenantAsync(idTwo, idOne, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns authorizations by user and tenant
        /// </summary>
        /// <remarks>
        /// Method returns authorizations for specified user and tenant.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the tenant
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetAuthorizationsByUserAndTenantAsync(string idTwo, string idOne, System.Threading.CancellationToken cancellationToken)
        {
            if (idTwo == null)
                throw new System.ArgumentNullException("idTwo");

            if (idOne == null)
                throw new System.ArgumentNullException("idOne");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenant/{idTwo}/users/{idOne}/authorizations");
            urlBuilder_.Replace("{idTwo}", System.Uri.EscapeDataString(ConvertToString(idTwo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idOne}", System.Uri.EscapeDataString(ConvertToString(idOne, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Authorizations>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns authorizations for user and tenant (with delegation)
        /// </summary>
        /// <remarks>
        /// Method returns authorizations for specified user and tenant (including implicit ones from delegation).
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the tenant
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetAuthorizationsByUserAndTenantAndDelegationAsync(string idTwo, string idOne)
        {
            return PermissionService_GetAuthorizationsByUserAndTenantAndDelegationAsync(idTwo, idOne, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns authorizations for user and tenant (with delegation)
        /// </summary>
        /// <remarks>
        /// Method returns authorizations for specified user and tenant (including implicit ones from delegation).
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the tenant
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetAuthorizationsByUserAndTenantAndDelegationAsync(string idTwo, string idOne, System.Threading.CancellationToken cancellationToken)
        {
            if (idTwo == null)
                throw new System.ArgumentNullException("idTwo");

            if (idOne == null)
                throw new System.ArgumentNullException("idOne");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenant/{idTwo}/users/{idOne}/authorizations/delegation");
            urlBuilder_.Replace("{idTwo}", System.Uri.EscapeDataString(ConvertToString(idTwo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idOne}", System.Uri.EscapeDataString(ConvertToString(idOne, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Authorizations>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns tenants (with optional filters)
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Tenants> PermissionService_GetTenantsAsync(bool? includeDeleted, string origin, string mappingId_key, string mappingId_value, System.DateTimeOffset? lastModified, System.Collections.Generic.IEnumerable<Anonymous2> lifecycles, string tenantId, string name, string bfs, string name_contains)
        {
            return PermissionService_GetTenantsAsync(includeDeleted, origin, mappingId_key, mappingId_value, lastModified, lifecycles, tenantId, name, bfs, name_contains, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns tenants (with optional filters)
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Tenants> PermissionService_GetTenantsAsync(bool? includeDeleted, string origin, string mappingId_key, string mappingId_value, System.DateTimeOffset? lastModified, System.Collections.Generic.IEnumerable<Anonymous2> lifecycles, string tenantId, string name, string bfs, string name_contains, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants?");
            if (includeDeleted != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeDeleted") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeDeleted, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (origin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("origin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(origin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mappingId_key != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mappingId.key") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mappingId_key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mappingId_value != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mappingId.value") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mappingId_value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModified != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModified") + "=").Append(System.Uri.EscapeDataString(lastModified.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lifecycles != null)
            {
                foreach (var item_ in lifecycles) { urlBuilder_.Append(System.Uri.EscapeDataString("lifecycles") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (tenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bfs != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bfs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bfs, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (name_contains != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("name_contains") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name_contains, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Tenants>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a tenant
        /// </summary>
        /// <remarks>
        /// Method validates the input and creates a tenant.
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>***
        /// <br/>
        /// <br/>**TenantId** (not PK) and **name**: Fields have to be unique accross the system
        /// <br/>**lifecycle** (base tenant-object): Input will be ignored, tenant is always created with 'ACTIVE' lifecycle
        /// <br/>**tenantExt.origin**: If no value is provided, method adds 'SecureConnect' as default
        /// <br/>***
        /// <br/>
        /// <br/>Method will add some default App-Packages to the tenant in a background-task (AdminPanel, myAccount, SECURE Access).
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Tenant> PermissionService_CreateTenantAsync(V1Tenant body)
        {
            return PermissionService_CreateTenantAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a tenant
        /// </summary>
        /// <remarks>
        /// Method validates the input and creates a tenant.
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>***
        /// <br/>
        /// <br/>**TenantId** (not PK) and **name**: Fields have to be unique accross the system
        /// <br/>**lifecycle** (base tenant-object): Input will be ignored, tenant is always created with 'ACTIVE' lifecycle
        /// <br/>**tenantExt.origin**: If no value is provided, method adds 'SecureConnect' as default
        /// <br/>***
        /// <br/>
        /// <br/>Method will add some default App-Packages to the tenant in a background-task (AdminPanel, myAccount, SECURE Access).
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Tenant> PermissionService_CreateTenantAsync(V1Tenant body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Tenant>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns tenants by label-filter
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Tenants> PermissionService_GetTenantsByLabelsAsync(V1LabelsFilter body)
        {
            return PermissionService_GetTenantsByLabelsAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns tenants by label-filter
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Tenants> PermissionService_GetTenantsByLabelsAsync(V1LabelsFilter body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/labelsfilter");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Tenants>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns single tenant by TenantId (not PK)
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Tenant> PermissionService_GetTenantByTenantIdAsync(string tenantId, bool? includeDeleted)
        {
            return PermissionService_GetTenantByTenantIdAsync(tenantId, includeDeleted, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns single tenant by TenantId (not PK)
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Tenant> PermissionService_GetTenantByTenantIdAsync(string tenantId, bool? includeDeleted, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/tenantid/{tenantId}?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeDeleted != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeDeleted") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeDeleted, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Tenant>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns single address assigned to a tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual System.Threading.Tasks.Task<ApiAddress> PermissionService_GetTenantAddressAsync(string idOne, string idTwo)
        {
            return PermissionService_GetTenantAddressAsync(idOne, idTwo, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns single address assigned to a tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task<ApiAddress> PermissionService_GetTenantAddressAsync(string idOne, string idTwo, System.Threading.CancellationToken cancellationToken)
        {
            if (idOne == null)
                throw new System.ArgumentNullException("idOne");

            if (idTwo == null)
                throw new System.ArgumentNullException("idTwo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{idOne}/addresses/{idTwo}");
            urlBuilder_.Replace("{idOne}", System.Uri.EscapeDataString(ConvertToString(idOne, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idTwo}", System.Uri.EscapeDataString(ConvertToString(idTwo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiAddress>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete address from tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual System.Threading.Tasks.Task<object> PermissionService_DeleteTenantAddressAsync(string idOne, string idTwo)
        {
            return PermissionService_DeleteTenantAddressAsync(idOne, idTwo, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete address from tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task<object> PermissionService_DeleteTenantAddressAsync(string idOne, string idTwo, System.Threading.CancellationToken cancellationToken)
        {
            if (idOne == null)
                throw new System.ArgumentNullException("idOne");

            if (idTwo == null)
                throw new System.ArgumentNullException("idTwo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{idOne}/addresses/{idTwo}");
            urlBuilder_.Replace("{idOne}", System.Uri.EscapeDataString(ConvertToString(idOne, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idTwo}", System.Uri.EscapeDataString(ConvertToString(idTwo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns app-packages by tenant and app
        /// </summary>
        /// <remarks>
        /// Method returns all app-packages for speficied app and tenant.
        /// <br/>
        /// <br/>**idOne**: ID (PK) of the tenant
        /// <br/>**idTwo**: ID (PK) of the app
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1AppPackages> PermissionService_GetAppPackagesByTenantAndAppAsync(string idOne, string idTwo)
        {
            return PermissionService_GetAppPackagesByTenantAndAppAsync(idOne, idTwo, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns app-packages by tenant and app
        /// </summary>
        /// <remarks>
        /// Method returns all app-packages for speficied app and tenant.
        /// <br/>
        /// <br/>**idOne**: ID (PK) of the tenant
        /// <br/>**idTwo**: ID (PK) of the app
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1AppPackages> PermissionService_GetAppPackagesByTenantAndAppAsync(string idOne, string idTwo, System.Threading.CancellationToken cancellationToken)
        {
            if (idOne == null)
                throw new System.ArgumentNullException("idOne");

            if (idTwo == null)
                throw new System.ArgumentNullException("idTwo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{idOne}/applications/{idTwo}/app-packages");
            urlBuilder_.Replace("{idOne}", System.Uri.EscapeDataString(ConvertToString(idOne, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idTwo}", System.Uri.EscapeDataString(ConvertToString(idTwo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1AppPackages>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns 'options' from app-packages by tenant and app
        /// </summary>
        /// <remarks>
        /// Method returns all options (as labels) from all app-packages for the given tenant and app. Options in AppPackages for which the given tenant is the delegation, are not returned.
        /// <br/>An option is a label on an app-package with the key 'option'.
        /// <br/>
        /// <br/>**idOne**: ID (PK) of the tenant
        /// <br/>**idTwo**: ID (PK) of the app
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiLabels> PermissionService_GetOptionsByTenantAndAppAsync(string idOne, string idTwo)
        {
            return PermissionService_GetOptionsByTenantAndAppAsync(idOne, idTwo, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns 'options' from app-packages by tenant and app
        /// </summary>
        /// <remarks>
        /// Method returns all options (as labels) from all app-packages for the given tenant and app. Options in AppPackages for which the given tenant is the delegation, are not returned.
        /// <br/>An option is a label on an app-package with the key 'option'.
        /// <br/>
        /// <br/>**idOne**: ID (PK) of the tenant
        /// <br/>**idTwo**: ID (PK) of the app
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiLabels> PermissionService_GetOptionsByTenantAndAppAsync(string idOne, string idTwo, System.Threading.CancellationToken cancellationToken)
        {
            if (idOne == null)
                throw new System.ArgumentNullException("idOne");

            if (idTwo == null)
                throw new System.ArgumentNullException("idTwo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{idOne}/applications/{idTwo}/options");
            urlBuilder_.Replace("{idOne}", System.Uri.EscapeDataString(ConvertToString(idOne, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idTwo}", System.Uri.EscapeDataString(ConvertToString(idTwo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiLabels>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns possible apps for tenant and delegation
        /// </summary>
        /// <remarks>
        /// Method returns all apps for which the given tenant has no app-package yet , including app-packages with tenant-delegation set (idTwo).
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Applications> PermissionService_GetPossibleAppsByDelegationAsync(string idOne, string idTwo)
        {
            return PermissionService_GetPossibleAppsByDelegationAsync(idOne, idTwo, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns possible apps for tenant and delegation
        /// </summary>
        /// <remarks>
        /// Method returns all apps for which the given tenant has no app-package yet , including app-packages with tenant-delegation set (idTwo).
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Applications> PermissionService_GetPossibleAppsByDelegationAsync(string idOne, string idTwo, System.Threading.CancellationToken cancellationToken)
        {
            if (idOne == null)
                throw new System.ArgumentNullException("idOne");

            if (idTwo == null)
                throw new System.ArgumentNullException("idTwo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{idOne}/delegations/{idTwo}/possibleApps");
            urlBuilder_.Replace("{idOne}", System.Uri.EscapeDataString(ConvertToString(idOne, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idTwo}", System.Uri.EscapeDataString(ConvertToString(idTwo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Applications>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns single e-mail assigned to a tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual System.Threading.Tasks.Task<CommonapiEmail> PermissionService_GetTenantEmailAsync(string idOne, string idTwo)
        {
            return PermissionService_GetTenantEmailAsync(idOne, idTwo, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns single e-mail assigned to a tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task<CommonapiEmail> PermissionService_GetTenantEmailAsync(string idOne, string idTwo, System.Threading.CancellationToken cancellationToken)
        {
            if (idOne == null)
                throw new System.ArgumentNullException("idOne");

            if (idTwo == null)
                throw new System.ArgumentNullException("idTwo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{idOne}/emails/{idTwo}");
            urlBuilder_.Replace("{idOne}", System.Uri.EscapeDataString(ConvertToString(idOne, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idTwo}", System.Uri.EscapeDataString(ConvertToString(idTwo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CommonapiEmail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete e-mail from tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual System.Threading.Tasks.Task<object> PermissionService_DeleteTenantEmailAsync(string idOne, string idTwo)
        {
            return PermissionService_DeleteTenantEmailAsync(idOne, idTwo, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete e-mail from tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task<object> PermissionService_DeleteTenantEmailAsync(string idOne, string idTwo, System.Threading.CancellationToken cancellationToken)
        {
            if (idOne == null)
                throw new System.ArgumentNullException("idOne");

            if (idTwo == null)
                throw new System.ArgumentNullException("idTwo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{idOne}/emails/{idTwo}");
            urlBuilder_.Replace("{idOne}", System.Uri.EscapeDataString(ConvertToString(idOne, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idTwo}", System.Uri.EscapeDataString(ConvertToString(idTwo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns single phone assigned to a tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual System.Threading.Tasks.Task<CommonapiPhoneNumber> PermissionService_GetTenantPhoneAsync(string idOne, string idTwo)
        {
            return PermissionService_GetTenantPhoneAsync(idOne, idTwo, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns single phone assigned to a tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task<CommonapiPhoneNumber> PermissionService_GetTenantPhoneAsync(string idOne, string idTwo, System.Threading.CancellationToken cancellationToken)
        {
            if (idOne == null)
                throw new System.ArgumentNullException("idOne");

            if (idTwo == null)
                throw new System.ArgumentNullException("idTwo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{idOne}/phones/{idTwo}");
            urlBuilder_.Replace("{idOne}", System.Uri.EscapeDataString(ConvertToString(idOne, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idTwo}", System.Uri.EscapeDataString(ConvertToString(idTwo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CommonapiPhoneNumber>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete phone from tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual System.Threading.Tasks.Task<object> PermissionService_DeleteTenantPhoneAsync(string idOne, string idTwo)
        {
            return PermissionService_DeleteTenantPhoneAsync(idOne, idTwo, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete phone from tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task<object> PermissionService_DeleteTenantPhoneAsync(string idOne, string idTwo, System.Threading.CancellationToken cancellationToken)
        {
            if (idOne == null)
                throw new System.ArgumentNullException("idOne");

            if (idTwo == null)
                throw new System.ArgumentNullException("idTwo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{idOne}/phones/{idTwo}");
            urlBuilder_.Replace("{idOne}", System.Uri.EscapeDataString(ConvertToString(idOne, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idTwo}", System.Uri.EscapeDataString(ConvertToString(idTwo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns users by app and tenant
        /// </summary>
        /// <remarks>
        /// Method returns users for specified app and tenant.
        /// <br/>
        /// <br/>**idOne**: ID (PK) of the app
        /// <br/>**idTwo**: ID (PK) of the tenant
        /// <br/>
        /// <br/>**Define app with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-app' can be set with the app shortcut.
        /// <br/>
        /// <br/>**Define tenant with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Users> PermissionService_GetUsersByAppAndTenant2Async(string idTwo, string idOne)
        {
            return PermissionService_GetUsersByAppAndTenant2Async(idTwo, idOne, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns users by app and tenant
        /// </summary>
        /// <remarks>
        /// Method returns users for specified app and tenant.
        /// <br/>
        /// <br/>**idOne**: ID (PK) of the app
        /// <br/>**idTwo**: ID (PK) of the tenant
        /// <br/>
        /// <br/>**Define app with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-app' can be set with the app shortcut.
        /// <br/>
        /// <br/>**Define tenant with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Users> PermissionService_GetUsersByAppAndTenant2Async(string idTwo, string idOne, System.Threading.CancellationToken cancellationToken)
        {
            if (idTwo == null)
                throw new System.ArgumentNullException("idTwo");

            if (idOne == null)
                throw new System.ArgumentNullException("idOne");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{idTwo}/apps/{idOne}/users");
            urlBuilder_.Replace("{idTwo}", System.Uri.EscapeDataString(ConvertToString(idTwo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idOne}", System.Uri.EscapeDataString(ConvertToString(idOne, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Users>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns users by tenant and app (including delegation, with optional filter, returns display-users only)
        /// </summary>
        /// <remarks>
        /// Method returns users by app and tenant, including implicit authorizations from delegation.
        /// <br/>
        /// <br/>**Display-user only**
        /// <br/>Method returns just a subset of the user (called display-user), instead of the full object.
        /// <br/>**Define app with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-app' can be set with the app shortcut.
        /// <br/>
        /// <br/>**Define tenant with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1DisplayUsers> PermissionService_GetUsersByTenantAndAppdelegationAsync(string idTwo, string idOne, string userFilter_loginid, string userFilter_firstname, string userFilter_lastname, string userFilter_servicename, string userFilter_type, string userFilter_username, bool? userFilter_includeDeleted, System.DateTimeOffset? userFilter_lastModified, System.Collections.Generic.IEnumerable<Anonymous3> userFilter_lifecycles, string userFilter_origin, string userFilter_email, System.Collections.Generic.IEnumerable<string> userFilter_loginids, string userFilter_externalid)
        {
            return PermissionService_GetUsersByTenantAndAppdelegationAsync(idTwo, idOne, userFilter_loginid, userFilter_firstname, userFilter_lastname, userFilter_servicename, userFilter_type, userFilter_username, userFilter_includeDeleted, userFilter_lastModified, userFilter_lifecycles, userFilter_origin, userFilter_email, userFilter_loginids, userFilter_externalid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns users by tenant and app (including delegation, with optional filter, returns display-users only)
        /// </summary>
        /// <remarks>
        /// Method returns users by app and tenant, including implicit authorizations from delegation.
        /// <br/>
        /// <br/>**Display-user only**
        /// <br/>Method returns just a subset of the user (called display-user), instead of the full object.
        /// <br/>**Define app with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-app' can be set with the app shortcut.
        /// <br/>
        /// <br/>**Define tenant with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1DisplayUsers> PermissionService_GetUsersByTenantAndAppdelegationAsync(string idTwo, string idOne, string userFilter_loginid, string userFilter_firstname, string userFilter_lastname, string userFilter_servicename, string userFilter_type, string userFilter_username, bool? userFilter_includeDeleted, System.DateTimeOffset? userFilter_lastModified, System.Collections.Generic.IEnumerable<Anonymous3> userFilter_lifecycles, string userFilter_origin, string userFilter_email, System.Collections.Generic.IEnumerable<string> userFilter_loginids, string userFilter_externalid, System.Threading.CancellationToken cancellationToken)
        {
            if (idTwo == null)
                throw new System.ArgumentNullException("idTwo");

            if (idOne == null)
                throw new System.ArgumentNullException("idOne");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{idTwo}/apps/{idOne}/users/appdelegations?");
            urlBuilder_.Replace("{idTwo}", System.Uri.EscapeDataString(ConvertToString(idTwo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idOne}", System.Uri.EscapeDataString(ConvertToString(idOne, System.Globalization.CultureInfo.InvariantCulture)));
            if (userFilter_loginid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.loginid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_loginid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_firstname != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.firstname") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_firstname, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_lastname != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.lastname") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_lastname, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_servicename != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.servicename") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_servicename, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_username != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.username") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_username, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_includeDeleted != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.includeDeleted") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_includeDeleted, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_lastModified != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.lastModified") + "=").Append(System.Uri.EscapeDataString(userFilter_lastModified.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_lifecycles != null)
            {
                foreach (var item_ in userFilter_lifecycles) { urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.lifecycles") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (userFilter_origin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.origin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_origin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_email != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_loginids != null)
            {
                foreach (var item_ in userFilter_loginids) { urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.loginids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (userFilter_externalid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.externalid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_externalid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1DisplayUsers>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns possible apps for user by tenant
        /// </summary>
        /// <remarks>
        /// Method returns all tenant-apps (defined by AppPackages) for which the user isn't authorized yet
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Applications> PermissionService_GetPossibleAppsByUserAndTenant2Async(string idTwo, string idOne)
        {
            return PermissionService_GetPossibleAppsByUserAndTenant2Async(idTwo, idOne, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns possible apps for user by tenant
        /// </summary>
        /// <remarks>
        /// Method returns all tenant-apps (defined by AppPackages) for which the user isn't authorized yet
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Applications> PermissionService_GetPossibleAppsByUserAndTenant2Async(string idTwo, string idOne, System.Threading.CancellationToken cancellationToken)
        {
            if (idTwo == null)
                throw new System.ArgumentNullException("idTwo");

            if (idOne == null)
                throw new System.ArgumentNullException("idOne");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{idTwo}/users/{idOne}/possibleApps");
            urlBuilder_.Replace("{idTwo}", System.Uri.EscapeDataString(ConvertToString(idTwo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idOne}", System.Uri.EscapeDataString(ConvertToString(idOne, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Applications>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns single tenant by ID (PK)
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Tenant> PermissionService_GetTenantByIdAsync(string id, bool? includeDeleted)
        {
            return PermissionService_GetTenantByIdAsync(id, includeDeleted, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns single tenant by ID (PK)
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Tenant> PermissionService_GetTenantByIdAsync(string id, bool? includeDeleted, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeDeleted != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeDeleted") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeDeleted, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Tenant>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a tenant
        /// </summary>
        /// <remarks>
        /// Method deletes the tenant and tenant-extension. If **soft-delete** is activated, the tenant will first be marked as deleted for a few days (depending on the config).
        /// <br/>This method can only be used by users with high privileged roles.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiReturnMessage> PermissionService_DeleteTenantAsync(string id)
        {
            return PermissionService_DeleteTenantAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a tenant
        /// </summary>
        /// <remarks>
        /// Method deletes the tenant and tenant-extension. If **soft-delete** is activated, the tenant will first be marked as deleted for a few days (depending on the config).
        /// <br/>This method can only be used by users with high privileged roles.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiReturnMessage> PermissionService_DeleteTenantAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiReturnMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a tenant
        /// </summary>
        /// <remarks>
        /// The method validates the input and ensures tenant/ext uniqueness by tenantid/name and existing IDs (once a tenant-extension-id is set on a tenant, it can't be changed).
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>***
        /// <br/>
        /// <br/>**lifecycle** (base tenant-object): Input will be ignored, tenant is always in 'ACTIVE' lifecycle (unless it is deleted via the explicit endpoint)
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Tenant> PermissionService_UpdateTenantAsync(string id, V1Tenant body)
        {
            return PermissionService_UpdateTenantAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a tenant
        /// </summary>
        /// <remarks>
        /// The method validates the input and ensures tenant/ext uniqueness by tenantid/name and existing IDs (once a tenant-extension-id is set on a tenant, it can't be changed).
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>***
        /// <br/>
        /// <br/>**lifecycle** (base tenant-object): Input will be ignored, tenant is always in 'ACTIVE' lifecycle (unless it is deleted via the explicit endpoint)
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Tenant> PermissionService_UpdateTenantAsync(string id, V1Tenant body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Tenant>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns addresses assigned to a tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual System.Threading.Tasks.Task<ApiAddresses> PermissionService_GetTenantAddressesAsync(string id)
        {
            return PermissionService_GetTenantAddressesAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns addresses assigned to a tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task<ApiAddresses> PermissionService_GetTenantAddressesAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{id}/addresses");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiAddresses>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns app-packages by tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1AppPackages> PermissionService_GetAppPackagesByTenantAsync(string id)
        {
            return PermissionService_GetAppPackagesByTenantAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns app-packages by tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1AppPackages> PermissionService_GetAppPackagesByTenantAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{id}/app-packages");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1AppPackages>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns apps by tenant
        /// </summary>
        /// <remarks>
        /// Method returns all applications for which the specified tenant has an app-package.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Applications> PermissionService_GetApplicationsByTenantAsync(string id)
        {
            return PermissionService_GetApplicationsByTenantAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns apps by tenant
        /// </summary>
        /// <remarks>
        /// Method returns all applications for which the specified tenant has an app-package.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Applications> PermissionService_GetApplicationsByTenantAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{id}/applications");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Applications>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns e-mails assigned to a tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual System.Threading.Tasks.Task<ApiEmails> PermissionService_GetTenantEmailsAsync(string id)
        {
            return PermissionService_GetTenantEmailsAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns e-mails assigned to a tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task<ApiEmails> PermissionService_GetTenantEmailsAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{id}/emails");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiEmails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns labels from a tenant by ID (PK)
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiLabels> PermissionService_GetTenantLabelsAsync(string id)
        {
            return PermissionService_GetTenantLabelsAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns labels from a tenant by ID (PK)
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiLabels> PermissionService_GetTenantLabelsAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{id}/labels");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiLabels>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns phones assigned to a tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual System.Threading.Tasks.Task<ApiPhoneNumbers> PermissionService_GetTenantPhonesAsync(string id)
        {
            return PermissionService_GetTenantPhonesAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns phones assigned to a tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task<ApiPhoneNumbers> PermissionService_GetTenantPhonesAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{id}/phones");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiPhoneNumbers>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns possible apps for tenant
        /// </summary>
        /// <remarks>
        /// Method returns all apps for which the given tenant has no app-package yet
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Applications> PermissionService_GetPossibleAppsByTenantAsync(string id)
        {
            return PermissionService_GetPossibleAppsByTenantAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns possible apps for tenant
        /// </summary>
        /// <remarks>
        /// Method returns all apps for which the given tenant has no app-package yet
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Applications> PermissionService_GetPossibleAppsByTenantAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{id}/possibleApps");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Applications>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add address to tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual System.Threading.Tasks.Task<ApiAddress> PermissionService_AddTenantAddressAsync(string tenantId, ApiAddress body)
        {
            return PermissionService_AddTenantAddressAsync(tenantId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add address to tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task<ApiAddress> PermissionService_AddTenantAddressAsync(string tenantId, ApiAddress body, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{tenantId}/addresses");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiAddress>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add e-mail to tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual System.Threading.Tasks.Task<CommonapiEmail> PermissionService_AddTenantEmailAsync(string tenantId, CommonapiEmail body)
        {
            return PermissionService_AddTenantEmailAsync(tenantId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add e-mail to tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task<CommonapiEmail> PermissionService_AddTenantEmailAsync(string tenantId, CommonapiEmail body, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{tenantId}/emails");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CommonapiEmail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add phone to tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual System.Threading.Tasks.Task<CommonapiPhoneNumber> PermissionService_AddTenantPhoneAsync(string tenantId, CommonapiPhoneNumber body)
        {
            return PermissionService_AddTenantPhoneAsync(tenantId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add phone to tenant
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task<CommonapiPhoneNumber> PermissionService_AddTenantPhoneAsync(string tenantId, CommonapiPhoneNumber body, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{tenantId}/phones");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CommonapiPhoneNumber>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns users by tenant (with optional filters)
        /// </summary>
        /// <remarks>
        /// Method returns users which have an authorization for the specified tenant.
        /// <br/>
        /// <br/>**Define tenant with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Users> PermissionService_GetUsersByTenantAsync(string tenantId, string userFilter_loginid, string userFilter_firstname, string userFilter_lastname, string userFilter_servicename, string userFilter_type, string userFilter_username, bool? userFilter_includeDeleted, System.DateTimeOffset? userFilter_lastModified, System.Collections.Generic.IEnumerable<Anonymous4> userFilter_lifecycles, string userFilter_origin, string userFilter_email, System.Collections.Generic.IEnumerable<string> userFilter_loginids, string userFilter_externalid)
        {
            return PermissionService_GetUsersByTenantAsync(tenantId, userFilter_loginid, userFilter_firstname, userFilter_lastname, userFilter_servicename, userFilter_type, userFilter_username, userFilter_includeDeleted, userFilter_lastModified, userFilter_lifecycles, userFilter_origin, userFilter_email, userFilter_loginids, userFilter_externalid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns users by tenant (with optional filters)
        /// </summary>
        /// <remarks>
        /// Method returns users which have an authorization for the specified tenant.
        /// <br/>
        /// <br/>**Define tenant with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Users> PermissionService_GetUsersByTenantAsync(string tenantId, string userFilter_loginid, string userFilter_firstname, string userFilter_lastname, string userFilter_servicename, string userFilter_type, string userFilter_username, bool? userFilter_includeDeleted, System.DateTimeOffset? userFilter_lastModified, System.Collections.Generic.IEnumerable<Anonymous4> userFilter_lifecycles, string userFilter_origin, string userFilter_email, System.Collections.Generic.IEnumerable<string> userFilter_loginids, string userFilter_externalid, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{tenantId}/users?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            if (userFilter_loginid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.loginid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_loginid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_firstname != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.firstname") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_firstname, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_lastname != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.lastname") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_lastname, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_servicename != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.servicename") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_servicename, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_username != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.username") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_username, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_includeDeleted != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.includeDeleted") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_includeDeleted, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_lastModified != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.lastModified") + "=").Append(System.Uri.EscapeDataString(userFilter_lastModified.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_lifecycles != null)
            {
                foreach (var item_ in userFilter_lifecycles) { urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.lifecycles") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (userFilter_origin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.origin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_origin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_email != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_loginids != null)
            {
                foreach (var item_ in userFilter_loginids) { urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.loginids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (userFilter_externalid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.externalid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_externalid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Users>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns users by tenand (including delegation, with optional filter, returns display-users only)
        /// </summary>
        /// <remarks>
        /// Method returns users tenant, including implicit authorizations from delegation.
        /// <br/>
        /// <br/>**Display-user only**
        /// <br/>Method returns just a subset of the user (called display-user), instead of the full object.
        /// <br/>**Define tenant with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1DisplayUsers> PermissionService_GetUsersByTenantAndDelegationAsync(string tenantId, string userFilter_loginid, string userFilter_firstname, string userFilter_lastname, string userFilter_servicename, string userFilter_type, string userFilter_username, bool? userFilter_includeDeleted, System.DateTimeOffset? userFilter_lastModified, System.Collections.Generic.IEnumerable<Anonymous5> userFilter_lifecycles, string userFilter_origin, string userFilter_email, System.Collections.Generic.IEnumerable<string> userFilter_loginids, string userFilter_externalid)
        {
            return PermissionService_GetUsersByTenantAndDelegationAsync(tenantId, userFilter_loginid, userFilter_firstname, userFilter_lastname, userFilter_servicename, userFilter_type, userFilter_username, userFilter_includeDeleted, userFilter_lastModified, userFilter_lifecycles, userFilter_origin, userFilter_email, userFilter_loginids, userFilter_externalid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns users by tenand (including delegation, with optional filter, returns display-users only)
        /// </summary>
        /// <remarks>
        /// Method returns users tenant, including implicit authorizations from delegation.
        /// <br/>
        /// <br/>**Display-user only**
        /// <br/>Method returns just a subset of the user (called display-user), instead of the full object.
        /// <br/>**Define tenant with header**
        /// <br/>As an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1DisplayUsers> PermissionService_GetUsersByTenantAndDelegationAsync(string tenantId, string userFilter_loginid, string userFilter_firstname, string userFilter_lastname, string userFilter_servicename, string userFilter_type, string userFilter_username, bool? userFilter_includeDeleted, System.DateTimeOffset? userFilter_lastModified, System.Collections.Generic.IEnumerable<Anonymous5> userFilter_lifecycles, string userFilter_origin, string userFilter_email, System.Collections.Generic.IEnumerable<string> userFilter_loginids, string userFilter_externalid, System.Threading.CancellationToken cancellationToken)
        {
            if (tenantId == null)
                throw new System.ArgumentNullException("tenantId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tenants/{tenantId}/users/delegations?");
            urlBuilder_.Replace("{tenantId}", System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture)));
            if (userFilter_loginid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.loginid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_loginid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_firstname != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.firstname") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_firstname, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_lastname != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.lastname") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_lastname, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_servicename != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.servicename") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_servicename, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_username != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.username") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_username, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_includeDeleted != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.includeDeleted") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_includeDeleted, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_lastModified != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.lastModified") + "=").Append(System.Uri.EscapeDataString(userFilter_lastModified.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_lifecycles != null)
            {
                foreach (var item_ in userFilter_lifecycles) { urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.lifecycles") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (userFilter_origin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.origin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_origin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_email != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userFilter_loginids != null)
            {
                foreach (var item_ in userFilter_loginids) { urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.loginids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (userFilter_externalid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userFilter.externalid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userFilter_externalid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1DisplayUsers>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns users which belongs to tenants (no user-values, ids only)
        /// </summary>
        /// <remarks>
        /// Method loads all authorizations for given 'tenantIds' and filters out all 'loginids' which do not have an authorization yet.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1LoginIds> PermissionService_GetUsersBelongsToTenantsAsync(System.Collections.Generic.IEnumerable<string> loginIds, System.Collections.Generic.IEnumerable<string> tenantIds)
        {
            return PermissionService_GetUsersBelongsToTenantsAsync(loginIds, tenantIds, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns users which belongs to tenants (no user-values, ids only)
        /// </summary>
        /// <remarks>
        /// Method loads all authorizations for given 'tenantIds' and filters out all 'loginids' which do not have an authorization yet.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1LoginIds> PermissionService_GetUsersBelongsToTenantsAsync(System.Collections.Generic.IEnumerable<string> loginIds, System.Collections.Generic.IEnumerable<string> tenantIds, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("users/belongsto/tenants?");
            if (loginIds != null)
            {
                foreach (var item_ in loginIds) { urlBuilder_.Append(System.Uri.EscapeDataString("loginIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (tenantIds != null)
            {
                foreach (var item_ in tenantIds) { urlBuilder_.Append(System.Uri.EscapeDataString("tenantIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1LoginIds>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns tenants by user and app
        /// </summary>
        /// <remarks>
        /// Method returns all tenants for which the specified user has an authorization for the specified app.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the app
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Tenants> PermissionService_GetTenantsByUserAndApplication2Async(string idOne, string idTwo)
        {
            return PermissionService_GetTenantsByUserAndApplication2Async(idOne, idTwo, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns tenants by user and app
        /// </summary>
        /// <remarks>
        /// Method returns all tenants for which the specified user has an authorization for the specified app.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the app
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Tenants> PermissionService_GetTenantsByUserAndApplication2Async(string idOne, string idTwo, System.Threading.CancellationToken cancellationToken)
        {
            if (idOne == null)
                throw new System.ArgumentNullException("idOne");

            if (idTwo == null)
                throw new System.ArgumentNullException("idTwo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("users/{idOne}/applications/{idTwo}/tenants");
            urlBuilder_.Replace("{idOne}", System.Uri.EscapeDataString(ConvertToString(idOne, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idTwo}", System.Uri.EscapeDataString(ConvertToString(idTwo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Tenants>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns authorizations by user and app
        /// </summary>
        /// <remarks>
        /// Method returns authorizations for specified user and app.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the app
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetAuthorizationsByUserAndApplication2Async(string idOne, string idTwo)
        {
            return PermissionService_GetAuthorizationsByUserAndApplication2Async(idOne, idTwo, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns authorizations by user and app
        /// </summary>
        /// <remarks>
        /// Method returns authorizations for specified user and app.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the app
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetAuthorizationsByUserAndApplication2Async(string idOne, string idTwo, System.Threading.CancellationToken cancellationToken)
        {
            if (idOne == null)
                throw new System.ArgumentNullException("idOne");

            if (idTwo == null)
                throw new System.ArgumentNullException("idTwo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("users/{idOne}/apps/{idTwo}/authorizations");
            urlBuilder_.Replace("{idOne}", System.Uri.EscapeDataString(ConvertToString(idOne, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idTwo}", System.Uri.EscapeDataString(ConvertToString(idTwo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Authorizations>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an authorization
        /// </summary>
        /// <remarks>
        /// Method deletes the authorization. If **soft-delete** is activated, the authorization will first be marked as deleted for a few days (depending on the config).
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user (will be ignored, just idTwo is relevant)
        /// <br/>**idTwo**: ID (PK) of the authorization
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiReturnMessage> PermissionService_DeleteAuthorizationAsync(string idOne, string idTwo, string x_vrsg_tenant)
        {
            return PermissionService_DeleteAuthorizationAsync(idOne, idTwo, x_vrsg_tenant, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an authorization
        /// </summary>
        /// <remarks>
        /// Method deletes the authorization. If **soft-delete** is activated, the authorization will first be marked as deleted for a few days (depending on the config).
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user (will be ignored, just idTwo is relevant)
        /// <br/>**idTwo**: ID (PK) of the authorization
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiReturnMessage> PermissionService_DeleteAuthorizationAsync(string idOne, string idTwo, string x_vrsg_tenant, System.Threading.CancellationToken cancellationToken)
        {
            if (idOne == null)
                throw new System.ArgumentNullException("idOne");

            if (idTwo == null)
                throw new System.ArgumentNullException("idTwo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("users/{idOne}/authorizations/{idTwo}");
            urlBuilder_.Replace("{idOne}", System.Uri.EscapeDataString(ConvertToString(idOne, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idTwo}", System.Uri.EscapeDataString(ConvertToString(idTwo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_vrsg_tenant == null)
                        throw new System.ArgumentNullException("x_vrsg_tenant");
                    request_.Headers.TryAddWithoutValidation("x-vrsg-tenant", ConvertToString(x_vrsg_tenant, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiReturnMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns apps by user and tenant
        /// </summary>
        /// <remarks>
        /// Method returns all applications for which the specified user has an authorization for the specified tenant.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the tenant
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Applications> PermissionService_GetApplicationsByUserAndTenant2Async(string idOne, string idTwo)
        {
            return PermissionService_GetApplicationsByUserAndTenant2Async(idOne, idTwo, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns apps by user and tenant
        /// </summary>
        /// <remarks>
        /// Method returns all applications for which the specified user has an authorization for the specified tenant.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the tenant
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Applications> PermissionService_GetApplicationsByUserAndTenant2Async(string idOne, string idTwo, System.Threading.CancellationToken cancellationToken)
        {
            if (idOne == null)
                throw new System.ArgumentNullException("idOne");

            if (idTwo == null)
                throw new System.ArgumentNullException("idTwo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("users/{idOne}/tenants/{idTwo}/applications");
            urlBuilder_.Replace("{idOne}", System.Uri.EscapeDataString(ConvertToString(idOne, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idTwo}", System.Uri.EscapeDataString(ConvertToString(idTwo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Applications>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns authorizations by user and tenant
        /// </summary>
        /// <remarks>
        /// Method returns authorizations for specified user and tenant.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the tenant
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetAuthorizationsByUserAndTenant2Async(string idOne, string idTwo)
        {
            return PermissionService_GetAuthorizationsByUserAndTenant2Async(idOne, idTwo, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns authorizations by user and tenant
        /// </summary>
        /// <remarks>
        /// Method returns authorizations for specified user and tenant.
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the tenant
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetAuthorizationsByUserAndTenant2Async(string idOne, string idTwo, System.Threading.CancellationToken cancellationToken)
        {
            if (idOne == null)
                throw new System.ArgumentNullException("idOne");

            if (idTwo == null)
                throw new System.ArgumentNullException("idTwo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("users/{idOne}/tenants/{idTwo}/authorizations");
            urlBuilder_.Replace("{idOne}", System.Uri.EscapeDataString(ConvertToString(idOne, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idTwo}", System.Uri.EscapeDataString(ConvertToString(idTwo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Authorizations>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns authorizations for user and tenant (with delegation)
        /// </summary>
        /// <remarks>
        /// Method returns authorizations for specified user and tenant (including implicit ones from delegation).
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the tenant
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetAuthorizationsByUserAndTenantAndDelegation2Async(string idOne, string idTwo)
        {
            return PermissionService_GetAuthorizationsByUserAndTenantAndDelegation2Async(idOne, idTwo, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns authorizations for user and tenant (with delegation)
        /// </summary>
        /// <remarks>
        /// Method returns authorizations for specified user and tenant (including implicit ones from delegation).
        /// <br/>
        /// <br/>**idOne**: LoginId of the user
        /// <br/>**idTwo**: ID (PK) of the tenant
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetAuthorizationsByUserAndTenantAndDelegation2Async(string idOne, string idTwo, System.Threading.CancellationToken cancellationToken)
        {
            if (idOne == null)
                throw new System.ArgumentNullException("idOne");

            if (idTwo == null)
                throw new System.ArgumentNullException("idTwo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("users/{idOne}/tenants/{idTwo}/authorizations/delegation");
            urlBuilder_.Replace("{idOne}", System.Uri.EscapeDataString(ConvertToString(idOne, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idTwo}", System.Uri.EscapeDataString(ConvertToString(idTwo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Authorizations>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns possible apps for user by tenant
        /// </summary>
        /// <remarks>
        /// Method returns all tenant-apps (defined by AppPackages) for which the user isn't authorized yet
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Applications> PermissionService_GetPossibleAppsByUserAndTenantAsync(string idOne, string idTwo)
        {
            return PermissionService_GetPossibleAppsByUserAndTenantAsync(idOne, idTwo, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns possible apps for user by tenant
        /// </summary>
        /// <remarks>
        /// Method returns all tenant-apps (defined by AppPackages) for which the user isn't authorized yet
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Applications> PermissionService_GetPossibleAppsByUserAndTenantAsync(string idOne, string idTwo, System.Threading.CancellationToken cancellationToken)
        {
            if (idOne == null)
                throw new System.ArgumentNullException("idOne");

            if (idTwo == null)
                throw new System.ArgumentNullException("idTwo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("users/{idOne}/tenants/{idTwo}/possibleApps");
            urlBuilder_.Replace("{idOne}", System.Uri.EscapeDataString(ConvertToString(idOne, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idTwo}", System.Uri.EscapeDataString(ConvertToString(idTwo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Applications>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns apps by user
        /// </summary>
        /// <remarks>
        /// Method returns all applications for which the specified user has an authorization.
        /// <br/>
        /// <br/>**id**: LoginId of the user
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Applications> PermissionService_GetApplicationsByUserAsync(string id)
        {
            return PermissionService_GetApplicationsByUserAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns apps by user
        /// </summary>
        /// <remarks>
        /// Method returns all applications for which the specified user has an authorization.
        /// <br/>
        /// <br/>**id**: LoginId of the user
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Applications> PermissionService_GetApplicationsByUserAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("users/{id}/applications");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Applications>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns authorizations by user
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetUserAuthorizationsAsync(string id)
        {
            return PermissionService_GetUserAuthorizationsAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns authorizations by user
        /// </summary>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetUserAuthorizationsAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("users/{id}/authorizations");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Authorizations>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete authorizations by user
        /// </summary>
        /// <remarks>
        /// Method deletes all authorizations from the specified user. If **soft-delete** is activated, the authorizations will first be marked as deleted for a few days (depending on the config).
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>
        /// <br/>**id**: LoginId of the user
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiReturnMessage> PermissionService_DeleteAuthorizationsByLoginIDAsync(string id)
        {
            return PermissionService_DeleteAuthorizationsByLoginIDAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete authorizations by user
        /// </summary>
        /// <remarks>
        /// Method deletes all authorizations from the specified user. If **soft-delete** is activated, the authorizations will first be marked as deleted for a few days (depending on the config).
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>
        /// <br/>**id**: LoginId of the user
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiReturnMessage> PermissionService_DeleteAuthorizationsByLoginIDAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("users/{id}/authorizations");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiReturnMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns authorizations by user (including delegations)
        /// </summary>
        /// <remarks>
        /// In addition of just returning the explicit authorizations of the user, this endpoint returns also the **implicit authorizations** which are generated by the delegations configured on app-packages. It is not possible to distinguish based on the return which authorization is explicit and which is implicit (from delegation).
        /// <br/>
        /// <br/>There is no query-parameter. The endpoint has to be called with '/true' ('/false' is not possible).
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetUserAuthorizationsWithDelegationsAsync(string id)
        {
            return PermissionService_GetUserAuthorizationsWithDelegationsAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns authorizations by user (including delegations)
        /// </summary>
        /// <remarks>
        /// In addition of just returning the explicit authorizations of the user, this endpoint returns also the **implicit authorizations** which are generated by the delegations configured on app-packages. It is not possible to distinguish based on the return which authorization is explicit and which is implicit (from delegation).
        /// <br/>
        /// <br/>There is no query-parameter. The endpoint has to be called with '/true' ('/false' is not possible).
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetUserAuthorizationsWithDelegationsAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("users/{id}/authorizations/true");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Authorizations>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns full user history
        /// </summary>
        /// <remarks>
        /// Method loads changes from the user-object, login-object and authorization-object of the specified user.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V3ChangeObjects> PermissionService_GetUserHistoryAsync(string id)
        {
            return PermissionService_GetUserHistoryAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns full user history
        /// </summary>
        /// <remarks>
        /// Method loads changes from the user-object, login-object and authorization-object of the specified user.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V3ChangeObjects> PermissionService_GetUserHistoryAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("users/{id}/history");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V3ChangeObjects>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns possible apps for user
        /// </summary>
        /// <remarks>
        /// Method returns all apps for which the user isn't authorized yet.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Applications> PermissionService_GetPossibleAppsByUserAsync(string id)
        {
            return PermissionService_GetPossibleAppsByUserAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns possible apps for user
        /// </summary>
        /// <remarks>
        /// Method returns all apps for which the user isn't authorized yet.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Applications> PermissionService_GetPossibleAppsByUserAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("users/{id}/possibleApps");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Applications>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Return tenants by user
        /// </summary>
        /// <remarks>
        /// Method returns all tenants for which the specified user has an authorization.
        /// <br/>
        /// <br/>**id**: LoginId of the user
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Tenants> PermissionService_GetTenantsByUserAsync(string id)
        {
            return PermissionService_GetTenantsByUserAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return tenants by user
        /// </summary>
        /// <remarks>
        /// Method returns all tenants for which the specified user has an authorization.
        /// <br/>
        /// <br/>**id**: LoginId of the user
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Tenants> PermissionService_GetTenantsByUserAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("users/{id}/tenants");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Tenants>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create an authorization
        /// </summary>
        /// <remarks>
        /// Method validates the input and creates an authorization.
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>***
        /// <br/>
        /// <br/>**tenant** and **app**: The combination of app and tenant in authorization is unique across the entire system
        /// <br/>**lifecycle**: Input will be ignored, authorization is always created with 'ACTIVE' lifecycle
        /// <br/>***
        /// <br/>
        /// <br/>- An authorization can only be added, if the tenant has a corresponding app-package for the app
        /// <br/>- Only the ids for app and tenant are required in the body, not the whole objects with all properties.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Abraxaspermissionapiv1Authorization> PermissionService_CreateAuthorizationAsync(string loginId, Abraxaspermissionapiv1Authorization body, string x_vrsg_tenant)
        {
            return PermissionService_CreateAuthorizationAsync(loginId, body, x_vrsg_tenant, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create an authorization
        /// </summary>
        /// <remarks>
        /// Method validates the input and creates an authorization.
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>***
        /// <br/>
        /// <br/>**tenant** and **app**: The combination of app and tenant in authorization is unique across the entire system
        /// <br/>**lifecycle**: Input will be ignored, authorization is always created with 'ACTIVE' lifecycle
        /// <br/>***
        /// <br/>
        /// <br/>- An authorization can only be added, if the tenant has a corresponding app-package for the app
        /// <br/>- Only the ids for app and tenant are required in the body, not the whole objects with all properties.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Abraxaspermissionapiv1Authorization> PermissionService_CreateAuthorizationAsync(string loginId, Abraxaspermissionapiv1Authorization body, string x_vrsg_tenant, System.Threading.CancellationToken cancellationToken)
        {
            if (loginId == null)
                throw new System.ArgumentNullException("loginId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("users/{loginId}/authorizations");
            urlBuilder_.Replace("{loginId}", System.Uri.EscapeDataString(ConvertToString(loginId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_vrsg_tenant == null)
                        throw new System.ArgumentNullException("x_vrsg_tenant");
                    request_.Headers.TryAddWithoutValidation("x-vrsg-tenant", ConvertToString(x_vrsg_tenant, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Abraxaspermissionapiv1Authorization>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update an authorization
        /// </summary>
        /// <remarks>
        /// Method validates the input and updates the authorization.
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>***
        /// <br/>
        /// <br/>**tenant** and **app**: The combination of app and tenant in authorization is unique across the entire system
        /// <br/>**lifecycle**: Input will be ignored, authorization is always in 'ACTIVE' lifecycle (unless it is deleted via the explicit endpoint)
        /// <br/>***
        /// <br/>
        /// <br/>- An authorization is only valid, if the tenant has a corresponding app-package for the app
        /// <br/>- Only the ids for app and tenant are required in the body, not the whole objects with all properties.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Abraxaspermissionapiv1Authorization> PermissionService_UpdateAuthorizationAsync(string loginId, string id, Abraxaspermissionapiv1Authorization body)
        {
            return PermissionService_UpdateAuthorizationAsync(loginId, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an authorization
        /// </summary>
        /// <remarks>
        /// Method validates the input and updates the authorization.
        /// <br/>This method can only be used by users with high privileged roles.
        /// <br/>***
        /// <br/>
        /// <br/>**tenant** and **app**: The combination of app and tenant in authorization is unique across the entire system
        /// <br/>**lifecycle**: Input will be ignored, authorization is always in 'ACTIVE' lifecycle (unless it is deleted via the explicit endpoint)
        /// <br/>***
        /// <br/>
        /// <br/>- An authorization is only valid, if the tenant has a corresponding app-package for the app
        /// <br/>- Only the ids for app and tenant are required in the body, not the whole objects with all properties.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Abraxaspermissionapiv1Authorization> PermissionService_UpdateAuthorizationAsync(string loginId, string id, Abraxaspermissionapiv1Authorization body, System.Threading.CancellationToken cancellationToken)
        {
            if (loginId == null)
                throw new System.ArgumentNullException("loginId");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("users/{loginId}/authorizations/{id}");
            urlBuilder_.Replace("{loginId}", System.Uri.EscapeDataString(ConvertToString(loginId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Abraxaspermissionapiv1Authorization>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns authorizations by user (only allowed)
        /// </summary>
        /// <remarks>
        /// Special roles in the admin panel application can be used to restrict which permissions a user is allowed to see and manage.
        /// <br/>This method just returns these authorizations (where the caller is allowed to see with delegations).
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetAllowedUserAuthorizationsAsync(string loginid)
        {
            return PermissionService_GetAllowedUserAuthorizationsAsync(loginid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns authorizations by user (only allowed)
        /// </summary>
        /// <remarks>
        /// Special roles in the admin panel application can be used to restrict which permissions a user is allowed to see and manage.
        /// <br/>This method just returns these authorizations (where the caller is allowed to see with delegations).
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Authorizations> PermissionService_GetAllowedUserAuthorizationsAsync(string loginid, System.Threading.CancellationToken cancellationToken)
        {
            if (loginid == null)
                throw new System.ArgumentNullException("loginid");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("users/{loginid}/authorizations/allowed");
            urlBuilder_.Replace("{loginid}", System.Uri.EscapeDataString(ConvertToString(loginid, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Authorizations>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns possible apps for new authorizations
        /// </summary>
        /// <remarks>
        /// Method returns the possible apps for new authorization for the specified user.
        /// <br/>Alread set authorizations will be filtered out from the result.
        /// <br/>
        /// <br/>**Adminpanel only?**
        /// <br/>Endpoint has been implemented specifically for the 'Adminpanel' app to make it easier to manage permissions.
        /// <br/>
        /// <br/>**Super-Tenant relevant**
        /// <br/>The endpoint behaves differently when it is called in the context of a super-tenant (defined by config).
        /// <br/>
        /// <br/>**Tenantid is required for none-service-Users**
        /// <br/>If the caller is not a service-user, the tenant-id is required and has to be != 0.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Applications> PermissionService_GetPossibleApplicationsForAuthorizationAsync(string loginid, string tenantid)
        {
            return PermissionService_GetPossibleApplicationsForAuthorizationAsync(loginid, tenantid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns possible apps for new authorizations
        /// </summary>
        /// <remarks>
        /// Method returns the possible apps for new authorization for the specified user.
        /// <br/>Alread set authorizations will be filtered out from the result.
        /// <br/>
        /// <br/>**Adminpanel only?**
        /// <br/>Endpoint has been implemented specifically for the 'Adminpanel' app to make it easier to manage permissions.
        /// <br/>
        /// <br/>**Super-Tenant relevant**
        /// <br/>The endpoint behaves differently when it is called in the context of a super-tenant (defined by config).
        /// <br/>
        /// <br/>**Tenantid is required for none-service-Users**
        /// <br/>If the caller is not a service-user, the tenant-id is required and has to be != 0.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Applications> PermissionService_GetPossibleApplicationsForAuthorizationAsync(string loginid, string tenantid, System.Threading.CancellationToken cancellationToken)
        {
            if (loginid == null)
                throw new System.ArgumentNullException("loginid");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("users/{loginid}/authorizations/possibleapplications?");
            urlBuilder_.Replace("{loginid}", System.Uri.EscapeDataString(ConvertToString(loginid, System.Globalization.CultureInfo.InvariantCulture)));
            if (tenantid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Applications>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns possible roles for new authorizations for specified app
        /// </summary>
        /// <remarks>
        /// Method returns the possible roles for new authorization for the specified user and app.
        /// <br/>Alread set roles will be filtered out from the result.
        /// <br/>
        /// <br/>**Adminpanel only?**
        /// <br/>Endpoint has been implemented specifically for the 'Adminpanel' app to make it easier to manage permissions.
        /// <br/>
        /// <br/>**Tenantid is required for none-service-Users**
        /// <br/>If the caller is not a service-user, the tenant-id is required and has to be != 0.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiLabels> PermissionService_GetPossibleRolesForAuthorizationAsync(string loginid, string tenantid, string appid)
        {
            return PermissionService_GetPossibleRolesForAuthorizationAsync(loginid, tenantid, appid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns possible roles for new authorizations for specified app
        /// </summary>
        /// <remarks>
        /// Method returns the possible roles for new authorization for the specified user and app.
        /// <br/>Alread set roles will be filtered out from the result.
        /// <br/>
        /// <br/>**Adminpanel only?**
        /// <br/>Endpoint has been implemented specifically for the 'Adminpanel' app to make it easier to manage permissions.
        /// <br/>
        /// <br/>**Tenantid is required for none-service-Users**
        /// <br/>If the caller is not a service-user, the tenant-id is required and has to be != 0.
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiLabels> PermissionService_GetPossibleRolesForAuthorizationAsync(string loginid, string tenantid, string appid, System.Threading.CancellationToken cancellationToken)
        {
            if (loginid == null)
                throw new System.ArgumentNullException("loginid");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("users/{loginid}/authorizations/possibleroles?");
            urlBuilder_.Replace("{loginid}", System.Uri.EscapeDataString(ConvertToString(loginid, System.Globalization.CultureInfo.InvariantCulture)));
            if (tenantid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (appid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("appid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(appid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiLabels>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns possible tenants for new authorizations
        /// </summary>
        /// <remarks>
        /// Method returns the possible tenants for new authorization for the specified user.
        /// <br/>
        /// <br/>**Adminpanel only?**
        /// <br/>Endpoint has been implemented specifically for the 'Adminpanel' app to make it easier to manage permissions.
        /// <br/>
        /// <br/>**Super-Tenant relevant**
        /// <br/>The endpoint behaves differently when it is called in the context of a super-tenant (defined by config).
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<V1Tenants> PermissionService_GetPossibleTenantsForAuthorizationAsync(string loginid, string name_contains)
        {
            return PermissionService_GetPossibleTenantsForAuthorizationAsync(loginid, name_contains, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns possible tenants for new authorizations
        /// </summary>
        /// <remarks>
        /// Method returns the possible tenants for new authorization for the specified user.
        /// <br/>
        /// <br/>**Adminpanel only?**
        /// <br/>Endpoint has been implemented specifically for the 'Adminpanel' app to make it easier to manage permissions.
        /// <br/>
        /// <br/>**Super-Tenant relevant**
        /// <br/>The endpoint behaves differently when it is called in the context of a super-tenant (defined by config).
        /// </remarks>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<V1Tenants> PermissionService_GetPossibleTenantsForAuthorizationAsync(string loginid, string name_contains, System.Threading.CancellationToken cancellationToken)
        {
            if (loginid == null)
                throw new System.ArgumentNullException("loginid");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("users/{loginid}/authorizations/possibletenants?");
            urlBuilder_.Replace("{loginid}", System.Uri.EscapeDataString(ConvertToString(loginid, System.Globalization.CultureInfo.InvariantCulture)));
            if (name_contains != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("name_contains") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name_contains, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<V1Tenants>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiLabels> PermissionService_ValidateAsync()
        {
            return PermissionService_ValidateAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A successful response.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiLabels> PermissionService_ValidateAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("validate");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiLabels>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuntimeError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<RuntimeError>("An unexpected error response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class Abraxaspermissionapiv1Authorization
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("loginId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoginId { get; set; }

        [Newtonsoft.Json.JsonProperty("tenant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public V1Tenant Tenant { get; set; }

        [Newtonsoft.Json.JsonProperty("application", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public V1Application Application { get; set; }

        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CommonapiLabel> Labels { get; set; }

        [Newtonsoft.Json.JsonProperty("lifecycle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApiStorageLifecycle? Lifecycle { get; set; }

        [Newtonsoft.Json.JsonProperty("generation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Generation { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ApiAddress
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        [Newtonsoft.Json.JsonProperty("locality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locality { get; set; }

        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

        [Newtonsoft.Json.JsonProperty("primary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Primary { get; set; }

        [Newtonsoft.Json.JsonProperty("region", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Region { get; set; }

        [Newtonsoft.Json.JsonProperty("streetAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CommonapiLabel> Labels { get; set; }

        [Newtonsoft.Json.JsonProperty("loginId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoginId { get; set; }

        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId { get; set; }

        [Newtonsoft.Json.JsonProperty("contactId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactId { get; set; }

        [Newtonsoft.Json.JsonProperty("generation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Generation { get; set; }

        [Newtonsoft.Json.JsonProperty("lifecycle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApiStorageLifecycle? Lifecycle { get; set; }

        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModified { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ApiAddresses
    {
        [Newtonsoft.Json.JsonProperty("addresses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ApiAddress> Addresses { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ApiEmails
    {
        [Newtonsoft.Json.JsonProperty("emails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CommonapiEmail> Emails { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ApiLabels
    {
        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CommonapiLabel> Labels { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ApiPhoneNumbers
    {
        [Newtonsoft.Json.JsonProperty("phonenumbers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CommonapiPhoneNumber> Phonenumbers { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ApiReturnMessage
    {
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public enum ApiStorageLifecycle
    {

        [System.Runtime.Serialization.EnumMember(Value = @"STATELESS")]
        STATELESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ARCHIVED")]
        ARCHIVED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DELETED")]
        DELETED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"INACTIVE")]
        INACTIVE = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ApiURL
    {
        [Newtonsoft.Json.JsonProperty("URL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string URL { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ApiURLs
    {
        [Newtonsoft.Json.JsonProperty("URLs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ApiURL> URLs { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class Apiv1Email
    {
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("primary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Primary { get; set; }

        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CommonapiLabel> Labels { get; set; }

        [Newtonsoft.Json.JsonProperty("verified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Verified { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class Apiv1PhoneNumber
    {
        [Newtonsoft.Json.JsonProperty("phonenumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phonenumber { get; set; }

        [Newtonsoft.Json.JsonProperty("primary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Primary { get; set; }

        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CommonapiLabel> Labels { get; set; }

        [Newtonsoft.Json.JsonProperty("verified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Verified { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CommonapiEmail
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("primary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Primary { get; set; }

        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CommonapiLabel> Labels { get; set; }

        [Newtonsoft.Json.JsonProperty("verified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Verified { get; set; }

        [Newtonsoft.Json.JsonProperty("loginId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoginId { get; set; }

        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId { get; set; }

        [Newtonsoft.Json.JsonProperty("contactId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactId { get; set; }

        [Newtonsoft.Json.JsonProperty("generation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Generation { get; set; }

        [Newtonsoft.Json.JsonProperty("lifecycle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApiStorageLifecycle? Lifecycle { get; set; }

        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModified { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CommonapiLabel
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CommonapiPhoneNumber
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("phonenumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phonenumber { get; set; }

        [Newtonsoft.Json.JsonProperty("primary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Primary { get; set; }

        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CommonapiLabel> Labels { get; set; }

        [Newtonsoft.Json.JsonProperty("verified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Verified { get; set; }

        [Newtonsoft.Json.JsonProperty("loginId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoginId { get; set; }

        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId { get; set; }

        [Newtonsoft.Json.JsonProperty("contactId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactId { get; set; }

        [Newtonsoft.Json.JsonProperty("generation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Generation { get; set; }

        [Newtonsoft.Json.JsonProperty("lifecycle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApiStorageLifecycle? Lifecycle { get; set; }

        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModified { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// `Any` contains an arbitrary serialized protocol buffer message along with a
    /// <br/>URL that describes the type of the serialized message.
    /// <br/>
    /// <br/>Protobuf library provides support to pack/unpack Any values in the form
    /// <br/>of utility functions or additional generated methods of the Any type.
    /// <br/>
    /// <br/>Example 1: Pack and unpack a message in C++.
    /// <br/>
    /// <br/>    Foo foo = ...;
    /// <br/>    Any any;
    /// <br/>    any.PackFrom(foo);
    /// <br/>    ...
    /// <br/>    if (any.UnpackTo(&amp;foo)) {
    /// <br/>      ...
    /// <br/>    }
    /// <br/>
    /// <br/>Example 2: Pack and unpack a message in Java.
    /// <br/>
    /// <br/>    Foo foo = ...;
    /// <br/>    Any any = Any.pack(foo);
    /// <br/>    ...
    /// <br/>    if (any.is(Foo.class)) {
    /// <br/>      foo = any.unpack(Foo.class);
    /// <br/>    }
    /// <br/>    // or ...
    /// <br/>    if (any.isSameTypeAs(Foo.getDefaultInstance())) {
    /// <br/>      foo = any.unpack(Foo.getDefaultInstance());
    /// <br/>    }
    /// <br/>
    /// <br/> Example 3: Pack and unpack a message in Python.
    /// <br/>
    /// <br/>    foo = Foo(...)
    /// <br/>    any = Any()
    /// <br/>    any.Pack(foo)
    /// <br/>    ...
    /// <br/>    if any.Is(Foo.DESCRIPTOR):
    /// <br/>      any.Unpack(foo)
    /// <br/>      ...
    /// <br/>
    /// <br/> Example 4: Pack and unpack a message in Go
    /// <br/>
    /// <br/>     foo := &amp;pb.Foo{...}
    /// <br/>     any, err := anypb.New(foo)
    /// <br/>     if err != nil {
    /// <br/>       ...
    /// <br/>     }
    /// <br/>     ...
    /// <br/>     foo := &amp;pb.Foo{}
    /// <br/>     if err := any.UnmarshalTo(foo); err != nil {
    /// <br/>       ...
    /// <br/>     }
    /// <br/>
    /// <br/>The pack methods provided by protobuf library will by default use
    /// <br/>'type.googleapis.com/full.type.name' as the type URL and the unpack
    /// <br/>methods only use the fully qualified type name after the last '/'
    /// <br/>in the type URL, for example "foo.bar.com/x/y.z" will yield type
    /// <br/>name "y.z".
    /// <br/>
    /// <br/>JSON
    /// <br/>====
    /// <br/>The JSON representation of an `Any` value uses the regular
    /// <br/>representation of the deserialized, embedded message, with an
    /// <br/>additional field `@type` which contains the type URL. Example:
    /// <br/>
    /// <br/>    package google.profile;
    /// <br/>    message Person {
    /// <br/>      string first_name = 1;
    /// <br/>      string last_name = 2;
    /// <br/>    }
    /// <br/>
    /// <br/>    {
    /// <br/>      "@type": "type.googleapis.com/google.profile.Person",
    /// <br/>      "firstName": &lt;string&gt;,
    /// <br/>      "lastName": &lt;string&gt;
    /// <br/>    }
    /// <br/>
    /// <br/>If the embedded message type is well-known and has a custom JSON
    /// <br/>representation, that representation will be embedded adding a field
    /// <br/>`value` which holds the custom JSON in addition to the `@type`
    /// <br/>field. Example (for message [google.protobuf.Duration][]):
    /// <br/>
    /// <br/>    {
    /// <br/>      "@type": "type.googleapis.com/google.protobuf.Duration",
    /// <br/>      "value": "1.212s"
    /// <br/>    }
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ProtobufAny
    {
        /// <summary>
        /// A URL/resource name that uniquely identifies the type of the serialized
        /// <br/>protocol buffer message. This string must contain at least
        /// <br/>one "/" character. The last segment of the URL's path must represent
        /// <br/>the fully qualified name of the type (as in
        /// <br/>`path/google.protobuf.Duration`). The name should be in a canonical form
        /// <br/>(e.g., leading "." is not accepted).
        /// <br/>
        /// <br/>In practice, teams usually precompile into the binary all types that they
        /// <br/>expect it to use in the context of Any. However, for URLs which use the
        /// <br/>scheme `http`, `https`, or no scheme, one can optionally set up a type
        /// <br/>server that maps type URLs to message definitions as follows:
        /// <br/>
        /// <br/>* If no scheme is provided, `https` is assumed.
        /// <br/>* An HTTP GET on the URL must yield a [google.protobuf.Type][]
        /// <br/>  value in binary format, or produce an error.
        /// <br/>* Applications are allowed to cache lookup results based on the
        /// <br/>  URL, or have them precompiled into a binary to avoid any
        /// <br/>  lookup. Therefore, binary compatibility needs to be preserved
        /// <br/>  on changes to types. (Use versioned type names to manage
        /// <br/>  breaking changes.)
        /// <br/>
        /// <br/>Note: this functionality is not currently available in the official
        /// <br/>protobuf release, and it is not used for type URLs beginning with
        /// <br/>type.googleapis.com. As of May 2023, there are no widely used type server
        /// <br/>implementations and no plans to implement one.
        /// <br/>
        /// <br/>Schemes other than `http`, `https` (or the empty scheme) might be
        /// <br/>used with implementation specific semantics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type_url { get; set; }

        /// <summary>
        /// Must be a valid serialized protocol buffer of the above specified type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class RuntimeError
    {
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Code { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProtobufAny> Details { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class V1AppPackage
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("application", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public V1Application Application { get; set; }

        [Newtonsoft.Json.JsonProperty("tenant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public V1Tenant Tenant { get; set; }

        [Newtonsoft.Json.JsonProperty("delegation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public V1Tenant Delegation { get; set; }

        [Newtonsoft.Json.JsonProperty("generation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Generation { get; set; }

        [Newtonsoft.Json.JsonProperty("lifecycle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApiStorageLifecycle? Lifecycle { get; set; }

        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CommonapiLabel> Labels { get; set; }

        [Newtonsoft.Json.JsonProperty("design", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Design { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class V1AppPackages
    {
        [Newtonsoft.Json.JsonProperty("packages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<V1AppPackage> Packages { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class V1AppURI
    {
        [Newtonsoft.Json.JsonProperty("app_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string App_id { get; set; }

        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class V1Application
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("shortcut", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Shortcut { get; set; }

        [Newtonsoft.Json.JsonProperty("lifecycle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApiStorageLifecycle? Lifecycle { get; set; }

        [Newtonsoft.Json.JsonProperty("generation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Generation { get; set; }

        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CommonapiLabel> Labels { get; set; }

        [Newtonsoft.Json.JsonProperty("appExt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public V1ApplicationExt AppExt { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class V1ApplicationExt
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("openmode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public V1OpenMode Openmode { get; set; }

        [Newtonsoft.Json.JsonProperty("iconname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Iconname { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public V1ApplicationType? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("lifecycle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApiStorageLifecycle? Lifecycle { get; set; }

        [Newtonsoft.Json.JsonProperty("generation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Generation { get; set; }

        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CommonapiLabel> Labels { get; set; }

        [Newtonsoft.Json.JsonProperty("applicationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationId { get; set; }

        [Newtonsoft.Json.JsonProperty("second_factor_ip_whitelist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public V1IPFilter Second_factor_ip_whitelist { get; set; }

        [Newtonsoft.Json.JsonProperty("redirect_uris", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Redirect_uris { get; set; }

        [Newtonsoft.Json.JsonProperty("clientType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public V1ClientType? ClientType { get; set; }

        [Newtonsoft.Json.JsonProperty("grouptitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Grouptitle { get; set; }

        [Newtonsoft.Json.JsonProperty("iconsubname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Iconsubname { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public enum V1ApplicationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NONE_TYPE")]
        NONE_TYPE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WEBAPP")]
        WEBAPP = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TECHNICAL_SVC")]
        TECHNICAL_SVC = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UNTECHNICAL_SVC")]
        UNTECHNICAL_SVC = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class V1Applications
    {
        [Newtonsoft.Json.JsonProperty("applications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<V1Application> Applications { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class V1Authorizations
    {
        [Newtonsoft.Json.JsonProperty("authorizations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Abraxaspermissionapiv1Authorization> Authorizations { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class V1AuthorizedUserFilter
    {
        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId { get; set; }

        [Newtonsoft.Json.JsonProperty("applicationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationId { get; set; }

        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CommonapiLabel> Labels { get; set; }

    }

    /// <summary>
    ///  - UNSPECIFIED: Clients which don't have a clientType specified (yet).
    /// <br/>These are apps created before this feature was available
    /// <br/>or which are created by clients using an old api definition.
    /// <br/> - PUBLIC: Public clients are clients which cannot keep a secret private (eg. SPA's or native mobile applications).
    /// <br/> - CONFIDENTIAL: Confidential clients are clients which can keep a secret private (eg. server rendered web applications).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public enum V1ClientType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNSPECIFIED")]
        UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PUBLIC")]
        PUBLIC = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CONFIDENTIAL")]
        CONFIDENTIAL = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class V1DisplayUser
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("loginid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Loginid { get; set; }

        [Newtonsoft.Json.JsonProperty("firstname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Firstname { get; set; }

        [Newtonsoft.Json.JsonProperty("lastname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lastname { get; set; }

        [Newtonsoft.Json.JsonProperty("servicename", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Servicename { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("lifecycle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApiStorageLifecycle? Lifecycle { get; set; }

        [Newtonsoft.Json.JsonProperty("primaryMail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrimaryMail { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class V1DisplayUsers
    {
        [Newtonsoft.Json.JsonProperty("users", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<V1DisplayUser> Users { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public enum V1Gender
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GENDER_UNKNOWN")]
        GENDER_UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FEMALE")]
        FEMALE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MALE")]
        MALE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class V1IPFilter
    {
        [Newtonsoft.Json.JsonProperty("allowed_ips", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Allowed_ips { get; set; }

        [Newtonsoft.Json.JsonProperty("allowed_countries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Allowed_countries { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class V1LabelsFilter
    {
        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CommonapiLabel> Labels { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class V1LoginIds
    {
        [Newtonsoft.Json.JsonProperty("loginIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LoginIds { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class V1MappingID
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class V1OpenMode
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("generation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Generation { get; set; }

        [Newtonsoft.Json.JsonProperty("lifecycle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApiStorageLifecycle? Lifecycle { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class V1OpenModes
    {
        [Newtonsoft.Json.JsonProperty("openMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<V1OpenMode> OpenMode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public enum V1PasswordState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INITIAL")]
        INITIAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class V1Tenant
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("generation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Generation { get; set; }

        [Newtonsoft.Json.JsonProperty("lifecycle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApiStorageLifecycle? Lifecycle { get; set; }

        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CommonapiLabel> Labels { get; set; }

        [Newtonsoft.Json.JsonProperty("tenantExt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public V1TenantExt TenantExt { get; set; }

        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId { get; set; }

        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModified { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class V1TenantExt
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("bfs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Bfs { get; set; }

        [Newtonsoft.Json.JsonProperty("generation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Generation { get; set; }

        [Newtonsoft.Json.JsonProperty("lifecycle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApiStorageLifecycle? Lifecycle { get; set; }

        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CommonapiLabel> Labels { get; set; }

        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId { get; set; }

        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Origin { get; set; }

        [Newtonsoft.Json.JsonProperty("accountmanagers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Accountmanagers { get; set; }

        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModified { get; set; }

        [Newtonsoft.Json.JsonProperty("mappingIDs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<V1MappingID> MappingIDs { get; set; }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("businessPartnerNr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessPartnerNr { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class V1Tenants
    {
        [Newtonsoft.Json.JsonProperty("tenants", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<V1Tenant> Tenants { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class V1User
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("loginid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Loginid { get; set; }

        [Newtonsoft.Json.JsonProperty("firstname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Firstname { get; set; }

        [Newtonsoft.Json.JsonProperty("lastname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lastname { get; set; }

        [Newtonsoft.Json.JsonProperty("servicename", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Servicename { get; set; }

        [Newtonsoft.Json.JsonProperty("generation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Generation { get; set; }

        [Newtonsoft.Json.JsonProperty("emails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Apiv1Email> Emails { get; set; }

        [Newtonsoft.Json.JsonProperty("phonenumbers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Apiv1PhoneNumber> Phonenumbers { get; set; }

        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CommonapiLabel> Labels { get; set; }

        [Newtonsoft.Json.JsonProperty("lifecycle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApiStorageLifecycle? Lifecycle { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("externalIdps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ExternalIdps { get; set; }

        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModified { get; set; }

        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Origin { get; set; }

        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public V1Gender? Gender { get; set; }

        [Newtonsoft.Json.JsonProperty("resourceowner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Resourceowner { get; set; }

        [Newtonsoft.Json.JsonProperty("passwordState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public V1PasswordState? PasswordState { get; set; }

        [Newtonsoft.Json.JsonProperty("resource_owner_tenant_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Resource_owner_tenant_id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class V1UserFilter
    {
        [Newtonsoft.Json.JsonProperty("loginid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Loginid { get; set; }

        [Newtonsoft.Json.JsonProperty("firstname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Firstname { get; set; }

        [Newtonsoft.Json.JsonProperty("lastname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lastname { get; set; }

        [Newtonsoft.Json.JsonProperty("servicename", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Servicename { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("includeDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeDeleted { get; set; }

        [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModified { get; set; }

        [Newtonsoft.Json.JsonProperty("lifecycles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ApiStorageLifecycle> Lifecycles { get; set; }

        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Origin { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("loginids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Loginids { get; set; }

        [Newtonsoft.Json.JsonProperty("externalid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Externalid { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class V1Users
    {
        [Newtonsoft.Json.JsonProperty("users", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<V1User> Users { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class V3ChangeObject
    {
        [Newtonsoft.Json.JsonProperty("changeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ChangeDate { get; set; }

        [Newtonsoft.Json.JsonProperty("generation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Generation { get; set; }

        [Newtonsoft.Json.JsonProperty("modifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Modifier { get; set; }

        [Newtonsoft.Json.JsonProperty("attribut", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Attribut { get; set; }

        [Newtonsoft.Json.JsonProperty("new", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> New { get; set; }

        [Newtonsoft.Json.JsonProperty("old", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Old { get; set; }

        [Newtonsoft.Json.JsonProperty("objecttype", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Objecttype { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class V3ChangeObjects
    {
        [Newtonsoft.Json.JsonProperty("changes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<V3ChangeObject> Changes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public enum Anonymous
    {

        [System.Runtime.Serialization.EnumMember(Value = @"STATELESS")]
        STATELESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ARCHIVED")]
        ARCHIVED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DELETED")]
        DELETED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"INACTIVE")]
        INACTIVE = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public enum Anonymous2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"STATELESS")]
        STATELESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ARCHIVED")]
        ARCHIVED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DELETED")]
        DELETED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"INACTIVE")]
        INACTIVE = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public enum Anonymous3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"STATELESS")]
        STATELESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ARCHIVED")]
        ARCHIVED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DELETED")]
        DELETED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"INACTIVE")]
        INACTIVE = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public enum Anonymous4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"STATELESS")]
        STATELESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ARCHIVED")]
        ARCHIVED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DELETED")]
        DELETED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"INACTIVE")]
        INACTIVE = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public enum Anonymous5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"STATELESS")]
        STATELESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ARCHIVED")]
        ARCHIVED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DELETED")]
        DELETED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"INACTIVE")]
        INACTIVE = 4,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604