{
  "swagger": "2.0",
  "info": {
    "title": "Permission Service of SECURE Connect 2",
    "version": "1.0",
    "contact": {
      "name": "Cloud Platform Services",
      "url": "https://confluence.abraxas-tools.ch/confluence/display/IAM"
    }
  },
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json",
    "application/grpc"
  ],
  "produces": [
    "application/json",
    "application/grpc"
  ],
  "paths": {
    "/app-packages": {
      "post": {
        "summary": "Create an app-package",
        "description": "Method validates the input and creates an app-package.\nThis method can only be used by users with high privileged roles.\n***\n\n**tenant** and **app** (and optional **delegation**): The combination of IDs is unique across the entire system\n**lifecycle**: Input will be ignored, app-package is always created with 'ACTIVE' lifecycle\n***\n\nNote: Only the ids for app, tenant and delegation are required in the body, not the whole objects with all properties.",
        "operationId": "PermissionService_CreateAppPackage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AppPackage"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AppPackage"
            }
          }
        ],
        "tags": [
          "App-Packages"
        ]
      }
    },
    "/app-packages/{id}": {
      "delete": {
        "summary": "Delete an app-package",
        "description": "Method deletes an app-package **AND all authorizations** which belong to the apk (app/tenant combination).\nThis method can only be used by users with high privileged roles.",
        "operationId": "PermissionService_DeleteAppPackage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiReturnMessage"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "App-Packages"
        ]
      },
      "put": {
        "summary": "Update an app-package",
        "description": "The method validates the input and ensures uniqueness by app/tenant/delegation(once the ids for app, tenant and delegation are set on an app-package, they can't be changed).\nThis method can only be used by users with high privileged roles.\n***\n\n**lifecycle**: Input will be ignored, app-package is always in 'ACTIVE' lifecycle",
        "operationId": "PermissionService_UpdateAppPackage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AppPackage"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AppPackage"
            }
          }
        ],
        "tags": [
          "App-Packages"
        ]
      }
    },
    "/application/{id}/authorizations": {
      "get": {
        "summary": "Returns authorizations by app (no full-load)",
        "description": "Method returns all authorizations for the specified app.\n\n**No full-load**\nThe *application* and *tenant* objects are not getting full-loaded, just the ids will be returned.",
        "operationId": "PermissionService_GetAppAuthorizations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Authorizations"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Authorizations"
        ]
      }
    },
    "/applications": {
      "get": {
        "summary": "Returns all apps",
        "operationId": "PermissionService_GetApplications",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Applications"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "includeDeleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Applications"
        ]
      },
      "post": {
        "summary": "Create an app",
        "description": "Method validates the input and creates an application.\nThis method can only be used by users with high privileged roles.\n***\n\n**shortcut**: Field has to be unique accross the system\n**lifecycle** (base app-object): Input will be ignored, app is always created with 'ACTIVE' lifecycle\n**appExt.openMode**: The open-mode must exists with the id (open-mode is not getting created in this call)\n**appExt.redirect_uris**: Can also be managed via separate endpoints",
        "operationId": "PermissionService_CreateApplication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Application"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1Application"
            }
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/applications/name/{filter}": {
      "get": {
        "summary": "Returns single app by name",
        "description": "Method returns an app or a 404 if it doesn't exist.\n\nThe app *name* is **NOT unique** across the entire system. Method returns an error *multipleAppsFound* if multiple apps with the same name exists.\nHowever, it is generally allowed to have several apps with the same name.",
        "operationId": "PermissionService_GetApplicationByName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Application"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/applications/shortcut/{filter}": {
      "get": {
        "summary": "Returns single app by shortcut",
        "description": "Method returns an app or a 404 if it doesn't exist.\nThe app *shortcut* is unique across the entire system.",
        "operationId": "PermissionService_GetApplicationByShortcut",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Application"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/applications/{app_id}/redirectURIs": {
      "post": {
        "summary": "Add a redirect-uri to an app",
        "operationId": "PermissionService_AddAppRedirectURIs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiURLs"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "app_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AppURI"
            }
          }
        ],
        "tags": [
          "Application - Redirect URIs"
        ]
      }
    },
    "/applications/{app_id}/redirectURIs/{uri}": {
      "delete": {
        "summary": "Delete a specific redirect-uri from an app",
        "operationId": "PermissionService_DeleteAppRedirectURI",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "app_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "uri",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Application - Redirect URIs"
        ]
      }
    },
    "/applications/{idTwo}/tenants/{idOne}/app-packages": {
      "get": {
        "summary": "Returns app-packages by tenant and app",
        "description": "Method returns all app-packages for speficied app and tenant.\n\n**idOne**: ID (PK) of the tenant\n**idTwo**: ID (PK) of the app",
        "operationId": "PermissionService_GetAppPackagesByTenantAndApp2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AppPackages"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "idTwo",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "idOne",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "App-Packages"
        ]
      }
    },
    "/applications/{idTwo}/tenants/{idOne}/options": {
      "get": {
        "summary": "Returns 'options' from app-packages by tenant and app",
        "description": "Method returns all options (as labels) from all app-packages for the given tenant and app. Options in AppPackages for which the given tenant is the delegation, are not returned.\nAn option is a label on an app-package with the key 'option'.\n\n**idOne**: ID (PK) of the tenant\n**idTwo**: ID (PK) of the app",
        "operationId": "PermissionService_GetOptionsByTenantAndApp2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLabels"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "idTwo",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "idOne",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "App-Packages"
        ]
      }
    },
    "/applications/{idTwo}/users/{idOne}/tenants": {
      "get": {
        "summary": "Returns tenants by user and app",
        "description": "Method returns all tenants for which the specified user has an authorization for the specified app.\n\n**idOne**: LoginId of the user\n**idTwo**: ID (PK) of the app",
        "operationId": "PermissionService_GetTenantsByUserAndApplication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Tenants"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "idTwo",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "idOne",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Tenants"
        ]
      }
    },
    "/applications/{id}": {
      "get": {
        "summary": "Returns single app by ID (PK)",
        "operationId": "PermissionService_GetApplicationById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Application"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Applications"
        ]
      },
      "delete": {
        "summary": "Delete an app",
        "description": "Method deletes the app and app-extension. If **soft-delete** is activated, the app will first be marked as deleted for a few days (depending on the config).\nThis method can only be used by users with high privileged roles.",
        "operationId": "PermissionService_DeleteApplication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiReturnMessage"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Applications"
        ]
      },
      "put": {
        "summary": "Update an app",
        "description": "The method validates the input and ensures application/ext uniqueness by app-shortcut and existing IDs (once an app-extension-id is set on an app, it can't be changed).\nThis method can only be used by users with high privileged roles.\n***\n\n**lifecycle** (base app-object): Input will be ignored, app is always in 'ACTIVE' lifecycle (unless it is deleted via the explicit endpoint)\n**appExt.redirect_uris**: Can also be managed via separate endpoints",
        "operationId": "PermissionService_UpdateApplication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Application"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1Application"
            }
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/applications/{id}/app-packages": {
      "get": {
        "summary": "Returns app-packages by app",
        "operationId": "PermissionService_GetAppPackagesByApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AppPackages"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "App-Packages"
        ]
      }
    },
    "/applications/{id}/labels": {
      "get": {
        "summary": "Returns labels from an app by ID (PK)",
        "operationId": "PermissionService_GetApplicationLabels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLabels"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/applications/{id}/redirectURIs": {
      "get": {
        "summary": "Returns redirect-uris from an app",
        "operationId": "PermissionService_GetAppRedirectURIs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiURLs"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Application - Redirect URIs"
        ]
      }
    },
    "/applications/{id}/tenants": {
      "get": {
        "summary": "Returns tenants by app",
        "description": "Method returns all tenants which have an app-package for the specified app.",
        "operationId": "PermissionService_GetTenantsByApplication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Tenants"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Tenants"
        ]
      }
    },
    "/apps/{idOne}/tenants/{idTwo}/users": {
      "get": {
        "summary": "Returns users by app and tenant",
        "description": "Method returns users for specified app and tenant.\n\n**idOne**: ID (PK) of the app\n**idTwo**: ID (PK) of the tenant\n\n**Define app with header**\nAs an alternative to the query parameter, a header 'x-vrsg-app' can be set with the app shortcut.\n\n**Define tenant with header**\nAs an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.",
        "operationId": "PermissionService_GetUsersByAppAndTenant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Users"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "idOne",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "idTwo",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/apps/{idOne}/tenants/{idTwo}/users/appdelegations": {
      "get": {
        "summary": "Returns users by tenant and app (including delegation, with optional filter, returns display-users only)",
        "description": "Method returns users by app and tenant, including implicit authorizations from delegation.\n\n**Display-user only**\nMethod returns just a subset of the user (called display-user), instead of the full object.\n**Define app with header**\nAs an alternative to the query parameter, a header 'x-vrsg-app' can be set with the app shortcut.\n\n**Define tenant with header**\nAs an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.",
        "operationId": "PermissionService_GetUsersByTenantAndAppdelegation2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DisplayUsers"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "idOne",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "idTwo",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "userFilter.loginid",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "userFilter.firstname",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userFilter.lastname",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userFilter.servicename",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userFilter.type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userFilter.username",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userFilter.includeDeleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "userFilter.lastModified",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "userFilter.lifecycles",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "STATELESS",
                "ARCHIVED",
                "DELETED",
                "ACTIVE",
                "INACTIVE"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "userFilter.origin",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userFilter.email",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userFilter.loginids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uint64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "userFilter.externalid",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/apps/{idTwo}/users/{idOne}/authorizations": {
      "get": {
        "summary": "Returns authorizations by user and app",
        "description": "Method returns authorizations for specified user and app.\n\n**idOne**: LoginId of the user\n**idTwo**: ID (PK) of the app",
        "operationId": "PermissionService_GetAuthorizationsByUserAndApplication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Authorizations"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "idTwo",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "idOne",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Authorizations"
        ]
      }
    },
    "/apps/{id}/users": {
      "get": {
        "summary": "Returns users by app",
        "description": "Method returns users which have an authorization for the specified app.\n\n**Define app with header**\nAs an alternative to the query parameter, a header 'x-vrsg-app' can be set with the app shortcut.",
        "operationId": "PermissionService_GetUsersByApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Users"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/authorizedusers": {
      "post": {
        "summary": "Returns authorized users based on filters",
        "description": "Method returns users which have an authorization with specified filter.\n\n**Define app with header**\nAs an alternative to the query parameter, a header 'x-vrsg-app' can be set with the app shortcut.\n\n**Define tenant with header**\nAs an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.",
        "operationId": "PermissionService_SearchAuthorizedUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Users"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AuthorizedUserFilter"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/healthz": {
      "get": {
        "operationId": "PermissionService_Healthz",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiReturnMessage"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "Health and Readiness"
        ]
      }
    },
    "/openmodes": {
      "get": {
        "summary": "Returns all available open-modes",
        "operationId": "PermissionService_GetOpenModes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1OpenModes"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "includeDeleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Open Modes"
        ]
      },
      "post": {
        "summary": "Creates an open-mode",
        "operationId": "PermissionService_CreateOpenMode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1OpenMode"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1OpenMode"
            }
          }
        ],
        "tags": [
          "Open Modes"
        ],
        "deprecated": true
      }
    },
    "/openmodes/{id}": {
      "get": {
        "summary": "Returns open-mode by ID (PK)",
        "operationId": "PermissionService_GetOpenModeById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1OpenMode"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Open Modes"
        ]
      },
      "delete": {
        "summary": "Delete an open-mode",
        "operationId": "PermissionService_DeleteOpenMode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiReturnMessage"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Open Modes"
        ],
        "deprecated": true
      },
      "put": {
        "summary": "Update an open-mode",
        "operationId": "PermissionService_UpdateOpenMode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1OpenMode"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1OpenMode"
            }
          }
        ],
        "tags": [
          "Open Modes"
        ],
        "deprecated": true
      }
    },
    "/ready": {
      "get": {
        "operationId": "PermissionService_Ready",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiReturnMessage"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "Health and Readiness"
        ]
      }
    },
    "/tenant/{idTwo}/users/{idOne}/applications": {
      "get": {
        "summary": "Returns apps by user and tenant",
        "description": "Method returns all applications for which the specified user has an authorization for the specified tenant.\n\n**idOne**: LoginId of the user\n**idTwo**: ID (PK) of the tenant",
        "operationId": "PermissionService_GetApplicationsByUserAndTenant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Applications"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "idTwo",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "idOne",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/tenant/{idTwo}/users/{idOne}/authorizations": {
      "get": {
        "summary": "Returns authorizations by user and tenant",
        "description": "Method returns authorizations for specified user and tenant.\n\n**idOne**: LoginId of the user\n**idTwo**: ID (PK) of the tenant",
        "operationId": "PermissionService_GetAuthorizationsByUserAndTenant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Authorizations"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "idTwo",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "idOne",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Authorizations"
        ]
      }
    },
    "/tenant/{idTwo}/users/{idOne}/authorizations/delegation": {
      "get": {
        "summary": "Returns authorizations for user and tenant (with delegation)",
        "description": "Method returns authorizations for specified user and tenant (including implicit ones from delegation).\n\n**idOne**: LoginId of the user\n**idTwo**: ID (PK) of the tenant",
        "operationId": "PermissionService_GetAuthorizationsByUserAndTenantAndDelegation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Authorizations"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "idTwo",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "idOne",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Authorizations"
        ]
      }
    },
    "/tenants": {
      "get": {
        "summary": "Returns tenants (with optional filters)",
        "operationId": "PermissionService_GetTenants",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Tenants"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "includeDeleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "origin",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "mappingId.key",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "mappingId.value",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastModified",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "lifecycles",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "STATELESS",
                "ARCHIVED",
                "DELETED",
                "ACTIVE",
                "INACTIVE"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "tenantId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "bfs",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name_contains",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Tenants"
        ]
      },
      "post": {
        "summary": "Create a tenant",
        "description": "Method validates the input and creates a tenant.\nThis method can only be used by users with high privileged roles.\n***\n\n**TenantId** (not PK) and **name**: Fields have to be unique accross the system\n**lifecycle** (base tenant-object): Input will be ignored, tenant is always created with 'ACTIVE' lifecycle\n**tenantExt.origin**: If no value is provided, method adds 'SecureConnect' as default\n***\n\nMethod will add some default App-Packages to the tenant in a background-task (AdminPanel, myAccount, SECURE Access).",
        "operationId": "PermissionService_CreateTenant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Tenant"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1Tenant"
            }
          }
        ],
        "tags": [
          "Tenants"
        ]
      }
    },
    "/tenants/labelsfilter": {
      "post": {
        "summary": "Returns tenants by label-filter",
        "operationId": "PermissionService_GetTenantsByLabels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Tenants"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1LabelsFilter"
            }
          }
        ],
        "tags": [
          "Tenants"
        ]
      }
    },
    "/tenants/tenantid/{tenantId}": {
      "get": {
        "summary": "Returns single tenant by TenantId (not PK)",
        "operationId": "PermissionService_GetTenantByTenantId",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Tenant"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Tenants"
        ]
      }
    },
    "/tenants/{idOne}/addresses/{idTwo}": {
      "get": {
        "summary": "Returns single address assigned to a tenant",
        "operationId": "PermissionService_GetTenantAddress",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiAddress"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "idOne",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "idTwo",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Tenant - Contact Extension (Emails/Phones/Addresses)"
        ],
        "deprecated": true
      },
      "delete": {
        "summary": "Delete address from tenant",
        "operationId": "PermissionService_DeleteTenantAddress",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "idOne",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "idTwo",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Tenant - Contact Extension (Emails/Phones/Addresses)"
        ],
        "deprecated": true
      }
    },
    "/tenants/{idOne}/applications/{idTwo}/app-packages": {
      "get": {
        "summary": "Returns app-packages by tenant and app",
        "description": "Method returns all app-packages for speficied app and tenant.\n\n**idOne**: ID (PK) of the tenant\n**idTwo**: ID (PK) of the app",
        "operationId": "PermissionService_GetAppPackagesByTenantAndApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AppPackages"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "idOne",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "idTwo",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "App-Packages"
        ]
      }
    },
    "/tenants/{idOne}/applications/{idTwo}/options": {
      "get": {
        "summary": "Returns 'options' from app-packages by tenant and app",
        "description": "Method returns all options (as labels) from all app-packages for the given tenant and app. Options in AppPackages for which the given tenant is the delegation, are not returned.\nAn option is a label on an app-package with the key 'option'.\n\n**idOne**: ID (PK) of the tenant\n**idTwo**: ID (PK) of the app",
        "operationId": "PermissionService_GetOptionsByTenantAndApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLabels"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "idOne",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "idTwo",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "App-Packages"
        ]
      }
    },
    "/tenants/{idOne}/delegations/{idTwo}/possibleApps": {
      "get": {
        "summary": "Returns possible apps for tenant and delegation",
        "description": "Method returns all apps for which the given tenant has no app-package yet , including app-packages with tenant-delegation set (idTwo).",
        "operationId": "PermissionService_GetPossibleAppsByDelegation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Applications"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "idOne",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "idTwo",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "'Get-Possible' Endpoints"
        ]
      }
    },
    "/tenants/{idOne}/emails/{idTwo}": {
      "get": {
        "summary": "Returns single e-mail assigned to a tenant",
        "operationId": "PermissionService_GetTenantEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonapiEmail"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "idOne",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "idTwo",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Tenant - Contact Extension (Emails/Phones/Addresses)"
        ],
        "deprecated": true
      },
      "delete": {
        "summary": "Delete e-mail from tenant",
        "operationId": "PermissionService_DeleteTenantEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "idOne",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "idTwo",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Tenant - Contact Extension (Emails/Phones/Addresses)"
        ],
        "deprecated": true
      }
    },
    "/tenants/{idOne}/phones/{idTwo}": {
      "get": {
        "summary": "Returns single phone assigned to a tenant",
        "operationId": "PermissionService_GetTenantPhone",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonapiPhoneNumber"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "idOne",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "idTwo",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Tenant - Contact Extension (Emails/Phones/Addresses)"
        ],
        "deprecated": true
      },
      "delete": {
        "summary": "Delete phone from tenant",
        "operationId": "PermissionService_DeleteTenantPhone",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "idOne",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "idTwo",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Tenant - Contact Extension (Emails/Phones/Addresses)"
        ],
        "deprecated": true
      }
    },
    "/tenants/{idTwo}/apps/{idOne}/users": {
      "get": {
        "summary": "Returns users by app and tenant",
        "description": "Method returns users for specified app and tenant.\n\n**idOne**: ID (PK) of the app\n**idTwo**: ID (PK) of the tenant\n\n**Define app with header**\nAs an alternative to the query parameter, a header 'x-vrsg-app' can be set with the app shortcut.\n\n**Define tenant with header**\nAs an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.",
        "operationId": "PermissionService_GetUsersByAppAndTenant2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Users"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "idTwo",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "idOne",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/tenants/{idTwo}/apps/{idOne}/users/appdelegations": {
      "get": {
        "summary": "Returns users by tenant and app (including delegation, with optional filter, returns display-users only)",
        "description": "Method returns users by app and tenant, including implicit authorizations from delegation.\n\n**Display-user only**\nMethod returns just a subset of the user (called display-user), instead of the full object.\n**Define app with header**\nAs an alternative to the query parameter, a header 'x-vrsg-app' can be set with the app shortcut.\n\n**Define tenant with header**\nAs an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.",
        "operationId": "PermissionService_GetUsersByTenantAndAppdelegation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DisplayUsers"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "idTwo",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "idOne",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "userFilter.loginid",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "userFilter.firstname",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userFilter.lastname",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userFilter.servicename",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userFilter.type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userFilter.username",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userFilter.includeDeleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "userFilter.lastModified",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "userFilter.lifecycles",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "STATELESS",
                "ARCHIVED",
                "DELETED",
                "ACTIVE",
                "INACTIVE"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "userFilter.origin",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userFilter.email",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userFilter.loginids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uint64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "userFilter.externalid",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/tenants/{idTwo}/users/{idOne}/possibleApps": {
      "get": {
        "summary": "Returns possible apps for user by tenant",
        "description": "Method returns all tenant-apps (defined by AppPackages) for which the user isn't authorized yet",
        "operationId": "PermissionService_GetPossibleAppsByUserAndTenant2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Applications"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "idTwo",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "idOne",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "'Get-Possible' Endpoints"
        ]
      }
    },
    "/tenants/{id}": {
      "get": {
        "summary": "Returns single tenant by ID (PK)",
        "operationId": "PermissionService_GetTenantById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Tenant"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Tenants"
        ]
      },
      "delete": {
        "summary": "Delete a tenant",
        "description": "Method deletes the tenant and tenant-extension. If **soft-delete** is activated, the tenant will first be marked as deleted for a few days (depending on the config).\nThis method can only be used by users with high privileged roles.",
        "operationId": "PermissionService_DeleteTenant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiReturnMessage"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Tenants"
        ]
      },
      "put": {
        "summary": "Update a tenant",
        "description": "The method validates the input and ensures tenant/ext uniqueness by tenantid/name and existing IDs (once a tenant-extension-id is set on a tenant, it can't be changed).\nThis method can only be used by users with high privileged roles.\n***\n\n**lifecycle** (base tenant-object): Input will be ignored, tenant is always in 'ACTIVE' lifecycle (unless it is deleted via the explicit endpoint)",
        "operationId": "PermissionService_UpdateTenant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Tenant"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1Tenant"
            }
          }
        ],
        "tags": [
          "Tenants"
        ]
      }
    },
    "/tenants/{id}/addresses": {
      "get": {
        "summary": "Returns addresses assigned to a tenant",
        "operationId": "PermissionService_GetTenantAddresses",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiAddresses"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Tenant - Contact Extension (Emails/Phones/Addresses)"
        ],
        "deprecated": true
      }
    },
    "/tenants/{id}/app-packages": {
      "get": {
        "summary": "Returns app-packages by tenant",
        "operationId": "PermissionService_GetAppPackagesByTenant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AppPackages"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "App-Packages"
        ]
      }
    },
    "/tenants/{id}/applications": {
      "get": {
        "summary": "Returns apps by tenant",
        "description": "Method returns all applications for which the specified tenant has an app-package.",
        "operationId": "PermissionService_GetApplicationsByTenant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Applications"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/tenants/{id}/emails": {
      "get": {
        "summary": "Returns e-mails assigned to a tenant",
        "operationId": "PermissionService_GetTenantEmails",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiEmails"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Tenant - Contact Extension (Emails/Phones/Addresses)"
        ],
        "deprecated": true
      }
    },
    "/tenants/{id}/labels": {
      "get": {
        "summary": "Returns labels from a tenant by ID (PK)",
        "operationId": "PermissionService_GetTenantLabels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLabels"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Tenants"
        ]
      }
    },
    "/tenants/{id}/phones": {
      "get": {
        "summary": "Returns phones assigned to a tenant",
        "operationId": "PermissionService_GetTenantPhones",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPhoneNumbers"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Tenant - Contact Extension (Emails/Phones/Addresses)"
        ],
        "deprecated": true
      }
    },
    "/tenants/{id}/possibleApps": {
      "get": {
        "summary": "Returns possible apps for tenant",
        "description": "Method returns all apps for which the given tenant has no app-package yet",
        "operationId": "PermissionService_GetPossibleAppsByTenant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Applications"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "'Get-Possible' Endpoints"
        ]
      }
    },
    "/tenants/{tenantId}/addresses": {
      "post": {
        "summary": "Add address to tenant",
        "operationId": "PermissionService_AddTenantAddress",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiAddress"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiAddress"
            }
          }
        ],
        "tags": [
          "Tenant - Contact Extension (Emails/Phones/Addresses)"
        ],
        "deprecated": true
      }
    },
    "/tenants/{tenantId}/emails": {
      "post": {
        "summary": "Add e-mail to tenant",
        "operationId": "PermissionService_AddTenantEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonapiEmail"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/commonapiEmail"
            }
          }
        ],
        "tags": [
          "Tenant - Contact Extension (Emails/Phones/Addresses)"
        ],
        "deprecated": true
      }
    },
    "/tenants/{tenantId}/phones": {
      "post": {
        "summary": "Add phone to tenant",
        "operationId": "PermissionService_AddTenantPhone",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonapiPhoneNumber"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/commonapiPhoneNumber"
            }
          }
        ],
        "tags": [
          "Tenant - Contact Extension (Emails/Phones/Addresses)"
        ],
        "deprecated": true
      }
    },
    "/tenants/{tenantId}/users": {
      "get": {
        "summary": "Returns users by tenant (with optional filters)",
        "description": "Method returns users which have an authorization for the specified tenant.\n\n**Define tenant with header**\nAs an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.",
        "operationId": "PermissionService_GetUsersByTenant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Users"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "userFilter.loginid",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "userFilter.firstname",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userFilter.lastname",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userFilter.servicename",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userFilter.type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userFilter.username",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userFilter.includeDeleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "userFilter.lastModified",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "userFilter.lifecycles",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "STATELESS",
                "ARCHIVED",
                "DELETED",
                "ACTIVE",
                "INACTIVE"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "userFilter.origin",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userFilter.email",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userFilter.loginids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uint64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "userFilter.externalid",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/tenants/{tenantId}/users/delegations": {
      "get": {
        "summary": "Returns users by tenand (including delegation, with optional filter, returns display-users only)",
        "description": "Method returns users tenant, including implicit authorizations from delegation.\n\n**Display-user only**\nMethod returns just a subset of the user (called display-user), instead of the full object.\n**Define tenant with header**\nAs an alternative to the query parameter, a header 'x-vrsg-tenant' can be set with the id of the tenant.",
        "operationId": "PermissionService_GetUsersByTenantAndDelegation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DisplayUsers"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "userFilter.loginid",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "userFilter.firstname",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userFilter.lastname",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userFilter.servicename",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userFilter.type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userFilter.username",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userFilter.includeDeleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "userFilter.lastModified",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "userFilter.lifecycles",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "STATELESS",
                "ARCHIVED",
                "DELETED",
                "ACTIVE",
                "INACTIVE"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "userFilter.origin",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userFilter.email",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userFilter.loginids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uint64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "userFilter.externalid",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/users/belongsto/tenants": {
      "get": {
        "summary": "Returns users which belongs to tenants (no user-values, ids only)",
        "description": "Method loads all authorizations for given 'tenantIds' and filters out all 'loginids' which do not have an authorization yet.",
        "operationId": "PermissionService_GetUsersBelongsToTenants",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1LoginIds"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "loginIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uint64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "tenantIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uint64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{idOne}/applications/{idTwo}/tenants": {
      "get": {
        "summary": "Returns tenants by user and app",
        "description": "Method returns all tenants for which the specified user has an authorization for the specified app.\n\n**idOne**: LoginId of the user\n**idTwo**: ID (PK) of the app",
        "operationId": "PermissionService_GetTenantsByUserAndApplication2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Tenants"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "idOne",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "idTwo",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Tenants"
        ]
      }
    },
    "/users/{idOne}/apps/{idTwo}/authorizations": {
      "get": {
        "summary": "Returns authorizations by user and app",
        "description": "Method returns authorizations for specified user and app.\n\n**idOne**: LoginId of the user\n**idTwo**: ID (PK) of the app",
        "operationId": "PermissionService_GetAuthorizationsByUserAndApplication2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Authorizations"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "idOne",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "idTwo",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Authorizations"
        ]
      }
    },
    "/users/{idOne}/authorizations/{idTwo}": {
      "delete": {
        "summary": "Delete an authorization",
        "description": "Method deletes the authorization. If **soft-delete** is activated, the authorization will first be marked as deleted for a few days (depending on the config).\nThis method can only be used by users with high privileged roles.\n\n**idOne**: LoginId of the user (will be ignored, just idTwo is relevant)\n**idTwo**: ID (PK) of the authorization",
        "operationId": "PermissionService_DeleteAuthorization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiReturnMessage"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "idOne",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "idTwo",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "x-vrsg-tenant",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Authorizations"
        ]
      }
    },
    "/users/{idOne}/tenants/{idTwo}/applications": {
      "get": {
        "summary": "Returns apps by user and tenant",
        "description": "Method returns all applications for which the specified user has an authorization for the specified tenant.\n\n**idOne**: LoginId of the user\n**idTwo**: ID (PK) of the tenant",
        "operationId": "PermissionService_GetApplicationsByUserAndTenant2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Applications"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "idOne",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "idTwo",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/users/{idOne}/tenants/{idTwo}/authorizations": {
      "get": {
        "summary": "Returns authorizations by user and tenant",
        "description": "Method returns authorizations for specified user and tenant.\n\n**idOne**: LoginId of the user\n**idTwo**: ID (PK) of the tenant",
        "operationId": "PermissionService_GetAuthorizationsByUserAndTenant2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Authorizations"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "idOne",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "idTwo",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Authorizations"
        ]
      }
    },
    "/users/{idOne}/tenants/{idTwo}/authorizations/delegation": {
      "get": {
        "summary": "Returns authorizations for user and tenant (with delegation)",
        "description": "Method returns authorizations for specified user and tenant (including implicit ones from delegation).\n\n**idOne**: LoginId of the user\n**idTwo**: ID (PK) of the tenant",
        "operationId": "PermissionService_GetAuthorizationsByUserAndTenantAndDelegation2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Authorizations"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "idOne",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "idTwo",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Authorizations"
        ]
      }
    },
    "/users/{idOne}/tenants/{idTwo}/possibleApps": {
      "get": {
        "summary": "Returns possible apps for user by tenant",
        "description": "Method returns all tenant-apps (defined by AppPackages) for which the user isn't authorized yet",
        "operationId": "PermissionService_GetPossibleAppsByUserAndTenant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Applications"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "idOne",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "idTwo",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "'Get-Possible' Endpoints"
        ]
      }
    },
    "/users/{id}/applications": {
      "get": {
        "summary": "Returns apps by user",
        "description": "Method returns all applications for which the specified user has an authorization.\n\n**id**: LoginId of the user",
        "operationId": "PermissionService_GetApplicationsByUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Applications"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/users/{id}/authorizations": {
      "get": {
        "summary": "Returns authorizations by user",
        "operationId": "PermissionService_GetUserAuthorizations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Authorizations"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Authorizations"
        ]
      },
      "delete": {
        "summary": "Delete authorizations by user",
        "description": "Method deletes all authorizations from the specified user. If **soft-delete** is activated, the authorizations will first be marked as deleted for a few days (depending on the config).\nThis method can only be used by users with high privileged roles.\n\n**id**: LoginId of the user\n",
        "operationId": "PermissionService_DeleteAuthorizationsByLoginID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiReturnMessage"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Authorizations"
        ]
      }
    },
    "/users/{id}/authorizations/true": {
      "get": {
        "summary": "Returns authorizations by user (including delegations)",
        "description": "In addition of just returning the explicit authorizations of the user, this endpoint returns also the **implicit authorizations** which are generated by the delegations configured on app-packages. It is not possible to distinguish based on the return which authorization is explicit and which is implicit (from delegation).\n\nThere is no query-parameter. The endpoint has to be called with '/true' ('/false' is not possible).",
        "operationId": "PermissionService_GetUserAuthorizationsWithDelegations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Authorizations"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Authorizations"
        ]
      }
    },
    "/users/{id}/history": {
      "get": {
        "summary": "Returns full user history",
        "description": "Method loads changes from the user-object, login-object and authorization-object of the specified user.",
        "operationId": "PermissionService_GetUserHistory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3ChangeObjects"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "History"
        ]
      }
    },
    "/users/{id}/possibleApps": {
      "get": {
        "summary": "Returns possible apps for user",
        "description": "Method returns all apps for which the user isn't authorized yet.",
        "operationId": "PermissionService_GetPossibleAppsByUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Applications"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "'Get-Possible' Endpoints"
        ]
      }
    },
    "/users/{id}/tenants": {
      "get": {
        "summary": "Return tenants by user",
        "description": "Method returns all tenants for which the specified user has an authorization.\n\n**id**: LoginId of the user",
        "operationId": "PermissionService_GetTenantsByUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Tenants"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Tenants"
        ]
      }
    },
    "/users/{loginId}/authorizations": {
      "post": {
        "summary": "Create an authorization",
        "description": "Method validates the input and creates an authorization.\nThis method can only be used by users with high privileged roles.\n***\n\n**tenant** and **app**: The combination of app and tenant in authorization is unique across the entire system\n**lifecycle**: Input will be ignored, authorization is always created with 'ACTIVE' lifecycle\n***\n\n- An authorization can only be added, if the tenant has a corresponding app-package for the app\n- Only the ids for app and tenant are required in the body, not the whole objects with all properties.",
        "operationId": "PermissionService_CreateAuthorization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/abraxaspermissionapiv1Authorization"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "loginId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/abraxaspermissionapiv1Authorization"
            }
          },
          {
            "name": "x-vrsg-tenant",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Authorizations"
        ]
      }
    },
    "/users/{loginId}/authorizations/{id}": {
      "put": {
        "summary": "Update an authorization",
        "description": "Method validates the input and updates the authorization.\nThis method can only be used by users with high privileged roles.\n***\n\n**tenant** and **app**: The combination of app and tenant in authorization is unique across the entire system\n**lifecycle**: Input will be ignored, authorization is always in 'ACTIVE' lifecycle (unless it is deleted via the explicit endpoint)\n***\n\n- An authorization is only valid, if the tenant has a corresponding app-package for the app\n- Only the ids for app and tenant are required in the body, not the whole objects with all properties.",
        "operationId": "PermissionService_UpdateAuthorization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/abraxaspermissionapiv1Authorization"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "loginId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/abraxaspermissionapiv1Authorization"
            }
          }
        ],
        "tags": [
          "Authorizations"
        ]
      }
    },
    "/users/{loginid}/authorizations/allowed": {
      "get": {
        "summary": "Returns authorizations by user (only allowed)",
        "description": "Special roles in the admin panel application can be used to restrict which permissions a user is allowed to see and manage.\nThis method just returns these authorizations (where the caller is allowed to see with delegations).\n",
        "operationId": "PermissionService_GetAllowedUserAuthorizations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Authorizations"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "loginid",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Authorizations"
        ]
      }
    },
    "/users/{loginid}/authorizations/possibleapplications": {
      "get": {
        "summary": "Returns possible apps for new authorizations",
        "description": "Method returns the possible apps for new authorization for the specified user.\nAlread set authorizations will be filtered out from the result.\n\n**Adminpanel only?**\nEndpoint has been implemented specifically for the 'Adminpanel' app to make it easier to manage permissions.\n\n**Super-Tenant relevant**\nThe endpoint behaves differently when it is called in the context of a super-tenant (defined by config).\n\n**Tenantid is required for none-service-Users**\nIf the caller is not a service-user, the tenant-id is required and has to be != 0.",
        "operationId": "PermissionService_GetPossibleApplicationsForAuthorization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Applications"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "loginid",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "tenantid",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "'Get-Possible' Endpoints (adminpanel only)"
        ]
      }
    },
    "/users/{loginid}/authorizations/possibleroles": {
      "get": {
        "summary": "Returns possible roles for new authorizations for specified app",
        "description": "Method returns the possible roles for new authorization for the specified user and app.\nAlread set roles will be filtered out from the result.\n\n**Adminpanel only?**\nEndpoint has been implemented specifically for the 'Adminpanel' app to make it easier to manage permissions.\n\n**Tenantid is required for none-service-Users**\nIf the caller is not a service-user, the tenant-id is required and has to be != 0.",
        "operationId": "PermissionService_GetPossibleRolesForAuthorization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLabels"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "loginid",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "tenantid",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "appid",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "'Get-Possible' Endpoints (adminpanel only)"
        ]
      }
    },
    "/users/{loginid}/authorizations/possibletenants": {
      "get": {
        "summary": "Returns possible tenants for new authorizations",
        "description": "Method returns the possible tenants for new authorization for the specified user.\n\n**Adminpanel only?**\nEndpoint has been implemented specifically for the 'Adminpanel' app to make it easier to manage permissions.\n\n**Super-Tenant relevant**\nThe endpoint behaves differently when it is called in the context of a super-tenant (defined by config).",
        "operationId": "PermissionService_GetPossibleTenantsForAuthorization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Tenants"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "loginid",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "name_contains",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "'Get-Possible' Endpoints (adminpanel only)"
        ]
      }
    },
    "/validate": {
      "get": {
        "operationId": "PermissionService_Validate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLabels"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "Health and Readiness"
        ]
      }
    }
  },
  "definitions": {
    "abraxaspermissionapiv1Authorization": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "loginId": {
          "type": "string",
          "format": "uint64"
        },
        "tenant": {
          "$ref": "#/definitions/v1Tenant"
        },
        "application": {
          "$ref": "#/definitions/v1Application"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonapiLabel"
          }
        },
        "lifecycle": {
          "$ref": "#/definitions/apiStorageLifecycle"
        },
        "generation": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "apiAddress": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "country": {
          "type": "string"
        },
        "locality": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "primary": {
          "type": "boolean"
        },
        "region": {
          "type": "string"
        },
        "streetAddress": {
          "type": "string"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonapiLabel"
          }
        },
        "loginId": {
          "type": "string",
          "format": "uint64"
        },
        "tenantId": {
          "type": "string",
          "format": "uint64"
        },
        "contactId": {
          "type": "string",
          "format": "uint64"
        },
        "generation": {
          "type": "string",
          "format": "int64"
        },
        "lifecycle": {
          "$ref": "#/definitions/apiStorageLifecycle"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "apiAddresses": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiAddress"
          }
        }
      }
    },
    "apiEmails": {
      "type": "object",
      "properties": {
        "emails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonapiEmail"
          }
        }
      }
    },
    "apiLabels": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonapiLabel"
          }
        }
      }
    },
    "apiPhoneNumbers": {
      "type": "object",
      "properties": {
        "phonenumbers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonapiPhoneNumber"
          }
        }
      }
    },
    "apiReturnMessage": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "apiStorageLifecycle": {
      "type": "string",
      "enum": [
        "STATELESS",
        "ARCHIVED",
        "DELETED",
        "ACTIVE",
        "INACTIVE"
      ],
      "default": "STATELESS"
    },
    "apiURL": {
      "type": "object",
      "properties": {
        "URL": {
          "type": "string"
        }
      }
    },
    "apiURLs": {
      "type": "object",
      "properties": {
        "URLs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiURL"
          }
        }
      }
    },
    "apiv1Email": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "title": "regexp gemaess https://stackoverflow.com/a/14075810 (RFC 5321/5322)"
        },
        "primary": {
          "type": "boolean"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonapiLabel"
          }
        },
        "verified": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "apiv1PhoneNumber": {
      "type": "object",
      "properties": {
        "phonenumber": {
          "type": "string"
        },
        "primary": {
          "type": "boolean"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonapiLabel"
          }
        },
        "verified": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "commonapiEmail": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "email": {
          "type": "string",
          "title": "regexp gemaess https://stackoverflow.com/a/14075810 (RFC 5321/5322)"
        },
        "primary": {
          "type": "boolean"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonapiLabel"
          }
        },
        "verified": {
          "type": "boolean"
        },
        "loginId": {
          "type": "string",
          "format": "uint64"
        },
        "tenantId": {
          "type": "string",
          "format": "uint64"
        },
        "contactId": {
          "type": "string",
          "format": "uint64"
        },
        "generation": {
          "type": "string",
          "format": "int64"
        },
        "lifecycle": {
          "$ref": "#/definitions/apiStorageLifecycle"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "commonapiLabel": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "commonapiPhoneNumber": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "phonenumber": {
          "type": "string"
        },
        "primary": {
          "type": "boolean"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonapiLabel"
          }
        },
        "verified": {
          "type": "boolean"
        },
        "loginId": {
          "type": "string",
          "format": "uint64"
        },
        "tenantId": {
          "type": "string",
          "format": "uint64"
        },
        "contactId": {
          "type": "string",
          "format": "uint64"
        },
        "generation": {
          "type": "string",
          "format": "int64"
        },
        "lifecycle": {
          "$ref": "#/definitions/apiStorageLifecycle"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1AppPackage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "application": {
          "$ref": "#/definitions/v1Application"
        },
        "tenant": {
          "$ref": "#/definitions/v1Tenant"
        },
        "delegation": {
          "$ref": "#/definitions/v1Tenant"
        },
        "generation": {
          "type": "string",
          "format": "int64"
        },
        "lifecycle": {
          "$ref": "#/definitions/apiStorageLifecycle"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonapiLabel"
          }
        },
        "design": {
          "type": "string"
        }
      }
    },
    "v1AppPackages": {
      "type": "object",
      "properties": {
        "packages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AppPackage"
          }
        }
      }
    },
    "v1AppURI": {
      "type": "object",
      "properties": {
        "app_id": {
          "type": "string",
          "format": "uint64"
        },
        "uri": {
          "type": "string"
        }
      }
    },
    "v1Application": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "name": {
          "type": "string"
        },
        "shortcut": {
          "type": "string"
        },
        "lifecycle": {
          "$ref": "#/definitions/apiStorageLifecycle"
        },
        "generation": {
          "type": "string",
          "format": "int64"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonapiLabel"
          }
        },
        "appExt": {
          "$ref": "#/definitions/v1ApplicationExt"
        }
      }
    },
    "v1ApplicationExt": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "openmode": {
          "$ref": "#/definitions/v1OpenMode"
        },
        "iconname": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1ApplicationType"
        },
        "lifecycle": {
          "$ref": "#/definitions/apiStorageLifecycle"
        },
        "generation": {
          "type": "string",
          "format": "int64"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonapiLabel"
          }
        },
        "applicationId": {
          "type": "string",
          "format": "uint64"
        },
        "second_factor_ip_whitelist": {
          "$ref": "#/definitions/v1IPFilter"
        },
        "redirect_uris": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "clientType": {
          "$ref": "#/definitions/v1ClientType"
        },
        "grouptitle": {
          "type": "string"
        },
        "iconsubname": {
          "type": "string"
        }
      }
    },
    "v1ApplicationType": {
      "type": "string",
      "enum": [
        "NONE_TYPE",
        "WEBAPP",
        "TECHNICAL_SVC",
        "UNTECHNICAL_SVC"
      ],
      "default": "NONE_TYPE"
    },
    "v1Applications": {
      "type": "object",
      "properties": {
        "applications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Application"
          }
        }
      }
    },
    "v1Authorizations": {
      "type": "object",
      "properties": {
        "authorizations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/abraxaspermissionapiv1Authorization"
          }
        }
      }
    },
    "v1AuthorizedUserFilter": {
      "type": "object",
      "properties": {
        "tenantId": {
          "type": "string",
          "format": "uint64"
        },
        "applicationId": {
          "type": "string",
          "format": "uint64"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonapiLabel"
          }
        }
      }
    },
    "v1ClientType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "PUBLIC",
        "CONFIDENTIAL"
      ],
      "default": "UNSPECIFIED",
      "description": " - UNSPECIFIED: Clients which don't have a clientType specified (yet).\r\nThese are apps created before this feature was available\r\nor which are created by clients using an old api definition.\n - PUBLIC: Public clients are clients which cannot keep a secret private (eg. SPA's or native mobile applications).\n - CONFIDENTIAL: Confidential clients are clients which can keep a secret private (eg. server rendered web applications)."
    },
    "v1DisplayUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "loginid": {
          "type": "string",
          "format": "uint64"
        },
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "servicename": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "lifecycle": {
          "$ref": "#/definitions/apiStorageLifecycle"
        },
        "primaryMail": {
          "type": "string"
        }
      }
    },
    "v1DisplayUsers": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1DisplayUser"
          }
        }
      }
    },
    "v1Gender": {
      "type": "string",
      "enum": [
        "GENDER_UNKNOWN",
        "FEMALE",
        "MALE"
      ],
      "default": "GENDER_UNKNOWN"
    },
    "v1IPFilter": {
      "type": "object",
      "properties": {
        "allowed_ips": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allowed_countries": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1LabelsFilter": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonapiLabel"
          }
        }
      }
    },
    "v1LoginIds": {
      "type": "object",
      "properties": {
        "loginIds": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uint64"
          }
        }
      }
    },
    "v1MappingID": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "v1OpenMode": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "generation": {
          "type": "string",
          "format": "int64"
        },
        "lifecycle": {
          "$ref": "#/definitions/apiStorageLifecycle"
        }
      }
    },
    "v1OpenModes": {
      "type": "object",
      "properties": {
        "openMode": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1OpenMode"
          }
        }
      }
    },
    "v1PasswordState": {
      "type": "string",
      "enum": [
        "UNDEFINED",
        "INITIAL",
        "ACTIVE"
      ],
      "default": "UNDEFINED"
    },
    "v1Tenant": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "name": {
          "type": "string"
        },
        "generation": {
          "type": "string",
          "format": "int64"
        },
        "lifecycle": {
          "$ref": "#/definitions/apiStorageLifecycle"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonapiLabel"
          }
        },
        "tenantExt": {
          "$ref": "#/definitions/v1TenantExt"
        },
        "tenantId": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1TenantExt": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "bfs": {
          "type": "string"
        },
        "generation": {
          "type": "string",
          "format": "int64"
        },
        "lifecycle": {
          "$ref": "#/definitions/apiStorageLifecycle"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonapiLabel"
          }
        },
        "tenantId": {
          "type": "string",
          "format": "uint64"
        },
        "origin": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "accountmanagers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time"
        },
        "mappingIDs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MappingID"
          }
        },
        "displayName": {
          "type": "string"
        },
        "businessPartnerNr": {
          "type": "string"
        }
      }
    },
    "v1Tenants": {
      "type": "object",
      "properties": {
        "tenants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Tenant"
          }
        }
      }
    },
    "v1User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "loginid": {
          "type": "string",
          "format": "uint64"
        },
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "servicename": {
          "type": "string"
        },
        "generation": {
          "type": "string",
          "format": "int64"
        },
        "emails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiv1Email"
          }
        },
        "phonenumbers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiv1PhoneNumber"
          }
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonapiLabel"
          }
        },
        "lifecycle": {
          "$ref": "#/definitions/apiStorageLifecycle"
        },
        "type": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "externalIdps": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time"
        },
        "origin": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "gender": {
          "$ref": "#/definitions/v1Gender"
        },
        "resourceowner": {
          "type": "string"
        },
        "passwordState": {
          "$ref": "#/definitions/v1PasswordState"
        },
        "resource_owner_tenant_id": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "v1UserFilter": {
      "type": "object",
      "properties": {
        "loginid": {
          "type": "string",
          "format": "uint64"
        },
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "servicename": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "includeDeleted": {
          "type": "boolean"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time"
        },
        "lifecycles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiStorageLifecycle"
          }
        },
        "origin": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "loginids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uint64"
          }
        },
        "externalid": {
          "type": "string"
        }
      }
    },
    "v1Users": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1User"
          }
        }
      }
    },
    "v3ChangeObject": {
      "type": "object",
      "properties": {
        "changeDate": {
          "type": "string",
          "format": "date-time"
        },
        "generation": {
          "type": "string",
          "format": "int64"
        },
        "modifier": {
          "type": "string"
        },
        "attribut": {
          "type": "string"
        },
        "new": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "old": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "objecttype": {
          "type": "string"
        }
      }
    },
    "v3ChangeObjects": {
      "type": "object",
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3ChangeObject"
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "Internal API Getting-Started Documentation (Confluence)",
    "url": "https://confluence.abraxas-tools.ch/confluence/pages/viewpage.action?pageId=176725339"
  }
}