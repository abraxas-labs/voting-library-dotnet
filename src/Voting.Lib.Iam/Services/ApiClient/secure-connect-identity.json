{
  "swagger": "2.0",
  "info": {
    "title": "Identity Service of SECURE Connect 2",
    "version": "1.0",
    "contact": {
      "name": "Cloud Platform Services",
      "url": "https://confluence.abraxas-tools.ch/confluence/display/IAM"
    }
  },
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json",
    "application/grpc"
  ],
  "produces": [
    "application/json",
    "application/grpc"
  ],
  "paths": {
    "/2fa/providers": {
      "get": {
        "summary": "Returns available 2fa providers",
        "operationId": "IdentityService_GetSecondFactorProviders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SecondFactorProviders"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "Second Factor"
        ]
      }
    },
    "/contactUsers": {
      "get": {
        "summary": "Returns full-users with contacts (with optional filters)",
        "description": "Method returns *FullUser* models containing all values of the user. In addition, the method adds all contact-values to each user.\n\n*Important:** this endpoint is not performant and is deprecated. It may no longer be used.It was implemented for explicit use cases and not for general usage.",
        "operationId": "IdentityService_GetUsersWithContact",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UsersWithContact"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "loginid",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "firstname",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastname",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "servicename",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "username",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "lastModified",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "lifecycles",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "STATELESS",
                "ARCHIVED",
                "DELETED",
                "ACTIVE",
                "INACTIVE"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "origin",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "loginids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uint64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "externalid",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users - get / search / filter"
        ],
        "deprecated": true
      }
    },
    "/contacts": {
      "get": {
        "summary": "Returns contacts (with optional filters)",
        "operationId": "IdentityService_GetContacts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Contacts"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "loginid",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "tenantid",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastModified",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "lifecycles",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "STATELESS",
                "ARCHIVED",
                "DELETED",
                "ACTIVE",
                "INACTIVE"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "origin",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "loginIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uint64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Contacts"
        ],
        "deprecated": true
      }
    },
    "/fullusers": {
      "get": {
        "summary": "Returns full-users (with optional filters)",
        "description": "Method returns *FullUser* models containing all values of the user.",
        "operationId": "IdentityService_GetFullUserList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Users"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "loginid",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "firstname",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastname",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "servicename",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "username",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "lastModified",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "lifecycles",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "STATELESS",
                "ARCHIVED",
                "DELETED",
                "ACTIVE",
                "INACTIVE"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "origin",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "loginids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uint64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "externalid",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users - get / search / filter"
        ]
      }
    },
    "/healthz": {
      "get": {
        "operationId": "IdentityService_Healthz",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiReturnMessage"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "Health and Readiness"
        ]
      }
    },
    "/logins": {
      "put": {
        "summary": "Updates a login (without user)",
        "description": "Method validates all fields and updates the existing login",
        "operationId": "IdentityService_UpdateLogin",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Login"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1Login"
            }
          }
        ],
        "tags": [
          "Login"
        ]
      }
    },
    "/logins/externalid/{id}": {
      "get": {
        "summary": "Returns login by external-id",
        "operationId": "IdentityService_GetLoginByExternalIdpId",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Login"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Login"
        ]
      }
    },
    "/logins/me/2fa": {
      "delete": {
        "summary": "Delete 2fa for authenticated user (me)",
        "description": "Method deletes the 2FA from the **authenticated user** and the provided provider or for all providers if no provider is specified.\n\n***\n\n**Verify existing 2FA first**\nFor individual 2FA providers, the existing 2FA must be verified before deletion.\n\n**Prevent account downgrade**\nIn specific SECURE Connect environments, the deletion of last 2FA is forbidden (preventing account downgrade).\nIn this case, the method returns an error *secondFactorDowngradeNotAllowed* while trying to delete the last 2FA.",
        "operationId": "IdentityService_DeleteSecondFactorMe2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "loginid",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "provider",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "message",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "passwordLess",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "designName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Second Factor"
        ]
      },
      "post": {
        "summary": "Initiates a 2FA for authenticated user (me)",
        "description": "Method initiates a second factor for the **authenticated user** and the provided provider.\n***\n\n**Verification**\nTo create a verified 2FA (*verified=true*), the authenticated user needs some special permissions (roles).\nOtherwise all providers require verification with the */verify* endpoints.\n\n**Recovery Code**\nIf it's the first added 2fa and it is added as verified, a *recovery_code* will be generated and returned.",
        "operationId": "IdentityService_CreateSecondFactorMe",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateSecondFactorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateSecondFactorRequest"
            }
          }
        ],
        "tags": [
          "Second Factor"
        ]
      }
    },
    "/logins/me/2fa/request": {
      "post": {
        "summary": "Requests a 2fa for authenticated user (me)",
        "description": "If a provider is specified, this provider is the preverence,if the provider is not found or not configured the first configured provider with the highest priority will be used.\nThe used provider can be found in the response.",
        "operationId": "IdentityService_RequestSecondFactor",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RequestSecondFactorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SecondFactorProviderItem"
            }
          }
        ],
        "tags": [
          "Second Factor"
        ]
      }
    },
    "/logins/me/2fa/status": {
      "get": {
        "summary": "2FA status of authenticated user (me)",
        "description": "Method returns the 2fa status of the **authenticated user** (*loginid* request-parameter is not required and will be ignored).",
        "operationId": "IdentityService_SecondFactorStatusMe",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SecondFactorStatuses"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "loginid",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "provider_status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN",
              "ADDED_NOT_VERIFIED",
              "READY"
            ],
            "default": "UNKNOWN"
          },
          {
            "name": "passwordLess",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Second Factor"
        ]
      }
    },
    "/logins/me/2fa/verify": {
      "post": {
        "summary": "Verify a 2fa-request for authenticated user (me)",
        "description": "If a provider is specified, this provider is the preverence, if the provider is not found or not configured the first configured provider with the highest priority will be used for verification.\n\n*Recovery Code*\nIf the provider is *recovery_code* and the code is correct, all 2fa's of the user get deleted.",
        "operationId": "IdentityService_VerifySecondFactor",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1VerifySecondFactorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1VerifySecondFactorRequest"
            }
          }
        ],
        "tags": [
          "Second Factor"
        ]
      }
    },
    "/logins/me/2fa/{provider}": {
      "delete": {
        "summary": "Delete 2fa for authenticated user (me)",
        "description": "Method deletes the 2FA from the **authenticated user** and the provided provider or for all providers if no provider is specified.\n\n***\n\n**Verify existing 2FA first**\nFor individual 2FA providers, the existing 2FA must be verified before deletion.\n\n**Prevent account downgrade**\nIn specific SECURE Connect environments, the deletion of last 2FA is forbidden (preventing account downgrade).\nIn this case, the method returns an error *secondFactorDowngradeNotAllowed* while trying to delete the last 2FA.",
        "operationId": "IdentityService_DeleteSecondFactorMe",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "loginid",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "message",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "passwordLess",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "designName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Second Factor"
        ]
      }
    },
    "/logins/resetpw": {
      "post": {
        "summary": "Reset password",
        "description": "Method to reset the password (only possible with a valid reset-code)",
        "operationId": "IdentityService_ResetPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PasswordReset"
            }
          }
        ],
        "tags": [
          "Password"
        ]
      }
    },
    "/logins/resetpw/request": {
      "post": {
        "summary": "Request password reset (over email)",
        "description": "Method sends a password-reset link over e-mail.\nMethod returns always OK unless a technical error occurred (wether the user is found or not =\u003e OK is returned)",
        "operationId": "IdentityService_RequestPasswordReset",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1Username"
            }
          }
        ],
        "tags": [
          "Password"
        ]
      }
    },
    "/logins/resetpw/request2fa": {
      "post": {
        "summary": "Request password reset (over 2fa)",
        "description": "Method sends a nevis-push-message to verify/start the password-reset flow.\nMethod returns always OK unless a technical error occurred (wether the user is found or not =\u003e OK is returned)",
        "operationId": "IdentityService_RequestPasswordReset2fa",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RequestPasswordReset2faResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RequestPasswordReset2faRequest"
            }
          }
        ],
        "tags": [
          "Password"
        ]
      }
    },
    "/logins/resetpw/verify2fa": {
      "post": {
        "summary": "Verify password reset (over 2fa)",
        "description": "Method verifies if the 2fa-message for pw-reset was successfull.",
        "operationId": "IdentityService_VerifyPasswordReset2fa",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1VerifyPasswordReset2faResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1VerifyPasswordReset2faRequest"
            }
          }
        ],
        "tags": [
          "Password"
        ]
      }
    },
    "/logins/username/{username}": {
      "get": {
        "summary": "Returns a login by username",
        "operationId": "IdentityService_GetLoginByUsername",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Login"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Login"
        ]
      }
    },
    "/logins/{id}": {
      "get": {
        "summary": "Returns login by loginid",
        "operationId": "IdentityService_GetLoginById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Login"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Login"
        ]
      }
    },
    "/logins/{id}/history": {
      "get": {
        "summary": "Get history entries for login (by LoginId)",
        "description": "Method loads the history-entries for the login.",
        "operationId": "IdentityService_GetLoginHistory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3ChangeObjects"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "History"
        ]
      }
    },
    "/logins/{loginid}/2fa": {
      "delete": {
        "summary": "Delete 2fa for user",
        "description": "Method deletes the 2FA the provided user and provider or for all providers if no provider is specified.\n\n***\n\n**Verify existing 2FA first**\nFor individual 2FA providers, the existing 2FA must be verified before deletion.\n\n**Prevent account downgrade**\nIn specific SECURE Connect environments, the deletion of last 2FA is forbidden (preventing account downgrade).\nIn this case, the method returns an error *secondFactorDowngradeNotAllowed* while trying to delete the last 2FA.",
        "operationId": "IdentityService_DeleteSecondFactor2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "loginid",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "provider",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "message",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "passwordLess",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "designName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Second Factor"
        ]
      },
      "post": {
        "summary": "Initiates a 2FA for a user",
        "description": "Method initiates a second factor for the provided user and provider.\n***\n\n**Verification**\nTo create a verified 2FA (*verified=true*), the authenticated user needs some special permissions (roles).\nOtherwise all providers require verification with the */verify* endpoints.\n\n**Recovery Code**\nIf it's the first added 2fa and it is added as verified, a *recovery_code* will be generated and returned.",
        "operationId": "IdentityService_CreateSecondFactor",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateSecondFactorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "loginid",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateSecondFactorRequest"
            }
          }
        ],
        "tags": [
          "Second Factor"
        ]
      },
      "put": {
        "summary": "Updates or creates the 2FA (sms only / special-role required)",
        "description": "Method sets the SMS-2FA as verified without verifying the information with the end user.\n**Only works for provider SMS and authenticated user needs a special permission (role).**",
        "operationId": "IdentityService_UpdateOrCreateSecondFactor",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateSecondFactorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "loginid",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateSecondFactorRequest"
            }
          }
        ],
        "tags": [
          "Second Factor"
        ]
      }
    },
    "/logins/{loginid}/2fa/request": {
      "post": {
        "summary": "Requests a 2fa for a user",
        "description": "If a provider is specified, this provider is the preverence,if the provider is not found or not configured the first configured provider with the highest priority will be used.\nThe used provider can be found in the response.",
        "operationId": "IdentityService_RequestSecondFactorByLoginId",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RequestSecondFactorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "loginid",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SecondFactorProviderItem"
            }
          }
        ],
        "tags": [
          "Second Factor"
        ]
      }
    },
    "/logins/{loginid}/2fa/status": {
      "get": {
        "summary": "2FA status of user",
        "operationId": "IdentityService_SecondFactorStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SecondFactorStatuses"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "loginid",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "provider_status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN",
              "ADDED_NOT_VERIFIED",
              "READY"
            ],
            "default": "UNKNOWN"
          },
          {
            "name": "passwordLess",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Second Factor"
        ]
      }
    },
    "/logins/{loginid}/2fa/verify": {
      "post": {
        "summary": "Verify a 2fa-request for a user",
        "description": "If a provider is specified, this provider is the preverence, if the provider is not found or not configured the first configured provider with the highest priority will be used for verification.\n\n*Recovery Code*\nIf the provider is *recovery_code* and the code is correct, all 2fa's of the user get deleted.",
        "operationId": "IdentityService_VerifySecondFactorByLoginId",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1VerifySecondFactorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "loginid",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1VerifySecondFactorRequest"
            }
          }
        ],
        "tags": [
          "Second Factor"
        ]
      }
    },
    "/logins/{loginid}/2fa/{provider}": {
      "delete": {
        "summary": "Delete 2fa for user",
        "description": "Method deletes the 2FA the provided user and provider or for all providers if no provider is specified.\n\n***\n\n**Verify existing 2FA first**\nFor individual 2FA providers, the existing 2FA must be verified before deletion.\n\n**Prevent account downgrade**\nIn specific SECURE Connect environments, the deletion of last 2FA is forbidden (preventing account downgrade).\nIn this case, the method returns an error *secondFactorDowngradeNotAllowed* while trying to delete the last 2FA.",
        "operationId": "IdentityService_DeleteSecondFactor",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "loginid",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "message",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "passwordLess",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "designName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Second Factor"
        ]
      }
    },
    "/magiclink": {
      "get": {
        "summary": "Get user by magic-link",
        "description": "Get user by values from the magic-link.\nThe method has various security mechanisms to check the link, validity and origin.",
        "operationId": "IdentityService_GetMagicLinkUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1User"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Magic Link"
        ]
      },
      "post": {
        "summary": "Creates a magic-link",
        "description": "Method creates a magic link with which the recipient can log in directly without entering a user name or similar.\nOnly users with high level of access (special roles) are allowed to use this endpoint.",
        "operationId": "IdentityService_CreateMagicLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MagicLinkResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1MagicLink"
            }
          }
        ],
        "tags": [
          "Magic Link"
        ]
      }
    },
    "/me/changepw": {
      "post": {
        "summary": "Change password of authenticated user (me)",
        "description": "Authenticated user is only allowed to change his own password over this endpoint.\nMethod validates old and new password against the currently valid rules.",
        "operationId": "IdentityService_ChangeMyPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiReturnMessage"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PasswordSetter"
            }
          }
        ],
        "tags": [
          "Password"
        ]
      }
    },
    "/overwritepw": {
      "post": {
        "summary": "Overwrite password",
        "description": "Method overwrites the password of the user **without validating the old/existing one**.\nThis method can only be used by users with high privilege roles.",
        "operationId": "IdentityService_OverwritePassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiReturnMessage"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PasswordSetter"
            }
          }
        ],
        "tags": [
          "Password"
        ]
      }
    },
    "/ready": {
      "get": {
        "operationId": "IdentityService_Ready",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiReturnMessage"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "Health and Readiness"
        ]
      }
    },
    "/userlogin": {
      "post": {
        "summary": "Create a user with login",
        "description": "Method validates the input and creates a user and a login.\nIf no passwords is set, the method creates the login with a random-password.\nThis method can only be used by users with high privileged roles.\n",
        "operationId": "IdentityService_CreateUserWithLogin",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1User"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1Userlogin"
            }
          },
          {
            "name": "x-vrsg-tenant",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User and Login"
        ]
      }
    },
    "/userlogin/init": {
      "post": {
        "summary": "Initialize user with login (over email)",
        "description": "Method validates the input and initializes a user and a login.\nA random password is set and an init-email is sent with a password-reset link.\nThis method can only be used by users with high privileged roles.\n",
        "operationId": "IdentityService_InitUserLoginWithEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1User"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UserloginWithMail"
            }
          },
          {
            "name": "x-vrsg-tenant",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User and Login"
        ]
      }
    },
    "/users": {
      "get": {
        "summary": "Returns display-users (with optional filters)",
        "description": "Method returns *DisplayUser* models with a minimum set of values.",
        "operationId": "IdentityService_GetUserList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DisplayUsers"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "loginid",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "firstname",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastname",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "servicename",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "username",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "lastModified",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "lifecycles",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "STATELESS",
                "ARCHIVED",
                "DELETED",
                "ACTIVE",
                "INACTIVE"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "origin",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "loginids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uint64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "externalid",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users - get / search / filter"
        ]
      },
      "post": {
        "summary": "Creates a user (without login)",
        "description": "Method validates all fields and creates a new user (**but no login**).\nThis method can only be used by users with high privileged roles.\n***\n\n**Existing Login Required**\nThe *loginid* must be a valid id from an existing login, otherwise the user is not valid.\nThis endpoint creates a user and references it to the existing login.",
        "operationId": "IdentityService_CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1User"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1User"
            }
          }
        ],
        "tags": [
          "User"
        ]
      }
    },
    "/users/display/{id}": {
      "get": {
        "summary": "Returns display-user by LoginId (Login-PK)",
        "operationId": "IdentityService_GetDisplayUserByLoginId",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DisplayUser"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Users - get / search / filter"
        ]
      }
    },
    "/users/emails/verify": {
      "post": {
        "summary": "Verify email",
        "description": "The method verifies the code and sets the email to officially verified.",
        "operationId": "IdentityService_VerifyUserEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiv1Email"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1EmailVerificationCode"
            }
          }
        ],
        "tags": [
          "User E-Mails"
        ]
      }
    },
    "/users/externalid/{id}": {
      "get": {
        "summary": "Returns full-user by External-Id",
        "operationId": "IdentityService_GetUserByExternalIdpId",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1User"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Users - get / search / filter"
        ]
      }
    },
    "/users/loginid/{id}": {
      "get": {
        "summary": "Returns full-user by LoginId (Login-PK)",
        "operationId": "IdentityService_GetUserByLoginId",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1User"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Users - get / search / filter"
        ]
      }
    },
    "/users/userPw": {
      "post": {
        "summary": "Returns full-user by Username and Password",
        "description": "Method gets the user by username and compares/validates the given password.",
        "operationId": "IdentityService_GetUserByUsernamePassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1User"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UserPassword"
            }
          }
        ],
        "tags": [
          "Users - get / search / filter"
        ]
      }
    },
    "/users/username/{username}": {
      "get": {
        "summary": "Returns full-user by Username",
        "operationId": "IdentityService_GetUserByUsername",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1User"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Users - get / search / filter"
        ]
      }
    },
    "/users/{idOne}/contacts/{idTwo}": {
      "get": {
        "summary": "Get specific contact from specific user (by loginid)",
        "operationId": "IdentityService_GetUserContact",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiv1Contact"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "idOne",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "idTwo",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Contacts"
        ],
        "deprecated": true
      },
      "delete": {
        "summary": "Deletes a contact",
        "operationId": "IdentityService_DeleteUserContact",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "idOne",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "idTwo",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Contacts"
        ],
        "deprecated": true
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Returns full-user by Id (User-PK)",
        "operationId": "IdentityService_GetUserById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1User"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Users - get / search / filter"
        ]
      },
      "delete": {
        "summary": "Deletes a user (with login)",
        "description": "Method deletes the user and the corresponding login.\nThis method can only be used by users with high privileged roles.\n",
        "operationId": "IdentityService_DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiReturnMessage"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "User and Login"
        ]
      }
    },
    "/users/{id}/history": {
      "get": {
        "summary": "Get history entries for user (by LoginId)",
        "description": "Method loads the history-entries for the user (**by loginid**).",
        "operationId": "IdentityService_GetUserHistory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v3ChangeObjects"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "History"
        ]
      }
    },
    "/users/{id}/labels": {
      "get": {
        "summary": "Returns the labels of a user by LoginId",
        "description": "Method gets the user by his *LoginId* and returns just the labels.\nThe parameter *includeDeleted* controls whether users marked as deleted are included (not regarding labels).",
        "operationId": "IdentityService_GetUserLabels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLabels"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "User Labels"
        ]
      }
    },
    "/users/{loginId}/contacts": {
      "post": {
        "summary": "Adds a contact to the user (by loginid)",
        "operationId": "IdentityService_AddUserContact",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiv1Contact"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "loginId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiv1Contact"
            }
          }
        ],
        "tags": [
          "Contacts"
        ],
        "deprecated": true
      }
    },
    "/users/{loginId}/contacts/{id}": {
      "put": {
        "summary": "Updates a given contact",
        "operationId": "IdentityService_UpdateUserContact",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiv1Contact"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "loginId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiv1Contact"
            }
          }
        ],
        "tags": [
          "Contacts"
        ],
        "deprecated": true
      }
    },
    "/users/{login_id}/emails": {
      "post": {
        "summary": "Adds an email to user",
        "description": "Method accepts only valid e-mail values (format).\n***\n\n**Primary**\nOnly one email can be set as primary. This cannot be set in the add-method (*primary=true* will be ignored). A new email will always be added as none-primary (except it is added as *verified=true*). The specific endpoint */primary* must be used for this.\n\n**Verification**\nTo add a verified email (*verified=true*), the authenticated user needs some special permissions (roles).\nOtherwise the method sends an email with a code for verification with the */verify* endpoint.\n\n**Max E-Mails**\nIn specific SECURE Connect environments, the number of total emails is limited.\nIn this case and the limit is reached, the method returns an error *userMaxEmailsReached*.",
        "operationId": "IdentityService_AddUserEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiv1Email"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "login_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UserEmail"
            }
          }
        ],
        "tags": [
          "User E-Mails"
        ]
      }
    },
    "/users/{login_id}/emails/primary": {
      "post": {
        "summary": "Set email as primary",
        "description": "If another than the specified email is already marked as primary, it will no longer be primary after a successful call (primary email has changed).\nOnly a verified email can be marked as primary.\nIf the specified email is already marked as primary, the method returns an error *errorEmailAlreadyPrimary*.\nThe parameters *verified* and *type* are getting ignored for this call.",
        "operationId": "IdentityService_SetPrimaryUserEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiv1Email"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "login_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UserEmail"
            }
          }
        ],
        "tags": [
          "User E-Mails"
        ]
      }
    },
    "/users/{login_id}/emails/resendverification": {
      "post": {
        "summary": "Resend email verification",
        "description": "If the given email is not verified yet, the method re-sends a code over email.\nThe parameters *verified* and *type* are getting ignored for this call.",
        "operationId": "IdentityService_ResendUserEmailVerification",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "login_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UserEmail"
            }
          }
        ],
        "tags": [
          "User E-Mails"
        ]
      }
    },
    "/users/{login_id}/emails/{email}": {
      "delete": {
        "summary": "Delete an email from a user",
        "description": "The parameters *verified* and *type* are getting ignored for this call.\n***\n\n**Primary**\nEmails marked as primary cannot be deleted. Method will return an error *cannotDeletePrimaryEmail*.",
        "operationId": "IdentityService_DeleteUserEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "login_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "email",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "verified",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "User E-Mails"
        ]
      }
    },
    "/users/{login_id}/phones": {
      "post": {
        "summary": "Adds a phone-number to user",
        "description": "Method normalizes the phone-number and adds it to the user.\n***\n\n**Primary**\nOnly one phone-number can be set as primary. This cannot be set in the add-method (*primary=true* will be ignored). A new phone will always be added as none-primary. The specific endpoint */primary* must be used for this.\n\n**Verification**\nTo add a verified phone (*verified=true*), the authenticated user needs some special permissions (roles).\nOtherwise the method sends an SMS (or voice-call if SMS fails) for verification with the */verify* endpoint.\n\n**Max Phone Numbers**\nIn specific SECURE Connect environments, the number of total phone-numbers is limited.\nIn this case and the limit is reached, the method returns an error *userMaxPhonenumbersReached*.",
        "operationId": "IdentityService_AddUserPhoneNumber",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiv1PhoneNumber"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "login_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UserPhoneNumber"
            }
          }
        ],
        "tags": [
          "User Phones"
        ]
      }
    },
    "/users/{login_id}/phones/primary": {
      "post": {
        "summary": "Set phone-number as primary",
        "description": "The number to set as primary will be normalized before comparing.\nIf a number was already marked as primary, it will no longer be primary after a successful call.\nThe parameters *verified* and *type* are getting ignored for this call.",
        "operationId": "IdentityService_SetPrimaryUserPhoneNumber",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiv1PhoneNumber"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "login_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UserPhoneNumber"
            }
          }
        ],
        "tags": [
          "User Phones"
        ]
      }
    },
    "/users/{login_id}/phones/resendverification": {
      "post": {
        "summary": "Resend phone-number verification",
        "description": "If the given phone-number is not verified yet, the method re-sends an SMS (or a voice-call if SMS fails).\nThe parameters *verified* and *type* are getting ignored for this call.",
        "operationId": "IdentityService_ResendUserPhoneNumberVerification",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "login_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UserPhoneNumber"
            }
          }
        ],
        "tags": [
          "User Phones"
        ]
      }
    },
    "/users/{login_id}/phones/verify": {
      "post": {
        "summary": "Verify phone-number",
        "description": "The method verifies whether the code for the specified number is correct and sets the number to officially verified.",
        "operationId": "IdentityService_VerifyUserPhoneNumber",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiv1PhoneNumber"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "login_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PhoneNumberVerificationCode"
            }
          }
        ],
        "tags": [
          "User Phones"
        ]
      }
    },
    "/users/{login_id}/phones/{phonenumber}": {
      "delete": {
        "summary": "Delete a phone-number from a user",
        "description": "The number to delete will be normalized before comparing.\nThe parameters *verified* and *type* are getting ignored for this call.\n***\n\n**Primary**\nPhone numbers marked as primary cannot be deleted. Method will return an error *cannotDeletePrimayPhone*.",
        "operationId": "IdentityService_DeleteUserPhoneNumber",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "login_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "phonenumber",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "verified",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "User Phones"
        ]
      }
    },
    "/users/{loginid}": {
      "put": {
        "summary": "Updates an existing user (without login)",
        "description": "Method validates all fields and updates the existing user\n***\n\n**Existing Login Required**\nThe *loginid* must be a valid id from an existing login, otherwise the user is not valid.\n\n**E-Mails, Phones and Login-Properties**\nEmails, phones and login-properties are getting ignored and cannot be updated with this method.\nThere are separate and specific endpoints to manipulate those values.\n\n**Resource-Owner-Tenant update**\nTo update the resource-owner-tenant, the user must have special roles.",
        "operationId": "IdentityService_UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1User"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "loginid",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1User"
            }
          },
          {
            "name": "x-vrsg-tenant",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User"
        ]
      }
    },
    "/users/{loginid}/contacts": {
      "get": {
        "summary": "Returns contacts from user (by loginid)",
        "operationId": "IdentityService_GetUserContacts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Contacts"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "loginid",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "tenantid",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastModified",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "lifecycles",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "STATELESS",
                "ARCHIVED",
                "DELETED",
                "ACTIVE",
                "INACTIVE"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "origin",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "loginIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uint64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Contacts"
        ],
        "deprecated": true
      }
    },
    "/users/{loginid}/labels": {
      "put": {
        "summary": "Adds or removes user-labels",
        "description": "Although the entire user model can be sent in the body, only the following properties are absolutely necessary: *loginid*, *labels*. The rest are not relevant for this call.",
        "operationId": "IdentityService_UpdateUserLabels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1User"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "loginid",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1User"
            }
          }
        ],
        "tags": [
          "User Labels"
        ]
      }
    },
    "/validate": {
      "get": {
        "operationId": "IdentityService_Validate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLabels"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "Health and Readiness"
        ]
      }
    }
  },
  "definitions": {
    "apiAddress": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "country": {
          "type": "string"
        },
        "locality": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "primary": {
          "type": "boolean"
        },
        "region": {
          "type": "string"
        },
        "streetAddress": {
          "type": "string"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonapiLabel"
          }
        },
        "loginId": {
          "type": "string",
          "format": "uint64"
        },
        "tenantId": {
          "type": "string",
          "format": "uint64"
        },
        "contactId": {
          "type": "string",
          "format": "uint64"
        },
        "generation": {
          "type": "string",
          "format": "int64"
        },
        "lifecycle": {
          "$ref": "#/definitions/apiStorageLifecycle"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "apiLabels": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonapiLabel"
          }
        }
      }
    },
    "apiReturnMessage": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "apiStorageLifecycle": {
      "type": "string",
      "enum": [
        "STATELESS",
        "ARCHIVED",
        "DELETED",
        "ACTIVE",
        "INACTIVE"
      ],
      "default": "STATELESS"
    },
    "apiv1Contact": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "emails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonapiEmail"
          }
        },
        "phoneNumbers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonapiPhoneNumber"
          }
        },
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiAddress"
          }
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonapiLabel"
          }
        },
        "tenantId": {
          "type": "string",
          "format": "uint64"
        },
        "loginId": {
          "type": "string",
          "format": "uint64"
        },
        "generation": {
          "type": "string",
          "format": "int64"
        },
        "lifecycle": {
          "$ref": "#/definitions/apiStorageLifecycle"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time"
        },
        "origin": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resourceowner": {
          "type": "string"
        },
        "mappingIDs": {
          "$ref": "#/definitions/v1MappingIDs"
        }
      }
    },
    "apiv1Email": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "primary": {
          "type": "boolean"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonapiLabel"
          }
        },
        "verified": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "apiv1PhoneNumber": {
      "type": "object",
      "properties": {
        "phonenumber": {
          "type": "string"
        },
        "primary": {
          "type": "boolean"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonapiLabel"
          }
        },
        "verified": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "phonenumber"
      ]
    },
    "apiv1Type": {
      "type": "string",
      "enum": [
        "MAGIC_EMAIL",
        "MAGIC_SMS",
        "MAGIC_VOICE"
      ],
      "default": "MAGIC_EMAIL"
    },
    "commonapiEmail": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "email": {
          "type": "string",
          "title": "regexp gemaess https://stackoverflow.com/a/14075810 (RFC 5321/5322)"
        },
        "primary": {
          "type": "boolean"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonapiLabel"
          }
        },
        "verified": {
          "type": "boolean"
        },
        "loginId": {
          "type": "string",
          "format": "uint64"
        },
        "tenantId": {
          "type": "string",
          "format": "uint64"
        },
        "contactId": {
          "type": "string",
          "format": "uint64"
        },
        "generation": {
          "type": "string",
          "format": "int64"
        },
        "lifecycle": {
          "$ref": "#/definitions/apiStorageLifecycle"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "commonapiLabel": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "commonapiPhoneNumber": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "phonenumber": {
          "type": "string"
        },
        "primary": {
          "type": "boolean"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonapiLabel"
          }
        },
        "verified": {
          "type": "boolean"
        },
        "loginId": {
          "type": "string",
          "format": "uint64"
        },
        "tenantId": {
          "type": "string",
          "format": "uint64"
        },
        "contactId": {
          "type": "string",
          "format": "uint64"
        },
        "generation": {
          "type": "string",
          "format": "int64"
        },
        "lifecycle": {
          "$ref": "#/definitions/apiStorageLifecycle"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1Contacts": {
      "type": "object",
      "properties": {
        "contacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiv1Contact"
          }
        }
      }
    },
    "v1CreateSecondFactorNevisResponse": {
      "type": "object",
      "properties": {
        "qr": {
          "type": "string"
        },
        "mobileRegistrationLink": {
          "type": "string"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "v1CreateSecondFactorOTPResponse": {
      "type": "object",
      "properties": {
        "secret": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "v1CreateSecondFactorRequest": {
      "type": "object",
      "properties": {
        "provider": {
          "$ref": "#/definitions/v1SecondFactorProvider"
        },
        "phonenumber": {
          "type": "string"
        },
        "loginid": {
          "type": "string",
          "format": "uint64"
        },
        "verified": {
          "type": "boolean"
        },
        "designName": {
          "type": "string"
        }
      }
    },
    "v1CreateSecondFactorResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1SecondFactorProviderStatus"
        },
        "recovery_code": {
          "type": "string"
        },
        "otp": {
          "$ref": "#/definitions/v1CreateSecondFactorOTPResponse"
        },
        "nevis": {
          "$ref": "#/definitions/v1CreateSecondFactorNevisResponse"
        }
      }
    },
    "v1DisplayUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "loginid": {
          "type": "string",
          "format": "uint64"
        },
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "servicename": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "lifecycle": {
          "$ref": "#/definitions/apiStorageLifecycle"
        },
        "primaryMail": {
          "type": "string"
        }
      }
    },
    "v1DisplayUsers": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1DisplayUser"
          }
        }
      }
    },
    "v1EmailVerificationCode": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        }
      },
      "required": [
        "code"
      ]
    },
    "v1Gender": {
      "type": "string",
      "enum": [
        "GENDER_UNKNOWN",
        "FEMALE",
        "MALE"
      ],
      "default": "GENDER_UNKNOWN"
    },
    "v1Login": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string",
          "format": "byte"
        },
        "externalIdps": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "generation": {
          "type": "string",
          "format": "int64"
        },
        "lifecycle": {
          "$ref": "#/definitions/apiStorageLifecycle"
        },
        "passwordState": {
          "$ref": "#/definitions/v1PasswordState"
        }
      }
    },
    "v1MagicLink": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string"
        },
        "loginid": {
          "type": "string",
          "format": "uint64"
        },
        "user": {
          "$ref": "#/definitions/v1MagicLinkUser"
        },
        "ttl": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/apiv1Type"
        },
        "onetime": {
          "type": "boolean"
        },
        "disableNotification": {
          "type": "boolean"
        },
        "magic_link_url": {
          "type": "string"
        }
      },
      "required": [
        "client_id",
        "type"
      ]
    },
    "v1MagicLinkResponse": {
      "type": "object",
      "properties": {
        "loginid": {
          "type": "string",
          "format": "uint64"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "v1MagicLinkUser": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "resource_owner_tenant_id": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "v1MappingIDs": {
      "type": "object",
      "properties": {
        "abx_crm_contact_record_id": {
          "type": "string"
        },
        "vrsg_crm_contact_record_id": {
          "type": "string"
        },
        "abx_crm_contact_id": {
          "type": "string"
        },
        "abx_sap_businespartner_id": {
          "type": "string"
        },
        "vrsg_crm_partner_id": {
          "type": "string"
        }
      }
    },
    "v1NevisRequestResponse": {
      "type": "object",
      "properties": {
        "nevis_action_token_jtis": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "qr": {
          "type": "string"
        },
        "mobileRegistrationLink": {
          "type": "string"
        },
        "visualLinkingContent": {
          "type": "string"
        }
      }
    },
    "v1NevisVerification": {
      "type": "object",
      "properties": {
        "nevis_action_token_jtis": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1PasswordReset": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "newpassword1": {
          "type": "string"
        },
        "newpassword2": {
          "type": "string"
        }
      }
    },
    "v1PasswordSetter": {
      "type": "object",
      "properties": {
        "loginid": {
          "type": "string",
          "format": "uint64"
        },
        "oldpassword": {
          "type": "string"
        },
        "newpassword1": {
          "type": "string"
        },
        "newpassword2": {
          "type": "string"
        }
      }
    },
    "v1PasswordState": {
      "type": "string",
      "enum": [
        "UNDEFINED",
        "INITIAL",
        "ACTIVE"
      ],
      "default": "UNDEFINED"
    },
    "v1PhoneNumberVerificationCode": {
      "type": "object",
      "properties": {
        "login_id": {
          "type": "string",
          "format": "uint64"
        },
        "phonenumber": {
          "type": "string"
        },
        "code": {
          "type": "string"
        }
      },
      "required": [
        "phonenumber, code"
      ]
    },
    "v1RequestPasswordReset2faRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        }
      }
    },
    "v1RequestPasswordReset2faResponse": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "nevis_response": {
          "$ref": "#/definitions/v1NevisRequestResponse"
        }
      }
    },
    "v1RequestSecondFactorResponse": {
      "type": "object",
      "properties": {
        "provider": {
          "$ref": "#/definitions/v1SecondFactorProvider"
        },
        "no_user_input_needed": {
          "type": "boolean"
        },
        "resend_possible": {
          "type": "boolean"
        },
        "code": {
          "type": "string"
        },
        "correlation_code": {
          "type": "string"
        },
        "nevis": {
          "$ref": "#/definitions/v1NevisRequestResponse"
        }
      }
    },
    "v1SecondFactorProvider": {
      "type": "string",
      "enum": [
        "DEFAULT",
        "NONE",
        "RECOVERY_CODE",
        "OTP",
        "SMS",
        "VOICE",
        "NEVIS"
      ],
      "default": "DEFAULT"
    },
    "v1SecondFactorProviderItem": {
      "type": "object",
      "properties": {
        "loginid": {
          "type": "string",
          "format": "uint64"
        },
        "provider": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "passwordLess": {
          "type": "boolean"
        },
        "designName": {
          "type": "string"
        }
      }
    },
    "v1SecondFactorProviderStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "ADDED_NOT_VERIFIED",
        "READY"
      ],
      "default": "UNKNOWN"
    },
    "v1SecondFactorProviders": {
      "type": "object",
      "properties": {
        "providers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1SecondFactorStatus": {
      "type": "object",
      "properties": {
        "provider": {
          "$ref": "#/definitions/v1SecondFactorProvider"
        },
        "status": {
          "$ref": "#/definitions/v1SecondFactorProviderStatus"
        },
        "phonenumber": {
          "type": "string"
        },
        "recovery_code": {
          "type": "string"
        }
      }
    },
    "v1SecondFactorStatuses": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "status": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SecondFactorStatus"
          }
        }
      }
    },
    "v1User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "loginid": {
          "type": "string",
          "format": "uint64"
        },
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "servicename": {
          "type": "string"
        },
        "generation": {
          "type": "string",
          "format": "int64"
        },
        "emails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiv1Email"
          }
        },
        "phonenumbers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiv1PhoneNumber"
          }
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonapiLabel"
          }
        },
        "lifecycle": {
          "$ref": "#/definitions/apiStorageLifecycle"
        },
        "type": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "externalIdps": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time"
        },
        "origin": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "gender": {
          "$ref": "#/definitions/v1Gender"
        },
        "resourceowner": {
          "type": "string"
        },
        "passwordState": {
          "$ref": "#/definitions/v1PasswordState"
        },
        "resource_owner_tenant_id": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "v1UserContact": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1User"
        },
        "contact": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiv1Contact"
          }
        }
      }
    },
    "v1UserEmail": {
      "type": "object",
      "properties": {
        "login_id": {
          "type": "string",
          "format": "uint64"
        },
        "email": {
          "type": "string"
        },
        "verified": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1UserPassword": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "v1UserPhoneNumber": {
      "type": "object",
      "properties": {
        "login_id": {
          "type": "string",
          "format": "uint64"
        },
        "phonenumber": {
          "type": "string"
        },
        "verified": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "phonenumber"
      ]
    },
    "v1Userlogin": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1User"
        },
        "password1": {
          "type": "string"
        },
        "password2": {
          "type": "string"
        }
      }
    },
    "v1UserloginWithMail": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1User"
        },
        "email": {
          "type": "string"
        }
      },
      "required": [
        "user"
      ]
    },
    "v1Username": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "includeDeleted": {
          "type": "boolean"
        }
      }
    },
    "v1Users": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1User"
          }
        }
      }
    },
    "v1UsersWithContact": {
      "type": "object",
      "properties": {
        "userContact": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UserContact"
          }
        }
      }
    },
    "v1VerifyPasswordReset2faRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "jti": {
          "type": "string"
        }
      }
    },
    "v1VerifyPasswordReset2faResponse": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "v1VerifySecondFactorRequest": {
      "type": "object",
      "properties": {
        "provider": {
          "$ref": "#/definitions/v1SecondFactorProvider"
        },
        "code": {
          "type": "string"
        },
        "nevis": {
          "$ref": "#/definitions/v1NevisVerification"
        },
        "loginid": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "v1VerifySecondFactorResponse": {
      "type": "object",
      "properties": {
        "recovery_code": {
          "type": "string"
        }
      }
    },
    "v3ChangeObject": {
      "type": "object",
      "properties": {
        "changeDate": {
          "type": "string",
          "format": "date-time"
        },
        "generation": {
          "type": "string",
          "format": "int64"
        },
        "modifier": {
          "type": "string"
        },
        "attribut": {
          "type": "string"
        },
        "new": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "old": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "objecttype": {
          "type": "string"
        }
      }
    },
    "v3ChangeObjects": {
      "type": "object",
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v3ChangeObject"
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "Internal API Getting-Started Documentation (Confluence)",
    "url": "https://confluence.abraxas-tools.ch/confluence/pages/viewpage.action?pageId=176725339"
  }
}