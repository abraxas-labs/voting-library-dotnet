// (c) Copyright 2022 by Abraxas Informatik AG
// For license information see LICENSE file

using System.Net;
using System.Net.Http;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;
using Voting.Lib.MalwareScanner.Configuration;
using Voting.Lib.MalwareScanner.Services;

namespace Voting.Lib.MalwareScanner.DependencyInjection;

/// <summary>
/// Service collection extensions for malware scanner related things.
/// </summary>
public static class ServiceCollectionExtension
{
    /// <summary>
    /// Adds the DmDoc services to the service collection.
    /// </summary>
    /// <param name="services">The service collection.</param>
    /// <param name="config">Configuration to access the malware scanner.</param>
    /// <returns>Returns the service collection.</returns>
    public static IServiceCollection AddMalwareScanner(this IServiceCollection services, MalwareScannerConfig config)
    {
        services.TryAddScoped<IMalwareScannerService, MalwareScannerService>();
        services.TryAddSingleton(config);

        if (string.IsNullOrEmpty(config.ProxyHostAddress))
        {
            services.AddHttpClient<IMalwareScannerService, MalwareScannerService>(httpClient => httpClient.BaseAddress = config.BaseAddressUri);
        }
        else
        {
            services.AddHttpClient<IMalwareScannerService, MalwareScannerService>(httpClient => httpClient.BaseAddress = config.BaseAddressUri).ConfigurePrimaryHttpMessageHandler(() => new HttpClientHandler
            {
                Proxy = new WebProxy(config.ProxyHostAddress),
                UseProxy = true,
                UseDefaultCredentials = false,
            });
        }

        return services;
    }
}
