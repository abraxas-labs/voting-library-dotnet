// (c) Copyright 2024 by Abraxas Informatik AG
// For license information see LICENSE file

using System;
using System.IO;

namespace Voting.Lib.MalwareScanner.Services;

/// <summary>
/// Implementation for a stream wrapper that prevents the original stream from being disposed.
/// </summary>
public class NonDisposingStreamWrapper : Stream
{
    private readonly Stream _originalStream;

    /// <summary>
    /// Initializes a new instance of the <see cref="NonDisposingStreamWrapper"/> class.
    /// </summary>
    /// <param name="originalStream">The original stream.</param>
    /// <exception cref="ArgumentNullException">If <paramref name="originalStream"/> is null.</exception>
    public NonDisposingStreamWrapper(Stream originalStream)
    {
        _originalStream = originalStream ?? throw new ArgumentNullException(nameof(originalStream));
    }

    /// <inheritdoc/>
    public override bool CanRead => _originalStream.CanRead;

    /// <inheritdoc/>
    public override bool CanSeek => _originalStream.CanSeek;

    /// <inheritdoc/>
    public override bool CanWrite => _originalStream.CanWrite;

    /// <inheritdoc/>
    public override long Length => _originalStream.Length;

    /// <inheritdoc/>
    public override long Position
    {
        get => _originalStream.Position;
        set => _originalStream.Position = value;
    }

    /// <inheritdoc/>
    public override void Flush()
    {
        _originalStream.Flush();
    }

    /// <inheritdoc/>
    public override int Read(byte[] buffer, int offset, int count)
    {
        return _originalStream.Read(buffer, offset, count);
    }

    /// <inheritdoc/>
    public override long Seek(long offset, SeekOrigin origin)
    {
        return _originalStream.Seek(offset, origin);
    }

    /// <inheritdoc/>
    public override void SetLength(long value)
    {
        _originalStream.SetLength(value);
    }

    /// <inheritdoc/>
    public override void Write(byte[] buffer, int offset, int count)
    {
        _originalStream.Write(buffer, offset, count);
    }

    /// <inheritdoc/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Usage", "CA2215:Dispose methods should call base class dispose", Justification = "Intentionally not called.")]
    protected override void Dispose(bool disposing)
    {
        // Do nothing to prevent the original stream from being disposed
    }
}
