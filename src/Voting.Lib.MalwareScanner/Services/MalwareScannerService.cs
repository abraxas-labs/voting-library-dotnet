// (c) Copyright by Abraxas Informatik AG
// For license information see LICENSE file

using System;
using System.IO;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Net.Http.Json;
using System.Net.Mime;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Voting.Lib.MalwareScanner.Configuration;
using Voting.Lib.MalwareScanner.Exceptions;
using Voting.Lib.MalwareScanner.Models.Internal;

namespace Voting.Lib.MalwareScanner.Services;

/// <summary>
/// Implementation of the MalwareScannerService client.
/// </summary>
public class MalwareScannerService : IMalwareScannerService
{
    private readonly HttpClient _httpClient;
    private readonly MalwareScannerConfig _config;
    private readonly ILogger<MalwareScannerService> _logger;

    /// <summary>
    /// Initializes a new instance of the <see cref="MalwareScannerService"/> class.
    /// </summary>
    /// <param name="httpClient">The injected http client.</param>
    /// <param name="config">The malware scanner config.</param>
    /// <param name="logger">The logger.</param>
    public MalwareScannerService(
        HttpClient httpClient,
        MalwareScannerConfig config,
        ILogger<MalwareScannerService> logger)
    {
        _httpClient = httpClient;
        _config = config;
        _logger = logger;
    }

    /// <inheritdoc />
    public async Task<bool> FileIsClean(Stream stream, CancellationToken ct)
    {
        if (IsMalwareScannerDisabled())
        {
            return true;
        }

        var wrapper = new NonDisposingStreamWrapper(stream);
        using var content = new StreamContent(wrapper);
        var response = await CallMalwareScanner(content, ct).ConfigureAwait(false);
        return response.NoMalwareDetected();
    }

    /// <inheritdoc/>
    public async Task EnsureFileIsClean(Stream stream, CancellationToken ct)
    {
        if (IsMalwareScannerDisabled())
        {
            return;
        }

        var wrapper = new NonDisposingStreamWrapper(stream);
        using var content = new StreamContent(wrapper);
        await EnsureFileIsClean(content, ct).ConfigureAwait(false);
    }

    /// <inheritdoc/>
    public async Task EnsureFileIsClean(string content, CancellationToken ct)
    {
        if (IsMalwareScannerDisabled())
        {
            return;
        }

        using var stringContent = new StringContent(content);
        await EnsureFileIsClean(stringContent, ct).ConfigureAwait(false);
    }

    /// <inheritdoc/>
    public async Task EnsureFileIsClean(byte[] content, CancellationToken ct)
    {
        if (IsMalwareScannerDisabled())
        {
            return;
        }

        using var byteContent = new ByteArrayContent(content);
        await EnsureFileIsClean(byteContent, ct).ConfigureAwait(false);
    }

    private async Task EnsureFileIsClean(HttpContent content, CancellationToken ct)
    {
        if (IsMalwareScannerDisabled())
        {
            return;
        }

        var response = await CallMalwareScanner(content, ct).ConfigureAwait(false);
        if (!response.NoMalwareDetected())
        {
            throw new MalwareScannerException(response.GetMalwareDescription());
        }
    }

    private async Task<MalwareScannerResponse> CallMalwareScanner(HttpContent content, CancellationToken ct)
    {
        content.Headers.ContentType = new MediaTypeHeaderValue(MediaTypeNames.Application.Octet);
        HttpResponseMessage responseMessage;
        try
        {
            responseMessage = await _httpClient.PostAsync(string.Empty, content, ct).ConfigureAwait(false);
        }
        catch (Exception e)
        {
            throw new MalwareScannerException(e);
        }

        if (!responseMessage.IsSuccessStatusCode)
        {
            throw new MalwareScannerException($"malware scanner returned status code {responseMessage.StatusCode}");
        }

        var malwareScannerResponseMessage = await GetMalwareScannerResponse(responseMessage, ct).ConfigureAwait(false);

        if (!malwareScannerResponseMessage.ResultIsValid())
        {
            throw new MalwareScannerException("malware scanner returned invalid result");
        }

        return malwareScannerResponseMessage;
    }

    private async Task<MalwareScannerResponse> GetMalwareScannerResponse(HttpResponseMessage responseMessage, CancellationToken ct)
    {
        try
        {
            return await responseMessage.Content.ReadFromJsonAsync<MalwareScannerResponse>(
                        new JsonSerializerOptions(),
                        ct)
                    .ConfigureAwait(false)
                    ?? throw new MalwareScannerException("null reference of MalwareScannerResponse");
        }
        catch (Exception e) { throw new MalwareScannerException(e); }
    }

    private bool IsMalwareScannerDisabled()
    {
        if (_config.IsEnabled)
        {
            return false;
        }

        _logger.LogWarning("Malware scanner is disabled. File was not scanned.");
        return true;
    }
}
