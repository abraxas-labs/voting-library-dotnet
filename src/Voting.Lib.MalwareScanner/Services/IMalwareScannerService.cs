// (c) Copyright 2024 by Abraxas Informatik AG
// For license information see LICENSE file

using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Voting.Lib.MalwareScanner.Exceptions;

namespace Voting.Lib.MalwareScanner.Services;

/// <summary>
/// Interface for the malware scanner service.
/// </summary>
public interface IMalwareScannerService
{
    /// <summary>
    /// Send a strem to an endpoint to scan for malware. Returns true if file is clean.
    /// </summary>
    /// <param name="stream">Stream of The file to check for malware. Be aware to copy stream before assignement to function. With await contentStream.CopyToAsync(scannerStream, ct);
    /// scannerStream.Seek(0, SeekOrigin.Begin).</param>
    /// <param name = "ct" > cancellation token.</param>
    /// <returns>True if no malware detected.
    /// False if malware detected.</returns>
    /// <exception> <see cref="MalwareScannerException"/> exception thrown if the malware scanner not worked as expected.</exception>
    Task<bool> FileIsClean(Stream stream, CancellationToken ct);

    /// <summary>
    /// Send a strem to an endpoint to scan for malware. Should throw exception if file is not clean.
    /// </summary>
    /// <param name="stream">data as stream to check for malware. Be aware to copy stream before assignement to function. With await contentStream.CopyToAsync(scannerStream, ct);
    /// scannerStream.Seek(0, SeekOrigin.Begin).</param>
    /// <param name = "ct" > cancellation token.</param>
    /// <exception> <see cref="MalwareScannerException"/> exception thrown if the malware scanner not worked as expected or detected malware.</exception>
    /// <returns>A <see cref="Task"/> representing the asynchronous operation.</returns>
    Task EnsureFileIsClean(Stream stream, CancellationToken ct);

    /// <summary>
    /// Send string data e.g. json, xml to an endpoint to scan for malware. Should throw exception if file is not clean.
    /// </summary>
    /// <param name="content">data as string in utf-8 Encoding to check for malware.</param>
    /// <param name = "ct" > cancellation token.</param>
    /// <exception> <see cref="MalwareScannerException"/> Thrown if the malware scanner not worked as expected or detected malware.</exception>
    /// <returns>A <see cref="Task"/> representing the asynchronous operation.</returns>
    Task EnsureFileIsClean(string content, CancellationToken ct);
}
