// (c) Copyright by Abraxas Informatik AG
// For license information see LICENSE file

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using Voting.Lib.VotingExports.Exceptions;
using Voting.Lib.VotingExports.Models;
using Voting.Lib.VotingExports.Repository.Ausmittlung;
using Voting.Lib.VotingExports.Repository.Basis;

namespace Voting.Lib.VotingExports.Repository;

/// <summary>
/// Provides access to all defined templates.
/// </summary>
public static class TemplateRepository
{
    private static readonly IReadOnlyCollection<TemplateModel> Templates =
        AusmittlungCsvProportionalElectionTemplates.All
            .Concat(AusmittlungCsvContestTemplates.All)
            .Concat(AusmittlungCsvProportionalElectionUnionTemplates.All)
            .Concat(AusmittlungCsvVoteTemplates.All)
            .Concat(AusmittlungWabstiCTemplates.All)
            .Concat(AusmittlungPdfContestTemplates.All)
            .Concat(AusmittlungPdfVoteTemplates.All)
            .Concat(AusmittlungPdfMajorityElectionTemplates.All)
            .Concat(AusmittlungPdfProportionalElectionTemplates.All)
            .Concat(AusmittlungXmlContestTemplates.All)
            .Concat(AusmittlungXmlVoteTemplates.All)
            .Concat(AusmittlungXmlMajorityElectionTemplates.All)
            .Concat(AusmittlungXmlProportionalElectionTemplates.All)
            .Concat(BasisXmlContestTemplates.All)
            .Concat(BasisXmlMajorityElectionTemplates.All)
            .Concat(BasisXmlProportionalElectionTemplates.All)
            .Concat(BasisXmlVoteTemplates.All)
            .OrderBy(x => x.Key)
            .ToList();

    private static readonly IReadOnlyDictionary<VotingApp, IReadOnlyCollection<TemplateModel>> ByGenerator = GetGrouped(x => x.GeneratedBy);

    private static readonly IReadOnlyDictionary<(VotingApp, EntityType), IReadOnlyCollection<TemplateModel>> ByGeneratorAndEntityType = GetGrouped(x => (x.GeneratedBy, x.EntityType));

    private static readonly IReadOnlyDictionary<string, TemplateModel> ByKey =
        Templates.ToDictionary(x => x.Key);

    static TemplateRepository()
    {
        foreach (var template in Templates)
        {
            template.Validate();
        }
    }

    /// <summary>
    /// Tries to get a template by its key.
    /// </summary>
    /// <param name="key">The key to look up the template for.</param>
    /// <param name="template">The found template, or null if it was not found.</param>
    /// <returns>Whether a template for the key has been found.</returns>
    public static bool TryGetByKey(string key, [MaybeNullWhen(false)] out TemplateModel template)
    {
        if (ByKey.TryGetValue(key, out var t))
        {
            template = t;
            return true;
        }

        template = null;
        return false;
    }

    /// <summary>
    /// Returns a template by its key.
    /// </summary>
    /// <param name="key">The key to look up the template for.</param>
    /// <returns>The found template.</returns>
    /// <exception cref="TemplateNotFoundException">If a template cannot be found.</exception>
    public static TemplateModel GetByKey(string key)
    {
        if (!TryGetByKey(key, out var template))
        {
            throw new TemplateNotFoundException(key);
        }

        return template;
    }

    /// <summary>
    /// Returns all templates which are generated by a specific app.
    /// </summary>
    /// <param name="generatedBy">The app, which generates the report.</param>
    /// <returns>The found templates.</returns>
    public static IReadOnlyCollection<TemplateModel> GetByGenerator(VotingApp generatedBy)
    {
        return ByGenerator.TryGetValue(generatedBy, out var templates)
            ? templates
            : Array.Empty<TemplateModel>();
    }

    /// <summary>
    /// Returns all templates which are generated by a specific app and have a specified entity type.
    /// </summary>
    /// <param name="generatedBy">The app, which generates the report.</param>
    /// <param name="entityType">The entity type.</param>
    /// <returns>The found templates.</returns>
    public static IReadOnlyCollection<TemplateModel> GetByGeneratorAndEntityType(VotingApp generatedBy, EntityType entityType)
    {
        return ByGeneratorAndEntityType.TryGetValue((generatedBy, entityType), out var templates)
            ? templates
            : Array.Empty<TemplateModel>();
    }

    private static IReadOnlyDictionary<TKey, IReadOnlyCollection<TemplateModel>> GetGrouped<TKey>(Func<TemplateModel, TKey> keyExtractor)
        where TKey : notnull
    {
        return Templates
            .GroupBy(keyExtractor)
            .ToDictionary(x => x.Key, x => (IReadOnlyCollection<TemplateModel>)x.OrderBy(y => y.Key).ToList());
    }
}
