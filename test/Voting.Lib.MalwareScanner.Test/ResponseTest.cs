// (c) Copyright 2024 by Abraxas Informatik AG
// For license information see LICENSE file

using System;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using FluentAssertions;
using Microsoft.Extensions.Logging;
using Moq;
using RichardSzalay.MockHttp;
using Voting.Lib.MalwareScanner.Configuration;
using Voting.Lib.MalwareScanner.Exceptions;
using Voting.Lib.MalwareScanner.Services;
using Xunit;

namespace Voting.Lib.MalwareScanner.Test;
public class ResponseTest
{
    private const string Host = "https://test.invalid";
    private const string TestString = "<data><name>voting import</name><version>1.4</version><content>execute programm.exe</content></data>";
    private readonly CancellationToken _ct = CancellationToken.None;

    [Fact]

    public async Task FileIsCleanShouldReturnTrue()
    {
        // arrange
        var httpClient = MockMalwareScannerHttpClient("{\"Result\":\"NONE\"}", HttpStatusCode.OK);
        var logger = new Mock<ILogger<MalwareScannerService>>();
        var config = new MalwareScannerConfig();
        var mss = new MalwareScannerService(httpClient, config, logger.Object);

        // act
        var result = await mss.FileIsClean(await ConvertStringToStreamAsync(TestString).ConfigureAwait(false), _ct).ConfigureAwait(false);

        // assert
        result.Should().Be(true);
    }

    [Fact]

    public async Task FileIsCleanShouldReturnFalse()
    {
        // arrange
        var httpClient = MockMalwareScannerHttpClient("{\"Result\":\"MALWARE\",\"Name\":\"PDF/Eicar-test.a\"}", HttpStatusCode.OK);
        var logger = new Mock<ILogger<MalwareScannerService>>();
        var config = new MalwareScannerConfig();
        var mss = new MalwareScannerService(httpClient, config, logger.Object);

        // act
        var result = await mss.FileIsClean(await ConvertStringToStreamAsync(TestString).ConfigureAwait(false), _ct).ConfigureAwait(false);

        // assert
        result.Should().Be(false);
    }

    [Fact]

    public async Task EnsureFileIsCleanThrowsNoException()
    {
        // arrange
        var httpClient = MockMalwareScannerHttpClient("{\"Result\":\"NONE\"}", HttpStatusCode.OK);
        var logger = new Mock<ILogger<MalwareScannerService>>();
        var config = new MalwareScannerConfig();
        var mss = new MalwareScannerService(httpClient, config, logger.Object);

        // act
        await mss.EnsureFileIsClean(await ConvertStringToStreamAsync(TestString).ConfigureAwait(false), _ct).ConfigureAwait(false);

        // assert no exception
        Assert.True(true); // if the code runs to this line the test was sucessful
    }

    [Fact]

    public async Task EnsureFileIsCleanWithStringThrowsNoException()
    {
        // arrange
        var httpClient = MockMalwareScannerHttpClient("{\"Result\":\"NONE\"}", HttpStatusCode.OK);
        var logger = new Mock<ILogger<MalwareScannerService>>();
        var config = new MalwareScannerConfig();
        var mss = new MalwareScannerService(httpClient, config, logger.Object);

        // act
        await mss.EnsureFileIsClean(TestString, _ct).ConfigureAwait(false);

        // assert no exception
        Assert.True(true); // if the code runs to this line the test was sucessful
    }

    [Fact]

    public async Task EnsureFileIsCleanWithStringThrowsExceptionIfBadReturnState()
    {
        // arrange
        var httpClient = MockMalwareScannerHttpClient("{\"Result\":\"MALWARE\",\"Name\":\"PDF/Eicar-test.a\"}", HttpStatusCode.BadGateway);
        var logger = new Mock<ILogger<MalwareScannerService>>();
        var config = new MalwareScannerConfig();
        var mss = new MalwareScannerService(httpClient, config, logger.Object);

        // act
        Task Act() => mss.EnsureFileIsClean(TestString, _ct);

        // assert
        MalwareScannerException exception = await Assert.ThrowsAsync<MalwareScannerException>(Act).ConfigureAwait(false);
        Assert.Equal("malware scanner returned status code BadGateway", exception.Message);
    }

    [Fact]

    public async Task EnsureFileIsCleanWithStringThrowsExceptionIfMalwareDetected()
    {
        // arrange
        var httpClient = MockMalwareScannerHttpClient("{\"Result\":\"MALWARE\",\"Name\":\"PDF/Eicar-test.a\"}", HttpStatusCode.OK);
        var logger = new Mock<ILogger<MalwareScannerService>>();
        var config = new MalwareScannerConfig();
        var mss = new MalwareScannerService(httpClient, config, logger.Object);

        // act
        Task Act() => mss.EnsureFileIsClean(TestString, _ct);

        // assert
        MalwareScannerException exception = await Assert.ThrowsAsync<MalwareScannerException>(Act).ConfigureAwait(false);
        Assert.Equal("MALWARE - malware detected: PDF/Eicar-test.a", exception.Message);
    }

    [Fact]
    public async Task EnsureFileIsCleanWithStringThrowsExceptionIfInvalidResult()
    {
        // arrange
        var httpClient = MockMalwareScannerHttpClient("{}", HttpStatusCode.OK);
        var logger = new Mock<ILogger<MalwareScannerService>>();
        var config = new MalwareScannerConfig();
        var mss = new MalwareScannerService(httpClient, config, logger.Object);

        // act
        Task Act() => mss.EnsureFileIsClean(TestString, _ct);

        // assert
        MalwareScannerException exception = await Assert.ThrowsAsync<MalwareScannerException>(Act).ConfigureAwait(false);
        Assert.Equal("malware scanner returned invalid result", exception.Message);
    }

    [Fact]
    public async Task EnsureFileIsCleanWithStringThrowsExceptionIfEmptyResponse()
    {
        // arrange
        var httpClient = MockMalwareScannerHttpClient(string.Empty, HttpStatusCode.OK);
        var logger = new Mock<ILogger<MalwareScannerService>>();
        var config = new MalwareScannerConfig();
        var mss = new MalwareScannerService(httpClient, config, logger.Object);

        // act
        Task Act() => mss.EnsureFileIsClean(TestString, _ct);

        // assert
        MalwareScannerException exception = await Assert.ThrowsAsync<MalwareScannerException>(Act).ConfigureAwait(false);
    }

    [Fact]
    public async Task EnsureFileIsCleanWithStringThrowsNoExceptionIfMalwarescanneIsDisabled()
    {
        // arrange
        var httpClient = MockMalwareScannerHttpClient("{\"Result\":\"MALWARE\",\"Name\":\"PDF/Eicar-test.a\"}", HttpStatusCode.OK);
        var logger = new Mock<ILogger<MalwareScannerService>>();
        var config = new MalwareScannerConfig
        {
            IsEnabled = false,
        };
        var mss = new MalwareScannerService(httpClient, config, logger.Object);

        // act
        await mss.EnsureFileIsClean(TestString, _ct).ConfigureAwait(false);

        // assert no exception
        Assert.True(true); // if the code runs to this line the test was sucessful
    }

    [Fact]
    public async Task EnsureFileIsCleanThrowsNoExceptionIfMalwarescanneIsDisabled()
    {
        // arrange
        var httpClient = MockMalwareScannerHttpClient("{\"Result\":\"MALWARE\",\"Name\":\"PDF/Eicar-test.a\"}", HttpStatusCode.OK);
        var logger = new Mock<ILogger<MalwareScannerService>>();
        var config = new MalwareScannerConfig
        {
            IsEnabled = false,
        };
        var mss = new MalwareScannerService(httpClient, config, logger.Object);

        // act
        await mss.EnsureFileIsClean(await ConvertStringToStreamAsync(TestString).ConfigureAwait(false), _ct).ConfigureAwait(false);

        // assert no exception
        Assert.True(true); // if the code runs to this line the test was sucessful
    }

    [Fact]
    public async Task FileIsCleanShouldReturnTrueIfMalwarescanneIsDisabled()
    {
        // arrange
        var httpClient = MockMalwareScannerHttpClient("{\"Result\":\"MALWARE\",\"Name\":\"PDF/Eicar-test.a\"}", HttpStatusCode.OK);
        var logger = new Mock<ILogger<MalwareScannerService>>();
        var config = new MalwareScannerConfig
        {
            IsEnabled = false,
        };
        var mss = new MalwareScannerService(httpClient, config, logger.Object);

        // act
        var result = await mss.FileIsClean(await ConvertStringToStreamAsync(TestString).ConfigureAwait(false), _ct).ConfigureAwait(false);

        // assert
        result.Should().Be(true);
    }

    private HttpClient MockMalwareScannerHttpClient(string responseText, HttpStatusCode statusCode)
    {
        var mockHttp = new MockHttpMessageHandler();
        var response = responseText;
        mockHttp
            .When(Host)
            .Respond(statusCode, "text/json", response);
        return new HttpClient(mockHttp)
        {
            BaseAddress = new Uri(Host),
        };
    }

    private async Task<MemoryStream> ConvertStringToStreamAsync(string payload)
    {
        using MemoryStream stream = new();
        var byteArray = Encoding.UTF8.GetBytes(payload);
        await stream.WriteAsync(byteArray).ConfigureAwait(false);
        return stream;
    }
}
